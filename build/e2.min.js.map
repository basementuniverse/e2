{"version":3,"file":"e2.min.js","mappings":"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","sources":["webpack://E2/webpack/universalModuleDefinition","webpack://E2/webpack/bootstrap","webpack://E2/webpack/runtime/define property getters","webpack://E2/webpack/runtime/hasOwnProperty shorthand","webpack://E2/webpack/runtime/make namespace object","webpack://E2/./src/utils.ts","webpack://E2/./src/elements/app/app.ts","webpack://E2/./src/elements/contextmenu/context-menu.ts","webpack://E2/./src/elements/contextmenu/context-menu-item.ts","webpack://E2/./src/elements/contextmenu/context-menu-separator.ts","webpack://E2/./src/elements/dialog/alert.ts","webpack://E2/./src/elements/dialog/confirm.ts","webpack://E2/./src/elements/dialog/dialog.ts","webpack://E2/./src/elements/dialog/prompt.ts","webpack://E2/./src/elements/panel/collapsible-panel.ts","webpack://E2/./src/elements/panel/split-panel.ts","webpack://E2/./src/elements/panel/split-panel-container.ts","webpack://E2/./src/elements/tabs/tab.ts","webpack://E2/./src/elements/tabs/tab-container.ts","webpack://E2/./src/elements/tabs/tab-panel.ts","webpack://E2/./src/elements/toolbar/toolbar.ts","webpack://E2/./src/elements/toolbar/toolbar-button.ts","webpack://E2/./src/elements/toolbar/toolbar-menu.ts","webpack://E2/./src/elements/toolbar/toolbar-separator.ts","webpack://E2/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"E2\"] = factory();\n\telse\n\t\troot[\"E2\"] = factory();\n})(this, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Utility functions for editor elements\n */\n\n/**\n * Generate a unique ID for elements\n */\nexport function generateId(prefix = 'element'): string {\n  return `${prefix}-${Math.random().toString(36).substring(2, 9)}`;\n}\n\n/**\n * Dispatch a custom event from an element\n */\nexport function dispatchCustomEvent<T = any>(\n  element: HTMLElement,\n  eventName: string,\n  detail?: T,\n  options: CustomEventInit = {}\n): boolean {\n  const event = new CustomEvent(eventName, {\n    detail,\n    bubbles: true,\n    cancelable: true,\n    ...options,\n  });\n\n  return element.dispatchEvent(event);\n}\n\n/**\n * Add CSS to the document head if it doesn't already exist\n */\nexport function addGlobalCSS(css: string, id?: string): void {\n  if (id && document.getElementById(id)) {\n    return; // CSS already added\n  }\n\n  const style = document.createElement('style');\n  if (id) {\n    style.id = id;\n  }\n  style.textContent = css;\n  document.head.appendChild(style);\n}\n\n/**\n * Create a template element with the given HTML\n */\nexport function createTemplate(html: string): HTMLTemplateElement {\n  const template = document.createElement('template');\n  template.innerHTML = html.trim();\n  return template;\n}\n\n/**\n * Get or create a shadow root for an element\n */\nexport function getShadowRoot(\n  element: HTMLElement,\n  options: ShadowRootInit = { mode: 'open' }\n): ShadowRoot {\n  return element.shadowRoot || element.attachShadow(options);\n}\n\n/**\n * Debounce function to limit how often a function can be called\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: number;\n\n  return function executedFunction(...args: Parameters<T>) {\n    const later = () => {\n      clearTimeout(timeout);\n      func(...args);\n    };\n\n    clearTimeout(timeout);\n    timeout = window.setTimeout(later, wait);\n  };\n}\n\n/**\n * Check if an element is visible in the viewport\n */\nexport function isElementVisible(element: HTMLElement): boolean {\n  const rect = element.getBoundingClientRect();\n  return (\n    rect.top >= 0 &&\n    rect.left >= 0 &&\n    rect.bottom <=\n      (window.innerHeight || document.documentElement.clientHeight) &&\n    rect.right <= (window.innerWidth || document.documentElement.clientWidth)\n  );\n}\n\n/**\n * Apply theme class to an element\n */\nexport function applyTheme(\n  element: HTMLElement,\n  theme: 'light' | 'dark' | 'auto'\n): void {\n  element.classList.remove('theme-light', 'theme-dark', 'theme-auto');\n  element.classList.add(`theme-${theme}`);\n}\n","/**\n * E2 App Element\n * A wrapper element that provides global CSS styles and theming for E2 applications\n */\n\nimport { EditorElementProperties, Theme } from '../../types';\nimport { applyTheme, generateId } from '../../utils';\n\nexport class E2App extends HTMLElement implements EditorElementProperties {\n  private _theme: Theme = 'auto';\n  private _stylesInitialized: boolean = false;\n\n  static get observedAttributes(): string[] {\n    return ['theme'];\n  }\n\n  constructor() {\n    super();\n    // Don't set up DOM in constructor - defer to connectedCallback\n  }\n\n  private setupElement(): void {\n    // Apply styles directly to the document head (not to the element itself)\n    // This allows global styles to cascade to child elements without interfering with DOM structure\n\n    // Check if styles are already added to avoid conflicts\n    if (!this._stylesInitialized && !document.getElementById('e2-app-styles')) {\n      const styleElement = document.createElement('style');\n      styleElement.id = 'e2-app-styles';\n      styleElement.textContent = `\n        /* CSS Reset and Base Styles */\n        e2-app, e2-app * {\n          box-sizing: border-box;\n        }\n\n        e2-app {\n          /* Layout */\n          --app-width: 100%;\n          --app-height: 100vh;\n          --app-padding: 0;\n          --app-margin: 0;\n\n          /* Typography */\n          --font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', sans-serif;\n          --font-size: 14px;\n          --line-height: 1.4;\n          --font-weight: 400;\n\n          /* Colors - Light Theme */\n          --bg-primary: #ffffff;\n          --bg-secondary: #f8f9fa;\n          --bg-tertiary: #e9ecef;\n          --text-primary: #212529;\n          --text-secondary: #6c757d;\n          --text-muted: #adb5bd;\n          --border-color: #dee2e6;\n          --border-color-hover: #adb5bd;\n          --accent-color: #0d6efd;\n          --accent-color-hover: #0b5ed7;\n          --success-color: #198754;\n          --warning-color: #ffc107;\n          --danger-color: #dc3545;\n\n          /* Form Controls */\n          --input-bg: #ffffff;\n          --input-border: #ced4da;\n          --input-border-focus: #86b7fe;\n          --input-text: #212529;\n          --input-placeholder: #6c757d;\n          --input-padding: 6px 12px;\n          --input-border-radius: 4px;\n          --input-font-size: 14px;\n\n          /* Buttons */\n          --button-bg: #f8f9fa;\n          --button-bg-hover: #e9ecef;\n          --button-border: #ced4da;\n          --button-text: #212529;\n          --button-padding: 6px 12px;\n          --button-border-radius: 4px;\n\n          /* Shadows */\n          --shadow-sm: 0 1px 2px rgba(0, 0, 0, 0.05);\n          --shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n          --shadow-lg: 0 4px 6px rgba(0, 0, 0, 0.1);\n\n          /* Transitions */\n          --transition-fast: 0.15s ease-in-out;\n          --transition-normal: 0.3s ease-in-out;\n\n          /* Apply base layout */\n          display: block;\n          width: var(--app-width);\n          height: var(--app-height);\n          padding: var(--app-padding);\n          margin: var(--app-margin);\n          font-family: var(--font-family);\n          font-size: var(--font-size);\n          line-height: var(--line-height);\n          font-weight: var(--font-weight);\n          color: var(--text-primary);\n          background-color: var(--bg-primary);\n          overflow: hidden;\n        }\n\n        /* Dark Theme */\n        e2-app.theme-dark {\n          --bg-primary: #1a1a1a;\n          --bg-secondary: #2d2d2d;\n          --bg-tertiary: #404040;\n          --text-primary: #ffffff;\n          --text-secondary: #cccccc;\n          --text-muted: #999999;\n          --border-color: #404040;\n          --border-color-hover: #666666;\n          --accent-color: #4dabf7;\n          --accent-color-hover: #339af0;\n          --success-color: #51cf66;\n          --warning-color: #ffd43b;\n          --danger-color: #ff6b6b;\n\n          --input-bg: #2d2d2d;\n          --input-border: #404040;\n          --input-border-focus: #4dabf7;\n          --input-text: #ffffff;\n          --input-placeholder: #999999;\n\n          --button-bg: #2d2d2d;\n          --button-bg-hover: #404040;\n          --button-border: #404040;\n          --button-text: #ffffff;\n\n          --shadow-sm: 0 1px 2px rgba(0, 0, 0, 0.25);\n          --shadow: 0 1px 3px rgba(0, 0, 0, 0.3);\n          --shadow-lg: 0 4px 6px rgba(0, 0, 0, 0.3);\n        }\n\n        /* Auto Theme - uses system preference */\n        e2-app.theme-auto {\n          color-scheme: light dark;\n        }\n\n        @media (prefers-color-scheme: dark) {\n          e2-app.theme-auto {\n            --bg-primary: #1a1a1a;\n            --bg-secondary: #2d2d2d;\n            --bg-tertiary: #404040;\n            --text-primary: #ffffff;\n            --text-secondary: #cccccc;\n            --text-muted: #999999;\n            --border-color: #404040;\n            --border-color-hover: #666666;\n            --accent-color: #4dabf7;\n            --accent-color-hover: #339af0;\n            --success-color: #51cf66;\n            --warning-color: #ffd43b;\n            --danger-color: #ff6b6b;\n\n            --input-bg: #2d2d2d;\n            --input-border: #404040;\n            --input-border-focus: #4dabf7;\n            --input-text: #ffffff;\n            --input-placeholder: #999999;\n\n            --button-bg: #2d2d2d;\n            --button-bg-hover: #404040;\n            --button-border: #404040;\n            --button-text: #ffffff;\n\n            --shadow-sm: 0 1px 2px rgba(0, 0, 0, 0.25);\n            --shadow: 0 1px 3px rgba(0, 0, 0, 0.3);\n            --shadow-lg: 0 4px 6px rgba(0, 0, 0, 0.3);\n          }\n        }\n\n        /* Typography Styles */\n        e2-app h1, e2-app h2, e2-app h3, e2-app h4, e2-app h5, e2-app h6 {\n          margin: 0 0 0.5em 0;\n          font-weight: 600;\n          line-height: 1.2;\n          color: var(--text-primary);\n        }\n\n        e2-app h1 { font-size: 2rem; }\n        e2-app h2 { font-size: 1.5rem; }\n        e2-app h3 { font-size: 1.25rem; }\n        e2-app h4 { font-size: 1.1rem; }\n        e2-app h5 { font-size: 1rem; }\n        e2-app h6 { font-size: 0.9rem; }\n\n        e2-app p {\n          margin: 0 0 1em 0;\n          color: var(--text-primary);\n        }\n\n        e2-app small {\n          font-size: 0.875em;\n          color: var(--text-secondary);\n        }\n\n        e2-app strong {\n          font-weight: 600;\n        }\n\n        e2-app a {\n          color: var(--accent-color);\n          text-decoration: none;\n          transition: color var(--transition-fast);\n        }\n\n        e2-app a:hover {\n          color: var(--accent-color-hover);\n          text-decoration: underline;\n        }\n\n        /* Form Control Styles */\n        e2-app input[type=\"text\"],\n        e2-app input[type=\"email\"],\n        e2-app input[type=\"password\"],\n        e2-app input[type=\"number\"],\n        e2-app input[type=\"search\"],\n        e2-app input[type=\"url\"],\n        e2-app input[type=\"tel\"],\n        e2-app input[type=\"date\"],\n        e2-app input[type=\"time\"],\n        e2-app input[type=\"datetime-local\"],\n        e2-app textarea,\n        e2-app select {\n          display: block;\n          width: 100%;\n          padding: var(--input-padding);\n          font-size: var(--input-font-size);\n          font-family: var(--font-family);\n          line-height: var(--line-height);\n          color: var(--input-text);\n          background-color: var(--input-bg);\n          background-clip: padding-box;\n          border: 1px solid var(--input-border);\n          border-radius: var(--input-border-radius);\n          transition: border-color var(--transition-fast), box-shadow var(--transition-fast);\n        }\n\n        e2-app input[type=\"text\"]:focus,\n        e2-app input[type=\"email\"]:focus,\n        e2-app input[type=\"password\"]:focus,\n        e2-app input[type=\"number\"]:focus,\n        e2-app input[type=\"search\"]:focus,\n        e2-app input[type=\"url\"]:focus,\n        e2-app input[type=\"tel\"]:focus,\n        e2-app input[type=\"date\"]:focus,\n        e2-app input[type=\"time\"]:focus,\n        e2-app input[type=\"datetime-local\"]:focus,\n        e2-app textarea:focus,\n        e2-app select:focus {\n          outline: 0;\n          border-color: var(--input-border-focus);\n          box-shadow: 0 0 0 2px rgba(13, 110, 253, 0.25);\n        }\n\n        e2-app input::placeholder,\n        e2-app textarea::placeholder {\n          color: var(--input-placeholder);\n          opacity: 1;\n        }\n\n        e2-app input:disabled,\n        e2-app textarea:disabled,\n        e2-app select:disabled {\n          background-color: var(--bg-tertiary);\n          opacity: 0.6;\n          cursor: not-allowed;\n        }\n\n        /* Textarea specific */\n        e2-app textarea {\n          resize: vertical;\n          min-height: 80px;\n        }\n\n        /* Select specific */\n        e2-app select {\n          cursor: pointer;\n        }\n\n        /* Checkbox and Radio Styles */\n        e2-app input[type=\"checkbox\"],\n        e2-app input[type=\"radio\"] {\n          width: 16px;\n          height: 16px;\n          margin: 0 8px 0 0;\n          vertical-align: middle;\n          cursor: pointer;\n          accent-color: var(--accent-color);\n        }\n\n        e2-app input[type=\"checkbox\"]:disabled,\n        e2-app input[type=\"radio\"]:disabled {\n          cursor: not-allowed;\n          opacity: 0.6;\n        }\n\n        /* Range Input */\n        e2-app input[type=\"range\"] {\n          width: 100%;\n          height: 6px;\n          background: var(--bg-tertiary);\n          border-radius: 3px;\n          outline: none;\n          cursor: pointer;\n          accent-color: var(--accent-color);\n        }\n\n        /* File Input */\n        e2-app input[type=\"file\"] {\n          display: block;\n          width: 100%;\n          padding: var(--input-padding);\n          font-size: var(--input-font-size);\n          font-family: var(--font-family);\n          color: var(--input-text);\n          background-color: var(--input-bg);\n          border: 1px solid var(--input-border);\n          border-radius: var(--input-border-radius);\n          cursor: pointer;\n        }\n\n        /* Button Styles */\n        e2-app button,\n        e2-app input[type=\"button\"],\n        e2-app input[type=\"submit\"],\n        e2-app input[type=\"reset\"] {\n          display: inline-block;\n          padding: var(--button-padding);\n          font-size: var(--input-font-size);\n          font-family: var(--font-family);\n          font-weight: 500;\n          line-height: var(--line-height);\n          color: var(--button-text);\n          text-align: center;\n          text-decoration: none;\n          vertical-align: middle;\n          cursor: pointer;\n          background-color: var(--button-bg);\n          border: 1px solid var(--button-border);\n          border-radius: var(--button-border-radius);\n          transition: all var(--transition-fast);\n          user-select: none;\n        }\n\n        e2-app button:hover,\n        e2-app input[type=\"button\"]:hover,\n        e2-app input[type=\"submit\"]:hover,\n        e2-app input[type=\"reset\"]:hover {\n          background-color: var(--button-bg-hover);\n          border-color: var(--border-color-hover);\n        }\n\n        e2-app button:focus,\n        e2-app input[type=\"button\"]:focus,\n        e2-app input[type=\"submit\"]:focus,\n        e2-app input[type=\"reset\"]:focus {\n          outline: 0;\n          box-shadow: 0 0 0 2px rgba(13, 110, 253, 0.25);\n        }\n\n        e2-app button:disabled,\n        e2-app input[type=\"button\"]:disabled,\n        e2-app input[type=\"submit\"]:disabled,\n        e2-app input[type=\"reset\"]:disabled {\n          opacity: 0.6;\n          cursor: not-allowed;\n          pointer-events: none;\n        }\n\n        /* Primary Button Variant */\n        e2-app button.primary,\n        e2-app input[type=\"submit\"] {\n          color: white;\n          background-color: var(--accent-color);\n          border-color: var(--accent-color);\n        }\n\n        e2-app button.primary:hover,\n        e2-app input[type=\"submit\"]:hover {\n          background-color: var(--accent-color-hover);\n          border-color: var(--accent-color-hover);\n        }\n\n        /* Label Styles */\n        e2-app label {\n          display: inline-block;\n          margin-bottom: 4px;\n          font-weight: 500;\n          color: var(--text-primary);\n          cursor: pointer;\n        }\n\n        /* Fieldset and Legend */\n        e2-app fieldset {\n          padding: 16px;\n          margin: 0 0 16px 0;\n          border: 1px solid var(--border-color);\n          border-radius: var(--input-border-radius);\n        }\n\n        e2-app legend {\n          padding: 0 8px;\n          font-weight: 600;\n          color: var(--text-primary);\n        }\n\n        /* Form Groups */\n        e2-app .form-group {\n          margin-bottom: 16px;\n        }\n\n        e2-app .form-group label {\n          display: block;\n          margin-bottom: 4px;\n        }\n\n        /* Utility Classes */\n        e2-app .text-muted {\n          color: var(--text-muted) !important;\n        }\n\n        e2-app .text-primary {\n          color: var(--text-primary) !important;\n        }\n\n        e2-app .text-secondary {\n          color: var(--text-secondary) !important;\n        }\n\n        e2-app .bg-primary {\n          background-color: var(--bg-primary) !important;\n        }\n\n        e2-app .bg-secondary {\n          background-color: var(--bg-secondary) !important;\n        }\n\n        e2-app .border {\n          border: 1px solid var(--border-color) !important;\n        }\n\n        e2-app .rounded {\n          border-radius: var(--input-border-radius) !important;\n        }\n\n        e2-app .shadow {\n          box-shadow: var(--shadow) !important;\n        }\n\n        e2-app .shadow-sm {\n          box-shadow: var(--shadow-sm) !important;\n        }\n\n        e2-app .shadow-lg {\n          box-shadow: var(--shadow-lg) !important;\n        }\n      `;\n\n      // Add style element to document head instead of modifying the App element's DOM\n      // This prevents interference with child custom element initialization\n      document.head.appendChild(styleElement);\n      this._stylesInitialized = true;\n    }\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('e2-app');\n    }\n\n    // Set up element after it's connected to DOM\n    this.setupElement();\n\n    this.applyTheme(this._theme);\n\n    // Set up system theme detection for auto mode\n    if (this._theme === 'auto') {\n      this.setupAutoTheme();\n    }\n  }\n\n  disconnectedCallback(): void {\n    // Clean up theme listeners if any\n    if (this.mediaQueryList) {\n      this.mediaQueryList.removeEventListener('change', this.handleThemeChange);\n    }\n  }\n\n  private mediaQueryList?: MediaQueryList;\n  private handleThemeChange = () => {\n    if (this._theme === 'auto') {\n      this.applyTheme('auto');\n    }\n  };\n\n  private setupAutoTheme(): void {\n    if (typeof window !== 'undefined' && window.matchMedia) {\n      this.mediaQueryList = window.matchMedia('(prefers-color-scheme: dark)');\n      this.mediaQueryList.addEventListener('change', this.handleThemeChange);\n    }\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string,\n    newValue: string\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'theme':\n        this.theme = newValue as Theme;\n        break;\n    }\n  }\n\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this._theme = value;\n    this.applyTheme(value);\n\n    if (value === 'auto') {\n      this.setupAutoTheme();\n    } else if (this.mediaQueryList) {\n      this.mediaQueryList.removeEventListener('change', this.handleThemeChange);\n      this.mediaQueryList = undefined;\n    }\n  }\n\n  applyTheme(theme: Theme): void {\n    applyTheme(this, theme);\n  }\n\n  /**\n   * Set a custom CSS property value\n   */\n  setCSSVariable(property: string, value: string): void {\n    this.style.setProperty(`--${property}`, value);\n  }\n\n  /**\n   * Get a custom CSS property value\n   */\n  getCSSVariable(property: string): string {\n    return getComputedStyle(this).getPropertyValue(`--${property}`).trim();\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-app')) {\n  customElements.define('e2-app', E2App);\n}\n","/**\n * Context Menu Element\n * A popup menu that appears on right-click or programmatic trigger\n */\n\nimport {\n  ContextMenuHideEvent,\n  ContextMenuShowEvent,\n  EditorElementProperties,\n  Theme,\n} from '../../types';\nimport {\n  applyTheme,\n  dispatchCustomEvent,\n  generateId,\n  getShadowRoot,\n} from '../../utils';\n\nexport class ContextMenu\n  extends HTMLElement\n  implements EditorElementProperties\n{\n  private _theme: Theme = 'auto';\n  private _visible: boolean = false;\n  private _justShown: boolean = false;\n\n  static get observedAttributes(): string[] {\n    return ['theme', 'disabled', 'target'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n    this.bindEvents();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          position: fixed;\n          z-index: 9999;\n          display: none;\n          min-width: 180px;\n          background: var(--context-menu-bg, #ffffff);\n          border: 1px solid var(--context-menu-border, #d0d0d0);\n          border-radius: 4px;\n          box-shadow: var(--context-menu-shadow, 0 2px 8px rgba(0, 0, 0, 0.15));\n          padding: 4px 0;\n          font-family: inherit;\n          font-size: 14px;\n        }\n\n        :host([visible]) {\n          display: block;\n        }\n\n        :host([disabled]) {\n          opacity: 0.6;\n          pointer-events: none;\n        }\n\n        /* Light theme */\n        :host(.theme-light) {\n          background: var(--context-menu-bg-light, #ffffff);\n          border-color: var(--context-menu-border-light, #d0d0d0);\n          box-shadow: var(--context-menu-shadow-light, 0 2px 8px rgba(0, 0, 0, 0.15));\n        }\n\n        /* Dark theme */\n        :host(.theme-dark) {\n          background: var(--context-menu-bg-dark, #2a2a2a);\n          border-color: var(--context-menu-border-dark, #444444);\n          box-shadow: var(--context-menu-shadow-dark, 0 2px 8px rgba(0, 0, 0, 0.4));\n        }\n\n        /* Auto theme - follows system preference */\n        @media (prefers-color-scheme: dark) {\n          :host(.theme-auto) {\n            background: var(--context-menu-bg-dark, #2a2a2a);\n            border-color: var(--context-menu-border-dark, #444444);\n            box-shadow: var(--context-menu-shadow-dark, 0 2px 8px rgba(0, 0, 0, 0.4));\n          }\n        }\n\n        ::slotted(*) {\n          display: block;\n        }\n      </style>\n      <slot></slot>\n    `;\n  }\n\n  private bindEvents(): void {\n    // Close menu when clicking outside\n    document.addEventListener('click', this.handleDocumentClick.bind(this));\n\n    // Close menu on escape key\n    document.addEventListener('keydown', this.handleKeyDown.bind(this));\n\n    // Handle window resize\n    window.addEventListener('resize', this.handleWindowResize.bind(this));\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('context-menu');\n    }\n    this.applyTheme(this._theme);\n    this.setupTargetListeners();\n  }\n\n  disconnectedCallback(): void {\n    this.removeTargetListeners();\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string,\n    newValue: string\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'theme':\n        this._theme = (newValue as Theme) || 'auto';\n        this.applyTheme(this._theme);\n        break;\n      case 'target':\n        this.removeTargetListeners();\n        this.setupTargetListeners();\n        break;\n      case 'disabled':\n        if (newValue !== null && this._visible) {\n          this.hide();\n        }\n        break;\n    }\n  }\n\n  private boundContextMenuHandler = this.handleContextMenu.bind(this);\n\n  private setupTargetListeners(): void {\n    const targetSelector = this.getAttribute('target');\n    if (!targetSelector) return;\n\n    const targets = document.querySelectorAll(targetSelector);\n    targets.forEach(target => {\n      target.addEventListener('contextmenu', this.boundContextMenuHandler);\n    });\n  }\n\n  private removeTargetListeners(): void {\n    const targetSelector = this.getAttribute('target');\n    if (!targetSelector) return;\n\n    const targets = document.querySelectorAll(targetSelector);\n    targets.forEach(target => {\n      target.removeEventListener('contextmenu', this.boundContextMenuHandler);\n    });\n  }\n\n  private handleContextMenu(event: Event): void {\n    if (this.disabled) return;\n\n    const mouseEvent = event as MouseEvent;\n    mouseEvent.preventDefault();\n    mouseEvent.stopPropagation();\n\n    const trigger = mouseEvent.currentTarget as HTMLElement;\n    this.show(mouseEvent.clientX, mouseEvent.clientY, trigger);\n  }\n\n  private handleDocumentClick(event: MouseEvent): void {\n    if (!this._visible) return;\n\n    // Ignore the click that just triggered the menu to show\n    if (this._justShown) {\n      this._justShown = false;\n      return;\n    }\n\n    const target = event.target as Node;\n    if (!this.contains(target) && !this.shadowRoot?.contains(target)) {\n      this.hide();\n    }\n  }\n\n  private handleKeyDown(event: KeyboardEvent): void {\n    if (!this._visible) return;\n\n    switch (event.key) {\n      case 'Escape':\n        event.preventDefault();\n        this.hide();\n        break;\n      case 'ArrowDown':\n        event.preventDefault();\n        this.focusNextItem();\n        break;\n      case 'ArrowUp':\n        event.preventDefault();\n        this.focusPreviousItem();\n        break;\n      case 'Enter':\n      case ' ':\n        event.preventDefault();\n        this.activateFocusedItem();\n        break;\n    }\n  }\n\n  private handleWindowResize(): void {\n    if (this._visible) {\n      this.hide();\n    }\n  }\n\n  private focusNextItem(): void {\n    const items = this.querySelectorAll('e2-context-menu-item:not([disabled])');\n    const currentIndex = Array.from(items).findIndex(\n      item => item === document.activeElement || item.shadowRoot?.activeElement\n    );\n\n    const nextIndex = currentIndex < items.length - 1 ? currentIndex + 1 : 0;\n    (items[nextIndex] as HTMLElement).focus();\n  }\n\n  private focusPreviousItem(): void {\n    const items = this.querySelectorAll('e2-context-menu-item:not([disabled])');\n    const currentIndex = Array.from(items).findIndex(\n      item => item === document.activeElement || item.shadowRoot?.activeElement\n    );\n\n    const prevIndex = currentIndex > 0 ? currentIndex - 1 : items.length - 1;\n    (items[prevIndex] as HTMLElement).focus();\n  }\n\n  private activateFocusedItem(): void {\n    const focused = document.activeElement;\n    if (focused && focused.tagName === 'e2-context-menu-ITEM') {\n      (focused as any).click();\n    }\n  }\n\n  // Public API\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this._theme = value;\n    this.setAttribute('theme', value);\n  }\n\n  get disabled(): boolean {\n    return this.hasAttribute('disabled');\n  }\n\n  set disabled(value: boolean) {\n    if (value) {\n      this.setAttribute('disabled', '');\n    } else {\n      this.removeAttribute('disabled');\n    }\n  }\n\n  get visible(): boolean {\n    return this._visible;\n  }\n\n  get target(): string | null {\n    return this.getAttribute('target');\n  }\n\n  set target(value: string | null) {\n    if (value) {\n      this.setAttribute('target', value);\n    } else {\n      this.removeAttribute('target');\n    }\n  }\n\n  show(x: number, y: number, trigger?: HTMLElement): void {\n    if (this.disabled) return;\n\n    this._visible = true;\n    this.setAttribute('visible', '');\n\n    // Position the menu\n    this.style.left = `${x}px`;\n    this.style.top = `${y}px`;\n\n    // Ensure menu stays within viewport\n    this.adjustPosition();\n\n    // Set the flag to prevent immediate hiding, reset it after a short delay\n    this._justShown = true;\n    setTimeout(() => {\n      this._justShown = false;\n    }, 50);\n\n    // Ensure all child items have the correct theme\n    this.applyTheme(this._theme);\n\n    // Focus first item\n    requestAnimationFrame(() => {\n      const firstItem = this.querySelector(\n        'e2-context-menu-item:not([disabled])'\n      ) as HTMLElement;\n      if (firstItem) {\n        firstItem.focus();\n      }\n    });\n\n    // Dispatch show event\n    dispatchCustomEvent<ContextMenuShowEvent['detail']>(\n      this,\n      'context-menu-show',\n      {\n        menuId: this.id,\n        menu: this,\n        x,\n        y,\n        trigger: trigger || this,\n      }\n    );\n  }\n\n  hide(): void {\n    if (!this._visible) return;\n\n    this._visible = false;\n    this.removeAttribute('visible');\n\n    // Dispatch hide event\n    dispatchCustomEvent<ContextMenuHideEvent['detail']>(\n      this,\n      'context-menu-hide',\n      {\n        menuId: this.id,\n        menu: this,\n      }\n    );\n  }\n\n  private adjustPosition(): void {\n    const rect = this.getBoundingClientRect();\n    const viewportWidth = window.innerWidth;\n    const viewportHeight = window.innerHeight;\n\n    let left = parseInt(this.style.left);\n    let top = parseInt(this.style.top);\n\n    // Adjust horizontal position\n    if (left + rect.width > viewportWidth) {\n      left = viewportWidth - rect.width - 10;\n    }\n    if (left < 10) {\n      left = 10;\n    }\n\n    // Adjust vertical position\n    if (top + rect.height > viewportHeight) {\n      top = viewportHeight - rect.height - 10;\n    }\n    if (top < 10) {\n      top = 10;\n    }\n\n    this.style.left = `${left}px`;\n    this.style.top = `${top}px`;\n  }\n\n  applyTheme(theme: Theme): void {\n    this._theme = theme;\n    applyTheme(this, theme);\n\n    // Apply theme to all child context menu items and separators\n    const childItems = this.querySelectorAll(\n      'e2-context-menu-item, e2-context-menu-separator'\n    );\n    childItems.forEach(child => {\n      if (typeof (child as any).applyTheme === 'function') {\n        (child as any).applyTheme(theme);\n      }\n    });\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-context-menu')) {\n  customElements.define('e2-context-menu', ContextMenu);\n}\n","/**\n * Context Menu Item Element\n * A clickable item within a context menu\n */\n\nimport {\n  ContextMenuItemClickEvent,\n  EditorElementProperties,\n  Theme,\n} from '../../types';\nimport {\n  applyTheme,\n  dispatchCustomEvent,\n  generateId,\n  getShadowRoot,\n} from '../../utils';\n\nexport class ContextMenuItem\n  extends HTMLElement\n  implements EditorElementProperties\n{\n  private _theme: Theme = 'auto';\n\n  static get observedAttributes(): string[] {\n    return ['label', 'icon', 'theme', 'disabled', 'value', 'shortcut'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: block;\n        }\n\n        .item {\n          display: flex;\n          align-items: center;\n          padding: 8px 16px;\n          cursor: pointer;\n          color: var(--context-menu-item-color, #333);\n          background: transparent;\n          border: none;\n          width: 100%;\n          text-align: left;\n          font-family: inherit;\n          font-size: inherit;\n          line-height: 1.4;\n          transition: background-color 0.15s ease;\n          outline: none;\n        }\n\n        .item:hover,\n        .item:focus {\n          background: var(--context-menu-item-hover-bg, rgba(0, 0, 0, 0.1));\n        }\n\n        .item:disabled {\n          opacity: 0.6;\n          cursor: not-allowed;\n        }\n\n        .item:disabled:hover {\n          background: transparent;\n        }\n\n        .icon {\n          width: 16px;\n          height: 16px;\n          margin-right: 8px;\n          flex-shrink: 0;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n        }\n\n        .icon:empty {\n          margin-right: 0;\n          width: 0;\n        }\n\n        .content {\n          flex: 1;\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          min-width: 0;\n        }\n\n        .label {\n          flex: 1;\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n        }\n\n        .shortcut {\n          color: var(--context-menu-item-shortcut-color, #666);\n          font-size: 0.85em;\n          margin-left: 12px;\n          flex-shrink: 0;\n        }\n\n        /* Light theme */\n        :host(.theme-light) .item {\n          color: var(--context-menu-item-color-light, #333);\n        }\n\n        :host(.theme-light) .item:hover,\n        :host(.theme-light) .item:focus {\n          background: var(--context-menu-item-hover-bg-light, rgba(0, 0, 0, 0.1));\n        }\n\n        :host(.theme-light) .shortcut {\n          color: var(--context-menu-item-shortcut-color-light, #666);\n        }\n\n        /* Dark theme */\n        :host(.theme-dark) .item {\n          color: var(--context-menu-item-color-dark, #fff);\n        }\n\n        :host(.theme-dark) .item:hover,\n        :host(.theme-dark) .item:focus {\n          background: var(--context-menu-item-hover-bg-dark, rgba(255, 255, 255, 0.1));\n        }\n\n        :host(.theme-dark) .shortcut {\n          color: var(--context-menu-item-shortcut-color-dark, #aaa);\n        }\n\n        /* Auto theme - follows system preference */\n        @media (prefers-color-scheme: dark) {\n          :host(.theme-auto) .item {\n            color: var(--context-menu-item-color-dark, #fff);\n          }\n\n          :host(.theme-auto) .item:hover,\n          :host(.theme-auto) .item:focus {\n            background: var(--context-menu-item-hover-bg-dark, rgba(255, 255, 255, 0.1));\n          }\n\n          :host(.theme-auto) .shortcut {\n            color: var(--context-menu-item-shortcut-color-dark, #aaa);\n          }\n        }\n      </style>\n      <button class=\"item\" type=\"button\">\n        <span class=\"icon\"></span>\n        <div class=\"content\">\n          <span class=\"label\"></span>\n          <span class=\"shortcut\"></span>\n        </div>\n      </button>\n    `;\n\n    const button = shadowRoot.querySelector('.item')!;\n    button.addEventListener('click', this.handleClick.bind(this));\n    button.addEventListener('keydown', (event: Event) =>\n      this.handleKeyDown(event as KeyboardEvent)\n    );\n\n    // Make the element focusable\n    this.tabIndex = 0;\n    this.addEventListener('focus', this.handleFocus.bind(this));\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('context-menu-item');\n    }\n    this.applyTheme(this._theme);\n    this.updateContent();\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string,\n    newValue: string\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'theme':\n        this._theme = (newValue as Theme) || 'auto';\n        this.applyTheme(this._theme);\n        break;\n      case 'label':\n      case 'icon':\n      case 'shortcut':\n        this.updateContent();\n        break;\n      case 'disabled':\n        this.updateDisabledState();\n        break;\n    }\n  }\n\n  private updateContent(): void {\n    if (!this.shadowRoot) return;\n\n    const iconElement = this.shadowRoot.querySelector('.icon') as HTMLElement;\n    const labelElement = this.shadowRoot.querySelector('.label') as HTMLElement;\n    const shortcutElement = this.shadowRoot.querySelector(\n      '.shortcut'\n    ) as HTMLElement;\n\n    // Update icon\n    const icon = this.getAttribute('icon');\n    if (icon) {\n      iconElement.textContent = icon;\n      iconElement.style.display = 'flex';\n    } else {\n      iconElement.textContent = '';\n      iconElement.style.display = 'none';\n    }\n\n    // Update label\n    const label = this.getAttribute('label') || this.textContent?.trim() || '';\n    labelElement.textContent = label;\n\n    // Update shortcut\n    const shortcut = this.getAttribute('shortcut');\n    if (shortcut) {\n      shortcutElement.textContent = shortcut;\n      shortcutElement.style.display = 'block';\n    } else {\n      shortcutElement.textContent = '';\n      shortcutElement.style.display = 'none';\n    }\n  }\n\n  private updateDisabledState(): void {\n    if (!this.shadowRoot) return;\n\n    const button = this.shadowRoot.querySelector('.item') as HTMLButtonElement;\n    button.disabled = this.disabled;\n  }\n\n  private handleClick(event: Event): void {\n    if (this.disabled) return;\n\n    event.stopPropagation();\n\n    // Find the parent context menu\n    const contextMenu = this.closest('e2-context-menu');\n\n    // Dispatch item click event\n    dispatchCustomEvent<ContextMenuItemClickEvent['detail']>(\n      this,\n      'context-menu-item-click',\n      {\n        itemId: this.id,\n        item: this,\n        menuId: contextMenu?.id || '',\n        menu: contextMenu as HTMLElement,\n        value: this.value,\n      }\n    );\n\n    // Hide the context menu\n    if (contextMenu && typeof (contextMenu as any).hide === 'function') {\n      (contextMenu as any).hide();\n    }\n  }\n\n  private handleKeyDown(event: KeyboardEvent): void {\n    if (this.disabled) return;\n\n    // Let the parent context menu handle navigation keys\n    if (['ArrowDown', 'ArrowUp', 'Escape'].includes(event.key)) {\n      return;\n    }\n\n    if (event.key === 'Enter' || event.key === ' ') {\n      event.preventDefault();\n      this.handleClick(event);\n    }\n  }\n\n  private handleFocus(): void {\n    if (!this.shadowRoot) return;\n\n    const button = this.shadowRoot.querySelector('.item') as HTMLButtonElement;\n    button.focus();\n  }\n\n  // Public API\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this._theme = value;\n    this.setAttribute('theme', value);\n  }\n\n  get disabled(): boolean {\n    return this.hasAttribute('disabled');\n  }\n\n  set disabled(value: boolean) {\n    if (value) {\n      this.setAttribute('disabled', '');\n    } else {\n      this.removeAttribute('disabled');\n    }\n  }\n\n  get label(): string {\n    return this.getAttribute('label') || '';\n  }\n\n  set label(value: string) {\n    this.setAttribute('label', value);\n  }\n\n  get icon(): string {\n    return this.getAttribute('icon') || '';\n  }\n\n  set icon(value: string) {\n    if (value) {\n      this.setAttribute('icon', value);\n    } else {\n      this.removeAttribute('icon');\n    }\n  }\n\n  get value(): string {\n    return this.getAttribute('value') || this.label;\n  }\n\n  set value(value: string) {\n    this.setAttribute('value', value);\n  }\n\n  get shortcut(): string {\n    return this.getAttribute('shortcut') || '';\n  }\n\n  set shortcut(value: string) {\n    if (value) {\n      this.setAttribute('shortcut', value);\n    } else {\n      this.removeAttribute('shortcut');\n    }\n  }\n\n  click(): void {\n    if (!this.disabled) {\n      this.handleClick(new Event('click'));\n    }\n  }\n\n  focus(): void {\n    super.focus();\n    this.handleFocus();\n  }\n\n  applyTheme(theme: Theme): void {\n    this._theme = theme;\n    applyTheme(this, theme);\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-context-menu-item')) {\n  customElements.define('e2-context-menu-item', ContextMenuItem);\n}\n","/**\n * Context Menu Separator Element\n * A visual separator line between context menu items\n */\n\nimport { EditorElementProperties, Theme } from '../../types';\nimport { applyTheme, getShadowRoot } from '../../utils';\n\nexport class ContextMenuSeparator\n  extends HTMLElement\n  implements EditorElementProperties\n{\n  private _theme: Theme = 'auto';\n\n  static get observedAttributes(): string[] {\n    return ['theme'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: block;\n          margin: 4px 0;\n        }\n\n        .separator {\n          height: 1px;\n          background: var(--context-menu-separator-color, #e0e0e0);\n          margin: 0 8px;\n        }\n\n        /* Light theme */\n        :host(.theme-light) .separator {\n          background: var(--context-menu-separator-color-light, #e0e0e0);\n        }\n\n        /* Dark theme */\n        :host(.theme-dark) .separator {\n          background: var(--context-menu-separator-color-dark, #555);\n        }\n\n        /* Auto theme - follows system preference */\n        @media (prefers-color-scheme: dark) {\n          :host(.theme-auto) .separator {\n            background: var(--context-menu-separator-color-dark, #555);\n          }\n        }\n      </style>\n      <div class=\"separator\"></div>\n    `;\n  }\n\n  connectedCallback(): void {\n    this.applyTheme(this._theme);\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string,\n    newValue: string\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'theme':\n        this._theme = (newValue as Theme) || 'auto';\n        this.applyTheme(this._theme);\n        break;\n    }\n  }\n\n  // Public API\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this._theme = value;\n    this.setAttribute('theme', value);\n  }\n\n  get disabled(): boolean {\n    return false; // Separators cannot be disabled\n  }\n\n  set disabled(_value: boolean) {\n    // Separators cannot be disabled\n  }\n\n  applyTheme(theme: Theme): void {\n    this._theme = theme;\n    applyTheme(this, theme);\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-context-menu-separator')) {\n  customElements.define('e2-context-menu-separator', ContextMenuSeparator);\n}\n","/**\n * Alert Dialog Element\n * A specialized dialog for displaying messages and notifications\n */\n\nimport { AlertType, EditorElementProperties, Theme } from '../../types';\nimport {\n  applyTheme,\n  dispatchCustomEvent,\n  generateId,\n  getShadowRoot,\n} from '../../utils';\n\nexport class AlertDialogElement\n  extends HTMLElement\n  implements EditorElementProperties\n{\n  private _theme: Theme = 'auto';\n  private _nativeDialog: HTMLDialogElement | null = null;\n  private _resolvePromise: ((value: void) => void) | null = null;\n  private _rejectPromise: ((reason?: any) => void) | null = null;\n\n  static get observedAttributes(): string[] {\n    return ['title', 'message', 'button-text', 'theme', 'type'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          --dialog-bg: #ffffff;\n          --dialog-border: #e0e0e0;\n          --dialog-shadow: rgba(0, 0, 0, 0.25);\n          --dialog-backdrop: rgba(0, 0, 0, 0.5);\n          --text-color: #333333;\n          --text-secondary: #666666;\n          --button-bg: #007bff;\n          --button-hover: #0056b3;\n          --button-active: #004085;\n          --icon-info: #17a2b8;\n          --icon-success: #28a745;\n          --icon-warning: #ffc107;\n          --icon-error: #dc3545;\n\n          display: block;\n        }\n\n        :host(.theme-dark) {\n          --dialog-bg: #2d2d2d;\n          --dialog-border: #555555;\n          --dialog-shadow: rgba(0, 0, 0, 0.5);\n          --dialog-backdrop: rgba(0, 0, 0, 0.7);\n          --text-color: #ffffff;\n          --text-secondary: #cccccc;\n          --button-bg: #0d6efd;\n          --button-hover: #0b5ed7;\n          --button-active: #0a58ca;\n          --icon-info: #0dcaf0;\n          --icon-success: #198754;\n          --icon-warning: #fd7e14;\n          --icon-error: #dc3545;\n        }\n\n        dialog {\n          border: 1px solid var(--dialog-border);\n          border-radius: 8px;\n          padding: 0;\n          background: var(--dialog-bg);\n          color: var(--text-color);\n          font-family: var(--font-family, system-ui, sans-serif);\n          font-size: var(--font-size, 14px);\n          box-shadow: 0 8px 24px var(--dialog-shadow);\n          min-width: 320px;\n          max-width: 500px;\n          animation: dialog-fade-in 0.2s ease-out;\n        }\n\n        dialog::backdrop {\n          background: var(--dialog-backdrop);\n          animation: backdrop-fade-in 0.2s ease-out;\n        }\n\n        @keyframes dialog-fade-in {\n          from {\n            opacity: 0;\n            transform: scale(0.9) translateY(-20px);\n          }\n          to {\n            opacity: 1;\n            transform: scale(1) translateY(0);\n          }\n        }\n\n        @keyframes backdrop-fade-in {\n          from { opacity: 0; }\n          to { opacity: 1; }\n        }\n\n        .dialog-content {\n          padding: 24px;\n        }\n\n        .dialog-header {\n          display: flex;\n          align-items: flex-start;\n          gap: 12px;\n          margin-bottom: 16px;\n        }\n\n        .dialog-icon {\n          flex-shrink: 0;\n          width: 24px;\n          height: 24px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          font-size: 20px;\n          margin-top: 2px;\n        }\n\n        .dialog-icon.type-info {\n          color: var(--icon-info);\n        }\n\n        .dialog-icon.type-success {\n          color: var(--icon-success);\n        }\n\n        .dialog-icon.type-warning {\n          color: var(--icon-warning);\n        }\n\n        .dialog-icon.type-error {\n          color: var(--icon-error);\n        }\n\n        .dialog-text {\n          flex: 1;\n        }\n\n        .dialog-title {\n          font-size: 18px;\n          font-weight: 600;\n          margin: 0 0 8px 0;\n          color: var(--text-color);\n        }\n\n        .dialog-message {\n          color: var(--text-secondary);\n          line-height: 1.5;\n          margin: 0;\n          white-space: pre-wrap;\n        }\n\n        .dialog-buttons {\n          display: flex;\n          justify-content: center;\n          margin-top: 24px;\n        }\n\n        .dialog-button {\n          padding: 10px 24px;\n          border: none;\n          border-radius: 4px;\n          background: var(--button-bg);\n          color: white;\n          font-family: inherit;\n          font-size: 14px;\n          font-weight: 500;\n          cursor: pointer;\n          transition: all 0.15s ease;\n          min-width: 100px;\n        }\n\n        .dialog-button:hover {\n          background: var(--button-hover);\n        }\n\n        .dialog-button:active {\n          background: var(--button-active);\n        }\n\n        .dialog-button:focus {\n          outline: 2px solid var(--button-bg);\n          outline-offset: 2px;\n        }\n\n        :host([hidden]) {\n          display: none !important;\n        }\n      </style>\n\n      <dialog part=\"dialog\">\n        <div class=\"dialog-content\" part=\"content\">\n          <div class=\"dialog-header\" part=\"header\">\n            <div class=\"dialog-icon type-info\" part=\"icon\">ℹ️</div>\n            <div class=\"dialog-text\" part=\"text\">\n              <h3 class=\"dialog-title\" part=\"title\">Information</h3>\n              <p class=\"dialog-message\" part=\"message\">This is an alert message.</p>\n            </div>\n          </div>\n\n          <div class=\"dialog-buttons\" part=\"buttons\">\n            <button class=\"dialog-button\" part=\"button\" type=\"button\">\n              OK\n            </button>\n          </div>\n        </div>\n      </dialog>\n    `;\n\n    this._nativeDialog = shadowRoot.querySelector('dialog');\n    const button = shadowRoot.querySelector('.dialog-button');\n\n    // Set up event listeners\n    if (this._nativeDialog) {\n      this._nativeDialog.addEventListener('close', this.handleClose.bind(this));\n      this._nativeDialog.addEventListener(\n        'cancel',\n        this.handleCancel.bind(this)\n      );\n    }\n\n    if (button) {\n      button.addEventListener('click', () => this.close());\n    }\n\n    // Apply initial theme\n    this.applyTheme(this._theme);\n    this.updateContent();\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('alert-dialog');\n    }\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string | null,\n    newValue: string | null\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'title':\n      case 'message':\n      case 'button-text':\n      case 'type':\n        this.updateContent();\n        break;\n      case 'theme':\n        this._theme = (newValue as Theme) || 'auto';\n        this.applyTheme(this._theme);\n        break;\n    }\n  }\n\n  private updateContent(): void {\n    const titleElement = this.shadowRoot?.querySelector('.dialog-title');\n    const messageElement = this.shadowRoot?.querySelector('.dialog-message');\n    const buttonElement = this.shadowRoot?.querySelector('.dialog-button');\n    const iconElement = this.shadowRoot?.querySelector('.dialog-icon');\n\n    if (titleElement) {\n      titleElement.textContent =\n        this.getAttribute('title') || this.getDefaultTitle();\n    }\n\n    if (messageElement) {\n      messageElement.textContent =\n        this.getAttribute('message') || 'This is an alert message.';\n    }\n\n    if (buttonElement) {\n      buttonElement.textContent = this.getAttribute('button-text') || 'OK';\n    }\n\n    if (iconElement) {\n      const type = this.getAttribute('type') || 'info';\n      iconElement.className = `dialog-icon type-${type}`;\n      iconElement.textContent = this.getIconForType(type);\n    }\n  }\n\n  private getDefaultTitle(): string {\n    const type = this.getAttribute('type') || 'info';\n    switch (type) {\n      case 'success':\n        return 'Success';\n      case 'warning':\n        return 'Warning';\n      case 'error':\n        return 'Error';\n      default:\n        return 'Information';\n    }\n  }\n\n  private getIconForType(type: string): string {\n    switch (type) {\n      case 'success':\n        return '✅';\n      case 'warning':\n        return '⚠️';\n      case 'error':\n        return '❌';\n      default:\n        return 'ℹ️';\n    }\n  }\n\n  private handleClose(): void {\n    if (this._resolvePromise) {\n      this._resolvePromise();\n      this._resolvePromise = null;\n      this._rejectPromise = null;\n    }\n\n    dispatchCustomEvent(this, 'alert-dialog-close', {\n      dialogId: this.id,\n      dialog: this,\n    });\n  }\n\n  private handleCancel(event: Event): void {\n    const cancelable = dispatchCustomEvent(this, 'alert-dialog-cancel', {\n      dialogId: this.id,\n      dialog: this,\n    });\n\n    if (!cancelable) {\n      event.preventDefault();\n    } else {\n      this.close();\n    }\n  }\n\n  private close(): void {\n    if (this._resolvePromise) {\n      this._resolvePromise();\n      this._resolvePromise = null;\n      this._rejectPromise = null;\n    }\n\n    dispatchCustomEvent(this, 'alert-dialog-dismiss', {\n      dialogId: this.id,\n      dialog: this,\n    });\n\n    this._nativeDialog?.close();\n  }\n\n  // Public API\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this.setAttribute('theme', value);\n  }\n\n  get title(): string {\n    return this.getAttribute('title') || this.getDefaultTitle();\n  }\n\n  set title(value: string) {\n    this.setAttribute('title', value);\n  }\n\n  get message(): string {\n    return this.getAttribute('message') || 'This is an alert message.';\n  }\n\n  set message(value: string) {\n    this.setAttribute('message', value);\n  }\n\n  get buttonText(): string {\n    return this.getAttribute('button-text') || 'OK';\n  }\n\n  set buttonText(value: string) {\n    this.setAttribute('button-text', value);\n  }\n\n  get type(): AlertType {\n    return (this.getAttribute('type') || 'info') as AlertType;\n  }\n\n  set type(value: AlertType) {\n    this.setAttribute('type', value);\n  }\n\n  get open(): boolean {\n    return this._nativeDialog?.open || false;\n  }\n\n  /**\n   * Show the alert dialog and return a promise that resolves when dismissed\n   */\n  public show(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (this._resolvePromise) {\n        // Already showing, reject the previous promise\n        this._rejectPromise?.(\n          new Error('Dialog was replaced by another show() call')\n        );\n      }\n\n      this._resolvePromise = resolve;\n      this._rejectPromise = reject;\n\n      dispatchCustomEvent(this, 'alert-dialog-show', {\n        dialogId: this.id,\n        dialog: this,\n      });\n\n      this._nativeDialog?.showModal();\n    });\n  }\n\n  public applyTheme(theme: Theme): void {\n    this._theme = theme;\n    applyTheme(this, theme);\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-alert')) {\n  customElements.define('e2-alert', AlertDialogElement);\n}\n","/**\n * Confirm Dialog Element\n * A specialized dialog for yes/no confirmations with promise-based API\n */\n\nimport { EditorElementProperties, Theme } from '../../types';\nimport {\n  applyTheme,\n  dispatchCustomEvent,\n  generateId,\n  getShadowRoot,\n} from '../../utils';\n\nexport class ConfirmDialogElement\n  extends HTMLElement\n  implements EditorElementProperties\n{\n  private _theme: Theme = 'auto';\n  private _nativeDialog: HTMLDialogElement | null = null;\n  private _resolvePromise: ((value: boolean) => void) | null = null;\n  private _rejectPromise: ((reason?: any) => void) | null = null;\n\n  static get observedAttributes(): string[] {\n    return [\n      'title',\n      'message',\n      'confirm-text',\n      'cancel-text',\n      'theme',\n      'danger',\n    ];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          --dialog-bg: #ffffff;\n          --dialog-border: #e0e0e0;\n          --dialog-shadow: rgba(0, 0, 0, 0.25);\n          --dialog-backdrop: rgba(0, 0, 0, 0.5);\n          --text-color: #333333;\n          --text-secondary: #666666;\n          --button-bg: #f8f9fa;\n          --button-border: #e0e0e0;\n          --button-hover: #e9ecef;\n          --button-active: #dee2e6;\n          --confirm-bg: #007bff;\n          --confirm-hover: #0056b3;\n          --confirm-active: #004085;\n          --danger-bg: #dc3545;\n          --danger-hover: #c82333;\n          --danger-active: #bd2130;\n\n          display: block;\n        }\n\n        :host(.theme-dark) {\n          --dialog-bg: #2d2d2d;\n          --dialog-border: #555555;\n          --dialog-shadow: rgba(0, 0, 0, 0.5);\n          --dialog-backdrop: rgba(0, 0, 0, 0.7);\n          --text-color: #ffffff;\n          --text-secondary: #cccccc;\n          --button-bg: #404040;\n          --button-border: #555555;\n          --button-hover: #4a4a4a;\n          --button-active: #555555;\n          --confirm-bg: #0d6efd;\n          --confirm-hover: #0b5ed7;\n          --confirm-active: #0a58ca;\n          --danger-bg: #dc3545;\n          --danger-hover: #bb2d3b;\n          --danger-active: #b02a37;\n        }\n\n        dialog {\n          border: 1px solid var(--dialog-border);\n          border-radius: 8px;\n          padding: 0;\n          background: var(--dialog-bg);\n          color: var(--text-color);\n          font-family: var(--font-family, system-ui, sans-serif);\n          font-size: var(--font-size, 14px);\n          box-shadow: 0 8px 24px var(--dialog-shadow);\n          min-width: 320px;\n          max-width: 500px;\n          animation: dialog-fade-in 0.2s ease-out;\n        }\n\n        dialog::backdrop {\n          background: var(--dialog-backdrop);\n          animation: backdrop-fade-in 0.2s ease-out;\n        }\n\n        @keyframes dialog-fade-in {\n          from {\n            opacity: 0;\n            transform: scale(0.9) translateY(-20px);\n          }\n          to {\n            opacity: 1;\n            transform: scale(1) translateY(0);\n          }\n        }\n\n        @keyframes backdrop-fade-in {\n          from { opacity: 0; }\n          to { opacity: 1; }\n        }\n\n        .dialog-content {\n          padding: 24px;\n        }\n\n        .dialog-title {\n          font-size: 18px;\n          font-weight: 600;\n          margin: 0 0 16px 0;\n          color: var(--text-color);\n        }\n\n        .dialog-message {\n          color: var(--text-secondary);\n          line-height: 1.5;\n          margin: 0 0 24px 0;\n        }\n\n        .dialog-buttons {\n          display: flex;\n          justify-content: flex-end;\n          gap: 12px;\n        }\n\n        .dialog-button {\n          padding: 8px 16px;\n          border: 1px solid var(--button-border);\n          border-radius: 4px;\n          background: var(--button-bg);\n          color: var(--text-color);\n          font-family: inherit;\n          font-size: 14px;\n          cursor: pointer;\n          transition: all 0.15s ease;\n          min-width: 80px;\n        }\n\n        .dialog-button:hover {\n          background: var(--button-hover);\n        }\n\n        .dialog-button:active {\n          background: var(--button-active);\n        }\n\n        .dialog-button:focus {\n          outline: 2px solid var(--confirm-bg);\n          outline-offset: 2px;\n        }\n\n        .confirm-button {\n          background: var(--confirm-bg);\n          color: white;\n          border-color: var(--confirm-bg);\n        }\n\n        .confirm-button:hover {\n          background: var(--confirm-hover);\n          border-color: var(--confirm-hover);\n        }\n\n        .confirm-button:active {\n          background: var(--confirm-active);\n          border-color: var(--confirm-active);\n        }\n\n        :host([danger]) .confirm-button {\n          background: var(--danger-bg);\n          border-color: var(--danger-bg);\n        }\n\n        :host([danger]) .confirm-button:hover {\n          background: var(--danger-hover);\n          border-color: var(--danger-hover);\n        }\n\n        :host([danger]) .confirm-button:active {\n          background: var(--danger-active);\n          border-color: var(--danger-active);\n        }\n\n        :host([danger]) .confirm-button:focus {\n          outline-color: var(--danger-bg);\n        }\n\n        :host([hidden]) {\n          display: none !important;\n        }\n      </style>\n\n      <dialog part=\"dialog\">\n        <div class=\"dialog-content\" part=\"content\">\n          <h3 class=\"dialog-title\" part=\"title\">Confirm</h3>\n          <p class=\"dialog-message\" part=\"message\">Are you sure?</p>\n\n          <div class=\"dialog-buttons\" part=\"buttons\">\n            <button class=\"dialog-button cancel-button\" part=\"cancel-button\" type=\"button\">\n              Cancel\n            </button>\n            <button class=\"dialog-button confirm-button\" part=\"confirm-button\" type=\"button\">\n              OK\n            </button>\n          </div>\n        </div>\n      </dialog>\n    `;\n\n    this._nativeDialog = shadowRoot.querySelector('dialog');\n    const confirmButton = shadowRoot.querySelector('.confirm-button');\n    const cancelButton = shadowRoot.querySelector('.cancel-button');\n\n    // Set up event listeners\n    if (this._nativeDialog) {\n      this._nativeDialog.addEventListener('close', this.handleClose.bind(this));\n      this._nativeDialog.addEventListener(\n        'cancel',\n        this.handleCancel.bind(this)\n      );\n    }\n\n    if (confirmButton) {\n      confirmButton.addEventListener('click', () => this.confirm());\n    }\n\n    if (cancelButton) {\n      cancelButton.addEventListener('click', () => this.cancel());\n    }\n\n    // Apply initial theme\n    this.applyTheme(this._theme);\n    this.updateContent();\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('confirm-dialog');\n    }\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string | null,\n    newValue: string | null\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'title':\n      case 'message':\n      case 'confirm-text':\n      case 'cancel-text':\n        this.updateContent();\n        break;\n      case 'theme':\n        this._theme = (newValue as Theme) || 'auto';\n        this.applyTheme(this._theme);\n        break;\n      case 'danger':\n        // Styling handled by CSS attribute selector\n        break;\n    }\n  }\n\n  private updateContent(): void {\n    const titleElement = this.shadowRoot?.querySelector('.dialog-title');\n    const messageElement = this.shadowRoot?.querySelector('.dialog-message');\n    const confirmButton = this.shadowRoot?.querySelector('.confirm-button');\n    const cancelButton = this.shadowRoot?.querySelector('.cancel-button');\n\n    if (titleElement) {\n      titleElement.textContent = this.getAttribute('title') || 'Confirm';\n    }\n\n    if (messageElement) {\n      messageElement.textContent =\n        this.getAttribute('message') || 'Are you sure?';\n    }\n\n    if (confirmButton) {\n      confirmButton.textContent = this.getAttribute('confirm-text') || 'OK';\n    }\n\n    if (cancelButton) {\n      cancelButton.textContent = this.getAttribute('cancel-text') || 'Cancel';\n    }\n  }\n\n  private handleClose(): void {\n    // If dialog was closed without explicit confirm/cancel, treat as cancel\n    if (this._resolvePromise) {\n      this._resolvePromise(false);\n      this._resolvePromise = null;\n      this._rejectPromise = null;\n    }\n\n    dispatchCustomEvent(this, 'confirm-dialog-close', {\n      dialogId: this.id,\n      dialog: this,\n      confirmed: false,\n    });\n  }\n\n  private handleCancel(event: Event): void {\n    const cancelable = dispatchCustomEvent(this, 'confirm-dialog-cancel', {\n      dialogId: this.id,\n      dialog: this,\n    });\n\n    if (!cancelable) {\n      event.preventDefault();\n    } else {\n      this.cancel();\n    }\n  }\n\n  private confirm(): void {\n    if (this._resolvePromise) {\n      this._resolvePromise(true);\n      this._resolvePromise = null;\n      this._rejectPromise = null;\n    }\n\n    dispatchCustomEvent(this, 'confirm-dialog-confirm', {\n      dialogId: this.id,\n      dialog: this,\n      confirmed: true,\n    });\n\n    this._nativeDialog?.close('confirmed');\n  }\n\n  private cancel(): void {\n    if (this._resolvePromise) {\n      this._resolvePromise(false);\n      this._resolvePromise = null;\n      this._rejectPromise = null;\n    }\n\n    dispatchCustomEvent(this, 'confirm-dialog-cancel', {\n      dialogId: this.id,\n      dialog: this,\n      confirmed: false,\n    });\n\n    this._nativeDialog?.close('cancelled');\n  }\n\n  // Public API\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this.setAttribute('theme', value);\n  }\n\n  get title(): string {\n    return this.getAttribute('title') || 'Confirm';\n  }\n\n  set title(value: string) {\n    this.setAttribute('title', value);\n  }\n\n  get message(): string {\n    return this.getAttribute('message') || 'Are you sure?';\n  }\n\n  set message(value: string) {\n    this.setAttribute('message', value);\n  }\n\n  get confirmText(): string {\n    return this.getAttribute('confirm-text') || 'OK';\n  }\n\n  set confirmText(value: string) {\n    this.setAttribute('confirm-text', value);\n  }\n\n  get cancelText(): string {\n    return this.getAttribute('cancel-text') || 'Cancel';\n  }\n\n  set cancelText(value: string) {\n    this.setAttribute('cancel-text', value);\n  }\n\n  get danger(): boolean {\n    return this.hasAttribute('danger');\n  }\n\n  set danger(value: boolean) {\n    if (value) {\n      this.setAttribute('danger', '');\n    } else {\n      this.removeAttribute('danger');\n    }\n  }\n\n  get open(): boolean {\n    return this._nativeDialog?.open || false;\n  }\n\n  /**\n   * Show the confirmation dialog and return a promise that resolves to true/false\n   */\n  public show(): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      if (this._resolvePromise) {\n        // Already showing, reject the previous promise\n        this._rejectPromise?.(\n          new Error('Dialog was replaced by another show() call')\n        );\n      }\n\n      this._resolvePromise = resolve;\n      this._rejectPromise = reject;\n\n      dispatchCustomEvent(this, 'confirm-dialog-show', {\n        dialogId: this.id,\n        dialog: this,\n      });\n\n      this._nativeDialog?.showModal();\n    });\n  }\n\n  public applyTheme(theme: Theme): void {\n    this._theme = theme;\n    applyTheme(this, theme);\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-confirm')) {\n  customElements.define('e2-confirm', ConfirmDialogElement);\n}\n","/**\n * Dialog Element\n * A wrapper around the native <dialog> element with theming and enhanced functionality\n */\n\nimport { EditorElementProperties, Theme } from '../../types';\nimport {\n  applyTheme,\n  dispatchCustomEvent,\n  generateId,\n  getShadowRoot,\n} from '../../utils';\n\nexport class DialogElement\n  extends HTMLElement\n  implements EditorElementProperties\n{\n  private _theme: Theme = 'auto';\n  private _nativeDialog: HTMLDialogElement | null = null;\n\n  static get observedAttributes(): string[] {\n    return ['title', 'theme', 'modal', 'closable', 'width', 'height'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          --dialog-bg: #ffffff;\n          --dialog-border: #e0e0e0;\n          --dialog-shadow: rgba(0, 0, 0, 0.25);\n          --dialog-backdrop: rgba(0, 0, 0, 0.5);\n          --dialog-header-bg: #f8f9fa;\n          --dialog-header-border: #e0e0e0;\n          --text-color: #333333;\n          --close-button-hover: #f0f0f0;\n          --close-button-active: #e0e0e0;\n\n          display: block;\n        }\n\n        :host(.theme-dark) {\n          --dialog-bg: #2d2d2d;\n          --dialog-border: #555555;\n          --dialog-shadow: rgba(0, 0, 0, 0.5);\n          --dialog-backdrop: rgba(0, 0, 0, 0.7);\n          --dialog-header-bg: #404040;\n          --dialog-header-border: #555555;\n          --text-color: #ffffff;\n          --close-button-hover: #404040;\n          --close-button-active: #555555;\n        }\n\n        dialog {\n          border: 1px solid var(--dialog-border);\n          border-radius: 8px;\n          padding: 0;\n          background: var(--dialog-bg);\n          color: var(--text-color);\n          font-family: var(--font-family, system-ui, sans-serif);\n          font-size: var(--font-size, 14px);\n          box-shadow: 0 8px 24px var(--dialog-shadow);\n          min-width: 300px;\n          max-width: calc(100vw - 32px);\n          max-height: calc(100vh - 32px);\n          overflow: hidden;\n          animation: dialog-fade-in 0.2s ease-out;\n        }\n\n        dialog::backdrop {\n          background: var(--dialog-backdrop);\n          animation: backdrop-fade-in 0.2s ease-out;\n        }\n\n        @keyframes dialog-fade-in {\n          from {\n            opacity: 0;\n            transform: scale(0.9) translateY(-20px);\n          }\n          to {\n            opacity: 1;\n            transform: scale(1) translateY(0);\n          }\n        }\n\n        @keyframes backdrop-fade-in {\n          from { opacity: 0; }\n          to { opacity: 1; }\n        }\n\n        .dialog-header {\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          padding: 16px 20px;\n          background: var(--dialog-header-bg);\n          border-bottom: 1px solid var(--dialog-header-border);\n          min-height: 24px;\n        }\n\n        .dialog-title {\n          font-weight: 600;\n          font-size: 16px;\n          margin: 0;\n        }\n\n        .close-button {\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          width: 28px;\n          height: 28px;\n          border: none;\n          background: transparent;\n          border-radius: 4px;\n          cursor: pointer;\n          color: var(--text-color);\n          font-size: 18px;\n          transition: background-color 0.15s ease;\n        }\n\n        .close-button:hover {\n          background: var(--close-button-hover);\n        }\n\n        .close-button:active {\n          background: var(--close-button-active);\n        }\n\n        .close-button:disabled {\n          opacity: 0.5;\n          cursor: not-allowed;\n        }\n\n        .dialog-content {\n          padding: 20px;\n          overflow-y: auto;\n        }\n\n        .dialog-footer {\n          padding: 16px 20px;\n          border-top: 1px solid var(--dialog-header-border);\n          background: var(--dialog-header-bg);\n          display: flex;\n          justify-content: flex-end;\n          gap: 12px;\n        }\n\n        .dialog-footer:empty {\n          display: none;\n        }\n\n        :host([hidden]) {\n          display: none !important;\n        }\n      </style>\n\n      <dialog part=\"dialog\">\n        <div class=\"dialog-header\" part=\"header\">\n          <h3 class=\"dialog-title\" part=\"title\"></h3>\n          <button class=\"close-button\" part=\"close-button\" type=\"button\" aria-label=\"Close dialog\">\n            ×\n          </button>\n        </div>\n\n        <div class=\"dialog-content\" part=\"content\">\n          <slot></slot>\n        </div>\n\n        <div class=\"dialog-footer\" part=\"footer\">\n          <slot name=\"footer\"></slot>\n        </div>\n      </dialog>\n    `;\n\n    this._nativeDialog = shadowRoot.querySelector('dialog');\n    const closeButton = shadowRoot.querySelector('.close-button');\n\n    // Set up event listeners\n    if (this._nativeDialog) {\n      this._nativeDialog.addEventListener('close', this.handleClose.bind(this));\n      this._nativeDialog.addEventListener(\n        'cancel',\n        this.handleCancel.bind(this)\n      );\n    }\n\n    if (closeButton) {\n      closeButton.addEventListener('click', () => this.close());\n    }\n\n    // Apply initial theme\n    this.applyTheme(this._theme);\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('dialog');\n    }\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string | null,\n    newValue: string | null\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'title':\n        this.updateTitle();\n        break;\n      case 'theme':\n        this._theme = (newValue as Theme) || 'auto';\n        this.applyTheme(this._theme);\n        break;\n      case 'modal':\n        // Modal state affects how dialog opens\n        break;\n      case 'closable':\n        this.updateClosable();\n        break;\n      case 'width':\n        this.updateSize();\n        break;\n      case 'height':\n        this.updateSize();\n        break;\n    }\n  }\n\n  private updateTitle(): void {\n    const titleElement = this.shadowRoot?.querySelector('.dialog-title');\n    if (titleElement) {\n      titleElement.textContent = this.getAttribute('title') || '';\n    }\n  }\n\n  private updateClosable(): void {\n    const closeButton = this.shadowRoot?.querySelector(\n      '.close-button'\n    ) as HTMLButtonElement;\n    if (closeButton) {\n      const closable = this.getAttribute('closable') !== 'false';\n      closeButton.disabled = !closable;\n      closeButton.style.display = closable ? 'flex' : 'none';\n    }\n  }\n\n  private updateSize(): void {\n    if (this._nativeDialog) {\n      const width = this.getAttribute('width');\n      const height = this.getAttribute('height');\n\n      if (width) {\n        this._nativeDialog.style.width =\n          width.includes('px') || width.includes('%') || width.includes('em')\n            ? width\n            : `${width}px`;\n      }\n\n      if (height) {\n        this._nativeDialog.style.height =\n          height.includes('px') || height.includes('%') || height.includes('em')\n            ? height\n            : `${height}px`;\n      }\n    }\n  }\n\n  private handleClose(): void {\n    dispatchCustomEvent(this, 'dialog-close', {\n      dialogId: this.id,\n      dialog: this,\n      returnValue: this._nativeDialog?.returnValue,\n    });\n  }\n\n  private handleCancel(event: Event): void {\n    const cancelable = dispatchCustomEvent(this, 'dialog-cancel', {\n      dialogId: this.id,\n      dialog: this,\n    });\n\n    if (!cancelable) {\n      event.preventDefault();\n    }\n  }\n\n  // Public API\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this.setAttribute('theme', value);\n  }\n\n  get title(): string {\n    return this.getAttribute('title') || '';\n  }\n\n  set title(value: string) {\n    this.setAttribute('title', value);\n  }\n\n  get modal(): boolean {\n    return this.hasAttribute('modal');\n  }\n\n  set modal(value: boolean) {\n    if (value) {\n      this.setAttribute('modal', '');\n    } else {\n      this.removeAttribute('modal');\n    }\n  }\n\n  get closable(): boolean {\n    return this.getAttribute('closable') !== 'false';\n  }\n\n  set closable(value: boolean) {\n    this.setAttribute('closable', value.toString());\n  }\n\n  get open(): boolean {\n    return this._nativeDialog?.open || false;\n  }\n\n  get returnValue(): string {\n    return this._nativeDialog?.returnValue || '';\n  }\n\n  set returnValue(value: string) {\n    if (this._nativeDialog) {\n      this._nativeDialog.returnValue = value;\n    }\n  }\n\n  public show(): void {\n    if (!this._nativeDialog) return;\n\n    dispatchCustomEvent(this, 'dialog-show', {\n      dialogId: this.id,\n      dialog: this,\n    });\n\n    this._nativeDialog.show();\n  }\n\n  public showModal(): void {\n    if (!this._nativeDialog) return;\n\n    dispatchCustomEvent(this, 'dialog-show', {\n      dialogId: this.id,\n      dialog: this,\n      modal: true,\n    });\n\n    this._nativeDialog.showModal();\n  }\n\n  public close(returnValue?: string): void {\n    if (!this._nativeDialog) return;\n\n    if (returnValue !== undefined) {\n      this._nativeDialog.returnValue = returnValue;\n    }\n\n    this._nativeDialog.close();\n  }\n\n  public applyTheme(theme: Theme): void {\n    this._theme = theme;\n    applyTheme(this, theme);\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-dialog')) {\n  customElements.define('e2-dialog', DialogElement);\n}\n","/**\n * Prompt Dialog Element\n * A specialized dialog for text input with validation\n */\n\nimport { EditorElementProperties, Theme } from '../../types';\nimport {\n  applyTheme,\n  dispatchCustomEvent,\n  generateId,\n  getShadowRoot,\n} from '../../utils';\n\nexport class PromptDialogElement\n  extends HTMLElement\n  implements EditorElementProperties\n{\n  private _theme: Theme = 'auto';\n  private _nativeDialog: HTMLDialogElement | null = null;\n  private _resolvePromise: ((value: string | null) => void) | null = null;\n  private _rejectPromise: ((reason?: any) => void) | null = null;\n\n  static get observedAttributes(): string[] {\n    return [\n      'title',\n      'message',\n      'placeholder',\n      'default-value',\n      'confirm-text',\n      'cancel-text',\n      'theme',\n      'required',\n      'multiline',\n      'pattern',\n      'min-length',\n      'max-length',\n    ];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          --dialog-bg: #ffffff;\n          --dialog-border: #e0e0e0;\n          --dialog-shadow: rgba(0, 0, 0, 0.25);\n          --dialog-backdrop: rgba(0, 0, 0, 0.5);\n          --text-color: #333333;\n          --text-secondary: #666666;\n          --input-bg: #ffffff;\n          --input-border: #d0d7de;\n          --input-border-focus: #0969da;\n          --input-border-error: #d1242f;\n          --button-bg: #f8f9fa;\n          --button-border: #e0e0e0;\n          --button-hover: #e9ecef;\n          --button-active: #dee2e6;\n          --confirm-bg: #007bff;\n          --confirm-hover: #0056b3;\n          --confirm-active: #004085;\n          --error-color: #d1242f;\n\n          display: block;\n        }\n\n        :host(.theme-dark) {\n          --dialog-bg: #2d2d2d;\n          --dialog-border: #555555;\n          --dialog-shadow: rgba(0, 0, 0, 0.5);\n          --dialog-backdrop: rgba(0, 0, 0, 0.7);\n          --text-color: #ffffff;\n          --text-secondary: #cccccc;\n          --input-bg: #21262d;\n          --input-border: #30363d;\n          --input-border-focus: #0969da;\n          --input-border-error: #f85149;\n          --button-bg: #404040;\n          --button-border: #555555;\n          --button-hover: #4a4a4a;\n          --button-active: #555555;\n          --confirm-bg: #0d6efd;\n          --confirm-hover: #0b5ed7;\n          --confirm-active: #0a58ca;\n          --error-color: #f85149;\n        }\n\n        dialog {\n          border: 1px solid var(--dialog-border);\n          border-radius: 8px;\n          padding: 0;\n          background: var(--dialog-bg);\n          color: var(--text-color);\n          font-family: var(--font-family, system-ui, sans-serif);\n          font-size: var(--font-size, 14px);\n          box-shadow: 0 8px 24px var(--dialog-shadow);\n          min-width: 400px;\n          max-width: 600px;\n          animation: dialog-fade-in 0.2s ease-out;\n        }\n\n        dialog::backdrop {\n          background: var(--dialog-backdrop);\n          animation: backdrop-fade-in 0.2s ease-out;\n        }\n\n        @keyframes dialog-fade-in {\n          from {\n            opacity: 0;\n            transform: scale(0.9) translateY(-20px);\n          }\n          to {\n            opacity: 1;\n            transform: scale(1) translateY(0);\n          }\n        }\n\n        @keyframes backdrop-fade-in {\n          from { opacity: 0; }\n          to { opacity: 1; }\n        }\n\n        .dialog-content {\n          padding: 24px;\n        }\n\n        .dialog-title {\n          font-size: 18px;\n          font-weight: 600;\n          margin: 0 0 8px 0;\n          color: var(--text-color);\n        }\n\n        .dialog-message {\n          color: var(--text-secondary);\n          line-height: 1.5;\n          margin: 0 0 16px 0;\n        }\n\n        .dialog-message:empty {\n          display: none;\n        }\n\n        .input-group {\n          margin-bottom: 20px;\n        }\n\n        .dialog-input {\n          width: 100%;\n          padding: 8px 12px;\n          border: 1px solid var(--input-border);\n          border-radius: 4px;\n          background: var(--input-bg);\n          color: var(--text-color);\n          font-family: inherit;\n          font-size: 14px;\n          transition: border-color 0.15s ease;\n          box-sizing: border-box;\n        }\n\n        .dialog-input:focus {\n          outline: none;\n          border-color: var(--input-border-focus);\n          box-shadow: 0 0 0 2px rgba(9, 105, 218, 0.3);\n        }\n\n        .dialog-input.error {\n          border-color: var(--input-border-error);\n        }\n\n        .dialog-input.error:focus {\n          box-shadow: 0 0 0 2px rgba(209, 36, 47, 0.3);\n        }\n\n        .dialog-textarea {\n          min-height: 80px;\n          resize: vertical;\n          font-family: inherit;\n        }\n\n        .error-message {\n          color: var(--error-color);\n          font-size: 12px;\n          margin-top: 4px;\n          display: none;\n        }\n\n        .error-message.visible {\n          display: block;\n        }\n\n        .dialog-buttons {\n          display: flex;\n          justify-content: flex-end;\n          gap: 12px;\n        }\n\n        .dialog-button {\n          padding: 8px 16px;\n          border: 1px solid var(--button-border);\n          border-radius: 4px;\n          background: var(--button-bg);\n          color: var(--text-color);\n          font-family: inherit;\n          font-size: 14px;\n          cursor: pointer;\n          transition: all 0.15s ease;\n          min-width: 80px;\n        }\n\n        .dialog-button:hover {\n          background: var(--button-hover);\n        }\n\n        .dialog-button:active {\n          background: var(--button-active);\n        }\n\n        .dialog-button:focus {\n          outline: 2px solid var(--confirm-bg);\n          outline-offset: 2px;\n        }\n\n        .dialog-button:disabled {\n          opacity: 0.6;\n          cursor: not-allowed;\n        }\n\n        .confirm-button {\n          background: var(--confirm-bg);\n          color: white;\n          border-color: var(--confirm-bg);\n        }\n\n        .confirm-button:hover:not(:disabled) {\n          background: var(--confirm-hover);\n          border-color: var(--confirm-hover);\n        }\n\n        .confirm-button:active:not(:disabled) {\n          background: var(--confirm-active);\n          border-color: var(--confirm-active);\n        }\n\n        :host([hidden]) {\n          display: none !important;\n        }\n      </style>\n\n      <dialog part=\"dialog\">\n        <div class=\"dialog-content\" part=\"content\">\n          <h3 class=\"dialog-title\" part=\"title\">Input Required</h3>\n          <p class=\"dialog-message\" part=\"message\"></p>\n\n          <div class=\"input-group\" part=\"input-group\">\n            <input class=\"dialog-input\" part=\"input\" type=\"text\" />\n            <div class=\"error-message\" part=\"error-message\"></div>\n          </div>\n\n          <div class=\"dialog-buttons\" part=\"buttons\">\n            <button class=\"dialog-button cancel-button\" part=\"cancel-button\" type=\"button\">\n              Cancel\n            </button>\n            <button class=\"dialog-button confirm-button\" part=\"confirm-button\" type=\"button\">\n              OK\n            </button>\n          </div>\n        </div>\n      </dialog>\n    `;\n\n    this._nativeDialog = shadowRoot.querySelector('dialog');\n    const confirmButton = shadowRoot.querySelector('.confirm-button');\n    const cancelButton = shadowRoot.querySelector('.cancel-button');\n    const input = shadowRoot.querySelector('.dialog-input') as HTMLInputElement;\n\n    // Set up event listeners\n    if (this._nativeDialog) {\n      this._nativeDialog.addEventListener('close', this.handleClose.bind(this));\n      this._nativeDialog.addEventListener(\n        'cancel',\n        this.handleCancel.bind(this)\n      );\n    }\n\n    if (confirmButton) {\n      confirmButton.addEventListener('click', () => this.confirm());\n    }\n\n    if (cancelButton) {\n      cancelButton.addEventListener('click', () => this.cancel());\n    }\n\n    if (input) {\n      input.addEventListener('input', this.handleInput.bind(this));\n      input.addEventListener('keydown', this.handleKeydown.bind(this));\n    }\n\n    // Apply initial theme\n    this.applyTheme(this._theme);\n    this.updateContent();\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('prompt-dialog');\n    }\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string | null,\n    newValue: string | null\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'title':\n      case 'message':\n      case 'placeholder':\n      case 'default-value':\n      case 'confirm-text':\n      case 'cancel-text':\n      case 'required':\n      case 'multiline':\n      case 'pattern':\n      case 'min-length':\n      case 'max-length':\n        this.updateContent();\n        break;\n      case 'theme':\n        this._theme = (newValue as Theme) || 'auto';\n        this.applyTheme(this._theme);\n        break;\n    }\n  }\n\n  private updateContent(): void {\n    const titleElement = this.shadowRoot?.querySelector('.dialog-title');\n    const messageElement = this.shadowRoot?.querySelector('.dialog-message');\n    const confirmButton = this.shadowRoot?.querySelector('.confirm-button');\n    const cancelButton = this.shadowRoot?.querySelector('.cancel-button');\n    const inputElement = this.shadowRoot?.querySelector(\n      '.dialog-input'\n    ) as HTMLInputElement;\n\n    if (titleElement) {\n      titleElement.textContent = this.getAttribute('title') || 'Input Required';\n    }\n\n    if (messageElement) {\n      const message = this.getAttribute('message') || '';\n      messageElement.textContent = message;\n    }\n\n    if (confirmButton) {\n      confirmButton.textContent = this.getAttribute('confirm-text') || 'OK';\n    }\n\n    if (cancelButton) {\n      cancelButton.textContent = this.getAttribute('cancel-text') || 'Cancel';\n    }\n\n    if (inputElement) {\n      // Handle multiline\n      const multiline = this.hasAttribute('multiline');\n      const currentType = inputElement.tagName.toLowerCase();\n\n      if (multiline && currentType === 'input') {\n        // Replace input with textarea\n        const textarea = document.createElement('textarea');\n        textarea.className = 'dialog-input dialog-textarea';\n        textarea.setAttribute('part', 'input');\n        inputElement.parentNode?.replaceChild(textarea, inputElement);\n        this.setupInputElement(textarea);\n      } else if (!multiline && currentType === 'textarea') {\n        // Replace textarea with input\n        const input = document.createElement('input');\n        input.className = 'dialog-input';\n        input.setAttribute('part', 'input');\n        input.type = 'text';\n        inputElement.parentNode?.replaceChild(input, inputElement);\n        this.setupInputElement(input);\n      } else {\n        this.setupInputElement(inputElement);\n      }\n    }\n  }\n\n  private setupInputElement(\n    element: HTMLInputElement | HTMLTextAreaElement\n  ): void {\n    const placeholder = this.getAttribute('placeholder') || '';\n    const defaultValue = this.getAttribute('default-value') || '';\n    const pattern = this.getAttribute('pattern');\n    const minLength = this.getAttribute('min-length');\n    const maxLength = this.getAttribute('max-length');\n\n    element.placeholder = placeholder;\n    element.value = defaultValue;\n\n    if (pattern && element instanceof HTMLInputElement) {\n      element.pattern = pattern;\n    }\n\n    if (minLength) {\n      element.minLength = parseInt(minLength, 10);\n    }\n\n    if (maxLength) {\n      element.maxLength = parseInt(maxLength, 10);\n    }\n\n    // Re-attach event listeners\n    element.addEventListener('input', this.handleInput.bind(this));\n    element.addEventListener('keydown', (event: Event) =>\n      this.handleKeydown(event as KeyboardEvent)\n    );\n  }\n\n  private handleInput(): void {\n    this.validateInput();\n  }\n\n  private handleKeydown(event: KeyboardEvent): void {\n    if (\n      event.key === 'Enter' &&\n      !event.shiftKey &&\n      !this.hasAttribute('multiline')\n    ) {\n      event.preventDefault();\n      this.confirm();\n    } else if (event.key === 'Escape') {\n      event.preventDefault();\n      this.cancel();\n    }\n  }\n\n  private validateInput(): boolean {\n    const input = this.shadowRoot?.querySelector('.dialog-input') as\n      | HTMLInputElement\n      | HTMLTextAreaElement;\n    const errorMessage = this.shadowRoot?.querySelector('.error-message');\n    const confirmButton = this.shadowRoot?.querySelector(\n      '.confirm-button'\n    ) as HTMLButtonElement;\n\n    if (!input || !errorMessage || !confirmButton) return false;\n\n    let isValid = true;\n    let error = '';\n\n    const value = input.value;\n    const required = this.hasAttribute('required');\n    const pattern = this.getAttribute('pattern');\n    const minLength = this.getAttribute('min-length');\n    const maxLength = this.getAttribute('max-length');\n\n    // Required validation\n    if (required && !value.trim()) {\n      isValid = false;\n      error = 'This field is required';\n    }\n\n    // Pattern validation\n    if (isValid && pattern && value && !new RegExp(pattern).test(value)) {\n      isValid = false;\n      error = 'Invalid format';\n    }\n\n    // Length validation\n    if (isValid && minLength && value.length < parseInt(minLength, 10)) {\n      isValid = false;\n      error = `Minimum length is ${minLength} characters`;\n    }\n\n    if (isValid && maxLength && value.length > parseInt(maxLength, 10)) {\n      isValid = false;\n      error = `Maximum length is ${maxLength} characters`;\n    }\n\n    // Update UI\n    input.classList.toggle('error', !isValid);\n    errorMessage.textContent = error;\n    errorMessage.classList.toggle('visible', !isValid);\n    confirmButton.disabled = !isValid;\n\n    return isValid;\n  }\n\n  private handleClose(): void {\n    if (this._resolvePromise) {\n      this._resolvePromise(null);\n      this._resolvePromise = null;\n      this._rejectPromise = null;\n    }\n\n    dispatchCustomEvent(this, 'prompt-dialog-close', {\n      dialogId: this.id,\n      dialog: this,\n      value: null,\n    });\n  }\n\n  private handleCancel(event: Event): void {\n    const cancelable = dispatchCustomEvent(this, 'prompt-dialog-cancel', {\n      dialogId: this.id,\n      dialog: this,\n    });\n\n    if (!cancelable) {\n      event.preventDefault();\n    } else {\n      this.cancel();\n    }\n  }\n\n  private confirm(): void {\n    if (!this.validateInput()) return;\n\n    const input = this.shadowRoot?.querySelector('.dialog-input') as\n      | HTMLInputElement\n      | HTMLTextAreaElement;\n    const value = input?.value || '';\n\n    if (this._resolvePromise) {\n      this._resolvePromise(value);\n      this._resolvePromise = null;\n      this._rejectPromise = null;\n    }\n\n    dispatchCustomEvent(this, 'prompt-dialog-confirm', {\n      dialogId: this.id,\n      dialog: this,\n      value,\n    });\n\n    this._nativeDialog?.close(value);\n  }\n\n  private cancel(): void {\n    if (this._resolvePromise) {\n      this._resolvePromise(null);\n      this._resolvePromise = null;\n      this._rejectPromise = null;\n    }\n\n    dispatchCustomEvent(this, 'prompt-dialog-cancel', {\n      dialogId: this.id,\n      dialog: this,\n      value: null,\n    });\n\n    this._nativeDialog?.close();\n  }\n\n  // Public API\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this.setAttribute('theme', value);\n  }\n\n  get title(): string {\n    return this.getAttribute('title') || 'Input Required';\n  }\n\n  set title(value: string) {\n    this.setAttribute('title', value);\n  }\n\n  get message(): string {\n    return this.getAttribute('message') || '';\n  }\n\n  set message(value: string) {\n    this.setAttribute('message', value);\n  }\n\n  get placeholder(): string {\n    return this.getAttribute('placeholder') || '';\n  }\n\n  set placeholder(value: string) {\n    this.setAttribute('placeholder', value);\n  }\n\n  get defaultValue(): string {\n    return this.getAttribute('default-value') || '';\n  }\n\n  set defaultValue(value: string) {\n    this.setAttribute('default-value', value);\n  }\n\n  get confirmText(): string {\n    return this.getAttribute('confirm-text') || 'OK';\n  }\n\n  set confirmText(value: string) {\n    this.setAttribute('confirm-text', value);\n  }\n\n  get cancelText(): string {\n    return this.getAttribute('cancel-text') || 'Cancel';\n  }\n\n  set cancelText(value: string) {\n    this.setAttribute('cancel-text', value);\n  }\n\n  get required(): boolean {\n    return this.hasAttribute('required');\n  }\n\n  set required(value: boolean) {\n    if (value) {\n      this.setAttribute('required', '');\n    } else {\n      this.removeAttribute('required');\n    }\n  }\n\n  get multiline(): boolean {\n    return this.hasAttribute('multiline');\n  }\n\n  set multiline(value: boolean) {\n    if (value) {\n      this.setAttribute('multiline', '');\n    } else {\n      this.removeAttribute('multiline');\n    }\n  }\n\n  get value(): string {\n    const input = this.shadowRoot?.querySelector('.dialog-input') as\n      | HTMLInputElement\n      | HTMLTextAreaElement;\n    return input?.value || '';\n  }\n\n  set value(value: string) {\n    const input = this.shadowRoot?.querySelector('.dialog-input') as\n      | HTMLInputElement\n      | HTMLTextAreaElement;\n    if (input) {\n      input.value = value;\n      this.validateInput();\n    }\n  }\n\n  get open(): boolean {\n    return this._nativeDialog?.open || false;\n  }\n\n  /**\n   * Show the prompt dialog and return a promise that resolves to the input value or null if cancelled\n   */\n  public show(): Promise<string | null> {\n    return new Promise((resolve, reject) => {\n      if (this._resolvePromise) {\n        // Already showing, reject the previous promise\n        this._rejectPromise?.(\n          new Error('Dialog was replaced by another show() call')\n        );\n      }\n\n      this._resolvePromise = resolve;\n      this._rejectPromise = reject;\n\n      dispatchCustomEvent(this, 'prompt-dialog-show', {\n        dialogId: this.id,\n        dialog: this,\n      });\n\n      this._nativeDialog?.showModal();\n\n      // Focus the input after showing\n      setTimeout(() => {\n        const input = this.shadowRoot?.querySelector('.dialog-input') as\n          | HTMLInputElement\n          | HTMLTextAreaElement;\n        input?.focus();\n        input?.select();\n      }, 100);\n    });\n  }\n\n  public applyTheme(theme: Theme): void {\n    this._theme = theme;\n    applyTheme(this, theme);\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-prompt')) {\n  customElements.define('e2-prompt', PromptDialogElement);\n}\n","/**\n * Collapsible Panel Element\n * A panel that can be collapsed to a thin bar with an expand button\n * or expanded to show its full content\n */\n\nimport { EditorElementProperties, Theme } from '../../types';\nimport {\n  applyTheme,\n  dispatchCustomEvent,\n  generateId,\n  getShadowRoot,\n} from '../../utils';\n\nexport type PanelOrientation = 'horizontal' | 'vertical';\n\nexport class CollapsiblePanel\n  extends HTMLElement\n  implements EditorElementProperties\n{\n  private _theme: Theme = 'auto';\n  private _collapsed: boolean = false;\n  private _orientation: PanelOrientation = 'vertical';\n\n  static get observedAttributes(): string[] {\n    return ['theme', 'disabled', 'collapsed', 'orientation'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: block;\n          position: relative;\n          background: var(--panel-bg, #ffffff);\n          border: 1px solid var(--panel-border, #ccc);\n          font-family: var(--font-family, system-ui, sans-serif);\n          font-size: var(--font-size, 14px);\n          transition: all 0.3s ease;\n        }\n\n        :host(.theme-dark) {\n          background: var(--panel-bg-dark, #2d2d2d);\n          border-color: var(--panel-border-dark, #555);\n          color: var(--text-color-dark, #fff);\n        }\n\n        :host([disabled]) {\n          opacity: 0.6;\n          pointer-events: none;\n        }\n\n        /* Vertical orientation (default) */\n        :host([orientation=\"vertical\"]) {\n          min-height: 200px;\n        }\n\n        :host([orientation=\"vertical\"][collapsed]) {\n          min-height: 32px;\n          height: 32px;\n          overflow: hidden;\n        }\n\n        /* Horizontal orientation */\n        :host([orientation=\"horizontal\"]) {\n          min-width: 200px;\n          display: inline-block;\n          vertical-align: top;\n        }\n\n        :host([orientation=\"horizontal\"][collapsed]) {\n          min-width: 32px;\n          width: 32px;\n          overflow: hidden;\n        }\n\n        .panel-header {\n          display: flex;\n          align-items: center;\n          padding: 8px;\n          background: var(--panel-header-bg, #f8f8f8);\n          border-bottom: 1px solid var(--panel-border, #ccc);\n          min-height: 16px;\n          cursor: pointer;\n          user-select: none;\n        }\n\n        :host(.theme-dark) .panel-header {\n          background: var(--panel-header-bg-dark, #3a3a3a);\n          border-bottom-color: var(--panel-border-dark, #555);\n        }\n\n        .panel-header:hover {\n          background: var(--panel-header-hover-bg, #e8e8e8);\n        }\n\n        :host(.theme-dark) .panel-header:hover {\n          background: var(--panel-header-hover-bg-dark, #404040);\n        }\n\n        .toggle-button {\n          width: 16px;\n          height: 16px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          font-size: 12px;\n          margin-right: 8px;\n          flex-shrink: 0;\n        }\n\n        /* Vertical orientation icons */\n        :host([orientation=\"vertical\"]) .toggle-button .burger-icon {\n          display: none;\n        }\n\n        :host([orientation=\"vertical\"]) .toggle-button .close-icon {\n          display: block;\n        }\n\n        :host([orientation=\"vertical\"][collapsed]) .toggle-button .burger-icon {\n          display: block;\n        }\n\n        :host([orientation=\"vertical\"][collapsed]) .toggle-button .close-icon {\n          display: none;\n        }\n\n        /* Horizontal orientation icons */\n        :host([orientation=\"horizontal\"]) .toggle-button .burger-icon {\n          display: none;\n        }\n\n        :host([orientation=\"horizontal\"]) .toggle-button .close-icon {\n          display: block;\n        }\n\n        :host([orientation=\"horizontal\"][collapsed]) .toggle-button .burger-icon {\n          display: block;\n        }\n\n        :host([orientation=\"horizontal\"][collapsed]) .toggle-button .close-icon {\n          display: none;\n        }\n\n        /* Rotate icons for horizontal orientation */\n        :host([orientation=\"horizontal\"]) .toggle-button {\n          transform: rotate(90deg);\n        }\n\n        .panel-title {\n          flex-grow: 1;\n          font-weight: 500;\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n        }\n\n        /* Hide title when collapsed */\n        :host([collapsed]) .panel-title {\n          display: none;\n        }\n\n        .panel-content {\n          padding: 12px;\n          overflow: auto;\n        }\n\n        :host([collapsed]) .panel-content {\n          display: none;\n        }\n\n        /* Content slot styling */\n        ::slotted(*) {\n          display: block;\n        }\n      </style>\n\n      <div class=\"panel-header\">\n        <div class=\"toggle-button\">\n          <span class=\"burger-icon\">☰</span>\n          <span class=\"close-icon\">✕</span>\n        </div>\n        <div class=\"panel-title\">\n          <slot name=\"title\">Panel</slot>\n        </div>\n      </div>\n\n      <div class=\"panel-content\">\n        <slot></slot>\n      </div>\n    `;\n\n    // Add click handler for the header\n    const header = shadowRoot.querySelector('.panel-header') as HTMLElement;\n    header.addEventListener('click', this.handleToggle.bind(this));\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('collapsible-panel');\n    }\n    this.applyTheme(this._theme);\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string,\n    newValue: string\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'theme':\n        this.theme = newValue as Theme;\n        break;\n      case 'collapsed':\n        this._collapsed = newValue !== null;\n        break;\n      case 'orientation':\n        this._orientation = (newValue as PanelOrientation) || 'vertical';\n        break;\n    }\n  }\n\n  private handleToggle(): void {\n    this.collapsed = !this.collapsed;\n\n    // Dispatch toggle event\n    dispatchCustomEvent(this, 'collapsible-panel-toggle', {\n      panelId: this.id,\n      panel: this,\n      collapsed: this.collapsed,\n      orientation: this.orientation,\n    });\n  }\n\n  // Public API\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this._theme = value;\n    this.applyTheme(value);\n  }\n\n  get collapsed(): boolean {\n    return this._collapsed;\n  }\n\n  set collapsed(value: boolean) {\n    this._collapsed = value;\n    if (value) {\n      this.setAttribute('collapsed', '');\n    } else {\n      this.removeAttribute('collapsed');\n    }\n  }\n\n  get orientation(): PanelOrientation {\n    return this._orientation;\n  }\n\n  set orientation(value: PanelOrientation) {\n    this._orientation = value;\n    this.setAttribute('orientation', value);\n  }\n\n  toggle(): void {\n    this.collapsed = !this.collapsed;\n  }\n\n  expand(): void {\n    this.collapsed = false;\n  }\n\n  collapse(): void {\n    this.collapsed = true;\n  }\n\n  applyTheme(theme: Theme): void {\n    applyTheme(this, theme);\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-collapsible-panel')) {\n  customElements.define('e2-collapsible-panel', CollapsiblePanel);\n}\n","/**\n * Split Panel Element\n * A single panel within a split panel container that can be resized\n */\n\nimport { EditorElementProperties, Theme } from '../../types';\nimport { applyTheme, generateId, getShadowRoot } from '../../utils';\n\nexport class SplitPanel extends HTMLElement implements EditorElementProperties {\n  private _theme: Theme = 'auto';\n  private _size: number = 50; // percentage\n  private _minSize: number = 10; // percentage\n  private _maxSize: number = 90; // percentage\n  private _resizable: boolean = true;\n\n  static get observedAttributes(): string[] {\n    return ['theme', 'disabled', 'size', 'min-size', 'max-size', 'resizable'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: block;\n          position: relative;\n          background: var(--panel-bg, #ffffff);\n          border: 1px solid var(--panel-border, #e0e0e0);\n          font-family: var(--font-family, system-ui, sans-serif);\n          font-size: var(--font-size, 14px);\n          overflow: hidden;\n          box-sizing: border-box;\n        }\n\n        :host(.theme-dark) {\n          background: var(--panel-bg-dark, #2d2d2d);\n          border-color: var(--panel-border-dark, #555);\n          color: var(--text-color-dark, #fff);\n        }\n\n        :host([disabled]) {\n          opacity: 0.6;\n          pointer-events: none;\n        }\n\n        .panel-content {\n          width: 100%;\n          height: 100%;\n          overflow: auto;\n          box-sizing: border-box;\n          padding: var(--panel-padding, 8px);\n        }\n\n        /* Content slot styling */\n        ::slotted(*) {\n          display: block;\n        }\n      </style>\n\n      <div class=\"panel-content\">\n        <slot></slot>\n      </div>\n    `;\n\n    // Set up event listeners\n    this.addEventListener('resize', this.handleResize.bind(this));\n  }\n\n  connectedCallback(): void {\n    // Apply initial attribute values\n    this.applyTheme(this._theme);\n\n    // Generate ID if not provided\n    if (!this.id) {\n      this.id = generateId('split-panel');\n    }\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string | null,\n    newValue: string | null\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'theme':\n        this._theme = (newValue as Theme) || 'auto';\n        this.applyTheme(this._theme);\n        break;\n      case 'size':\n        this._size = parseFloat(newValue || '50');\n        this.updateSize();\n        break;\n      case 'min-size':\n        this._minSize = parseFloat(newValue || '10');\n        break;\n      case 'max-size':\n        this._maxSize = parseFloat(newValue || '90');\n        break;\n      case 'resizable':\n        this._resizable = newValue !== 'false';\n        break;\n      case 'disabled':\n        this.toggleAttribute('disabled', newValue !== null);\n        break;\n    }\n  }\n\n  private handleResize(): void {\n    // Handle resize events from the container\n    this.updateSize();\n  }\n\n  private updateSize(): void {\n    // The container will handle the actual sizing via CSS\n    // This method can be used for cleanup or notifications\n  }\n\n  // Public API\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this.setAttribute('theme', value);\n  }\n\n  get size(): number {\n    return this._size;\n  }\n\n  set size(value: number) {\n    this.setAttribute('size', value.toString());\n  }\n\n  get minSize(): number {\n    return this._minSize;\n  }\n\n  set minSize(value: number) {\n    this.setAttribute('min-size', value.toString());\n  }\n\n  get maxSize(): number {\n    return this._maxSize;\n  }\n\n  set maxSize(value: number) {\n    this.setAttribute('max-size', value.toString());\n  }\n\n  get resizable(): boolean {\n    return this._resizable;\n  }\n\n  set resizable(value: boolean) {\n    this.setAttribute('resizable', value.toString());\n  }\n\n  get disabled(): boolean {\n    return this.hasAttribute('disabled');\n  }\n\n  set disabled(value: boolean) {\n    this.toggleAttribute('disabled', value);\n  }\n\n  applyTheme(theme: Theme): void {\n    applyTheme(this, theme);\n  }\n\n  // Utility method to get the current computed size\n  getCurrentSize(): number {\n    const container = this.parentElement;\n    if (!container) return this._size;\n\n    const isVertical = container.getAttribute('orientation') === 'vertical';\n\n    if (isVertical) {\n      const containerHeight = container.clientHeight;\n      const thisHeight = this.clientHeight;\n      return (thisHeight / containerHeight) * 100;\n    } else {\n      const containerWidth = container.clientWidth;\n      const thisWidth = this.clientWidth;\n      return (thisWidth / containerWidth) * 100;\n    }\n  }\n}\n\n// Register the element\nif (!customElements.get('e2-split-panel')) {\n  customElements.define('e2-split-panel', SplitPanel);\n}\n\nexport default SplitPanel;\n","/**\n * Split Panel Container Element\n * A container that manages multiple resizable split panels with drag handles\n */\n\nimport {\n  EditorElementProperties,\n  SplitPanelOrientation,\n  SplitPanelResizeEndEvent,\n  SplitPanelResizeEvent,\n  SplitPanelResizeStartEvent,\n  Theme,\n} from '../../types';\nimport {\n  applyTheme,\n  debounce,\n  dispatchCustomEvent,\n  generateId,\n  getShadowRoot,\n} from '../../utils';\n\nexport class SplitPanelContainer\n  extends HTMLElement\n  implements EditorElementProperties\n{\n  private _theme: Theme = 'auto';\n  private _orientation: SplitPanelOrientation = 'horizontal';\n  private _resizing: boolean = false;\n  private _activePanel: HTMLElement | null = null;\n  private _startPosition: number = 0;\n  private _startSize: number = 0;\n  private _nextPanelStartSize: number = 0;\n  private _updatingPanelSizes: boolean = false;\n\n  private debouncedResize = debounce(this.handleResize.bind(this), 16);\n\n  static get observedAttributes(): string[] {\n    return ['theme', 'disabled', 'orientation'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n    this.bindEvents();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: flex;\n          position: relative;\n          width: 100%;\n          height: 100%;\n          min-height: 200px;\n          background: var(--container-bg, #f5f5f5);\n          font-family: var(--font-family, system-ui, sans-serif);\n          overflow: hidden;\n          box-sizing: border-box;\n        }\n\n        :host(.theme-dark) {\n          background: var(--container-bg-dark, #1e1e1e);\n        }\n\n        :host([disabled]) {\n          opacity: 0.6;\n          pointer-events: none;\n        }\n\n        /* Horizontal layout (side by side) */\n        :host([orientation=\"horizontal\"]) {\n          flex-direction: row;\n        }\n\n        /* Vertical layout (stacked) */\n        :host([orientation=\"vertical\"]) {\n          flex-direction: column;\n        }\n\n        /* Panel styling */\n        ::slotted(e2-split-panel) {\n          flex-shrink: 0;\n          overflow: hidden;\n          position: relative;\n        }\n\n        /* Add spacing for handles and visual separators */\n        ::slotted(e2-split-panel:not(:last-child)) {\n          border-right: var(--handle-size, 4px) solid var(--handle-bg, #ccc);\n        }\n\n        :host([orientation=\"vertical\"]) ::slotted(e2-split-panel:not(:last-child)) {\n          border-right: none;\n          border-bottom: var(--handle-size, 4px) solid var(--handle-bg, #ccc);\n        }\n\n        :host(.theme-dark) ::slotted(e2-split-panel:not(:last-child)) {\n          border-right-color: var(--handle-bg-dark, #555);\n        }\n\n        :host([orientation=\"vertical\"].theme-dark) ::slotted(e2-split-panel:not(:last-child)) {\n          border-bottom-color: var(--handle-bg-dark, #555);\n        }\n\n        /* No user selection during drag */\n        :host(.dragging) {\n          user-select: none;\n        }\n\n        :host(.dragging) ::slotted(*) {\n          user-select: none;\n          pointer-events: none;\n        }\n      </style>\n\n      <slot></slot>\n    `;\n  }\n\n  private bindEvents(): void {\n    // Handle mouse events for resizing\n    this.addEventListener('mousedown', this.handleMouseDown.bind(this));\n    this.addEventListener('mousemove', this.handleMouseMove.bind(this));\n    this.addEventListener('mouseup', this.handleMouseUp.bind(this));\n    this.addEventListener('mouseleave', this.handleMouseLeave.bind(this));\n\n    // Handle window resize\n    window.addEventListener('resize', this.debouncedResize);\n\n    // Don't listen to slotchange to avoid infinite loops\n    // Instead, we'll rely on the initial setup and manual updates\n  }\n\n  connectedCallback(): void {\n    // Apply initial attribute values\n    this.applyTheme(this._theme);\n\n    // Generate ID if not provided\n    if (!this.id) {\n      this.id = generateId('split-panel-container');\n    }\n\n    // Initial setup\n    setTimeout(() => {\n      this.updateHandles();\n      this.updatePanelSizes();\n    }, 0);\n  }\n\n  disconnectedCallback(): void {\n    window.removeEventListener('resize', this.debouncedResize);\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string | null,\n    newValue: string | null\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'theme':\n        this._theme = (newValue as Theme) || 'auto';\n        this.applyTheme(this._theme);\n        break;\n      case 'orientation':\n        this._orientation = (newValue as SplitPanelOrientation) || 'horizontal';\n        this.updateHandles();\n        this.updatePanelSizes();\n        break;\n      case 'disabled':\n        this.toggleAttribute('disabled', newValue !== null);\n        break;\n    }\n  }\n\n  private updateHandles(): void {\n    // Do nothing - we're using CSS borders as visual handles\n    // and mouse event delegation for interaction\n  }\n\n  private updatePanelSizes(): void {\n    // Prevent infinite recursion\n    if (this._updatingPanelSizes) return;\n    this._updatingPanelSizes = true;\n\n    try {\n      const panels = this.getPanels();\n      if (panels.length === 0) return;\n\n      // Calculate total available space\n      const containerRect = this.getBoundingClientRect();\n      const handleSize = parseInt(\n        getComputedStyle(this).getPropertyValue('--handle-size') || '4'\n      );\n      const totalHandles = panels.length - 1;\n      const totalHandleSpace = totalHandles * handleSize;\n\n      const availableSpace =\n        this._orientation === 'horizontal'\n          ? containerRect.width - totalHandleSpace\n          : containerRect.height - totalHandleSpace;\n\n      // Calculate default sizes if not set\n      let totalSetSize = 0;\n      let unsetPanels = 0;\n\n      panels.forEach(panel => {\n        const size = parseFloat(panel.getAttribute('size') || '0');\n        if (size > 0) {\n          totalSetSize += size;\n        } else {\n          unsetPanels++;\n        }\n      });\n\n      const remainingPercentage = Math.max(0, 100 - totalSetSize);\n      const defaultSize =\n        unsetPanels > 0 ? remainingPercentage / unsetPanels : 0;\n\n      // Apply sizes\n      panels.forEach(panel => {\n        let size = parseFloat(panel.getAttribute('size') || '0');\n        if (size <= 0) {\n          size = defaultSize;\n          // Only set attribute if it's actually different to avoid recursive calls\n          const currentSize = panel.getAttribute('size');\n          if (currentSize !== size.toString()) {\n            panel.setAttribute('size', size.toString());\n          }\n        }\n\n        const actualSize = (size / 100) * availableSpace;\n\n        if (this._orientation === 'horizontal') {\n          panel.style.width = `${actualSize}px`;\n          panel.style.height = '100%';\n          panel.style.flexBasis = `${actualSize}px`;\n        } else {\n          panel.style.height = `${actualSize}px`;\n          panel.style.width = '100%';\n          panel.style.flexBasis = `${actualSize}px`;\n        }\n      });\n    } finally {\n      this._updatingPanelSizes = false;\n    }\n  }\n\n  private handleMouseDown(event: MouseEvent): void {\n    const panels = this.getPanels();\n    if (panels.length < 2) return;\n\n    // Find which panel border we're on\n    let panelIndex = -1;\n    let currentPanel: HTMLElement | null = null;\n    let nextPanel: HTMLElement | null = null;\n\n    const handleSize = parseInt(\n      getComputedStyle(this).getPropertyValue('--handle-size') || '4'\n    );\n\n    for (let i = 0; i < panels.length - 1; i++) {\n      const panel = panels[i];\n      const rect = panel.getBoundingClientRect();\n      const containerRect = this.getBoundingClientRect();\n\n      const relativeX = event.clientX - containerRect.left;\n      const relativeY = event.clientY - containerRect.top;\n\n      let onBorder = false;\n\n      if (this._orientation === 'horizontal') {\n        // Check if we're on the right border of this panel (border is part of the panel)\n        const borderStart = rect.right - containerRect.left - handleSize;\n        const borderEnd = rect.right - containerRect.left;\n        onBorder = relativeX >= borderStart && relativeX <= borderEnd;\n      } else {\n        // Check if we're on the bottom border of this panel (border is part of the panel)\n        const borderStart = rect.bottom - containerRect.top - handleSize;\n        const borderEnd = rect.bottom - containerRect.top;\n        onBorder = relativeY >= borderStart && relativeY <= borderEnd;\n      }\n\n      if (onBorder) {\n        panelIndex = i;\n        currentPanel = panels[i];\n        nextPanel = panels[i + 1];\n        break;\n      }\n    }\n\n    if (panelIndex === -1 || !currentPanel || !nextPanel) return;\n\n    event.preventDefault();\n\n    this._resizing = true;\n    this._activePanel = currentPanel;\n    this._startPosition =\n      this._orientation === 'horizontal' ? event.clientX : event.clientY;\n    this._startSize = parseFloat(currentPanel.getAttribute('size') || '50');\n    this._nextPanelStartSize = parseFloat(\n      nextPanel.getAttribute('size') || '50'\n    );\n\n    this.classList.add('dragging');\n\n    // Update cursor\n    this.style.cursor =\n      this._orientation === 'horizontal' ? 'col-resize' : 'row-resize';\n\n    // Dispatch resize start event\n    dispatchCustomEvent<SplitPanelResizeStartEvent['detail']>(\n      this,\n      'split-panel-resize-start',\n      {\n        containerId: this.id,\n        container: this,\n        panelId: currentPanel.id,\n        panel: currentPanel,\n        startSize: this._startSize,\n      }\n    );\n  }\n\n  private handleMouseMove(event: MouseEvent): void {\n    // Handle dragging if currently resizing\n    if (this._resizing && this._activePanel) {\n      event.preventDefault();\n\n      const currentPosition =\n        this._orientation === 'horizontal' ? event.clientX : event.clientY;\n      const delta = currentPosition - this._startPosition;\n\n      const containerRect = this.getBoundingClientRect();\n      const containerSize =\n        this._orientation === 'horizontal'\n          ? containerRect.width\n          : containerRect.height;\n\n      const deltaPercentage = (delta / containerSize) * 100;\n\n      const panels = this.getPanels();\n      const currentIndex = panels.indexOf(this._activePanel);\n      const nextPanel = panels[currentIndex + 1];\n\n      if (!nextPanel) return;\n\n      const newCurrentSize = Math.max(\n        parseFloat(this._activePanel.getAttribute('min-size') || '10'),\n        Math.min(\n          parseFloat(this._activePanel.getAttribute('max-size') || '90'),\n          this._startSize + deltaPercentage\n        )\n      );\n\n      const newNextSize = Math.max(\n        parseFloat(nextPanel.getAttribute('min-size') || '10'),\n        Math.min(\n          parseFloat(nextPanel.getAttribute('max-size') || '90'),\n          this._nextPanelStartSize - deltaPercentage\n        )\n      );\n\n      // Update panel sizes\n      this._activePanel.setAttribute('size', newCurrentSize.toString());\n      nextPanel.setAttribute('size', newNextSize.toString());\n\n      this.updatePanelSizes();\n\n      // Dispatch resize event\n      dispatchCustomEvent<SplitPanelResizeEvent['detail']>(\n        this,\n        'split-panel-resize',\n        {\n          containerId: this.id,\n          container: this,\n          panelId: this._activePanel.id,\n          panel: this._activePanel,\n          size: newCurrentSize,\n          minSize: parseFloat(\n            this._activePanel.getAttribute('min-size') || '10'\n          ),\n          maxSize: parseFloat(\n            this._activePanel.getAttribute('max-size') || '90'\n          ),\n        }\n      );\n    } else {\n      // Handle hover cursor when not dragging\n      this.updateHoverCursor(event);\n    }\n  }\n\n  private updateHoverCursor(event: MouseEvent): void {\n    const panels = this.getPanels();\n    if (panels.length < 2) {\n      this.style.cursor = '';\n      return;\n    }\n\n    const handleSize = parseInt(\n      getComputedStyle(this).getPropertyValue('--handle-size') || '4'\n    );\n\n    let overHandle = false;\n\n    for (let i = 0; i < panels.length - 1; i++) {\n      const panel = panels[i];\n      const rect = panel.getBoundingClientRect();\n      const containerRect = this.getBoundingClientRect();\n\n      const relativeX = event.clientX - containerRect.left;\n      const relativeY = event.clientY - containerRect.top;\n\n      if (this._orientation === 'horizontal') {\n        // Check if we're on the right border of this panel (border is part of the panel)\n        const borderStart = rect.right - containerRect.left - handleSize;\n        const borderEnd = rect.right - containerRect.left;\n        if (relativeX >= borderStart && relativeX <= borderEnd) {\n          overHandle = true;\n          break;\n        }\n      } else {\n        // Check if we're on the bottom border of this panel (border is part of the panel)\n        const borderStart = rect.bottom - containerRect.top - handleSize;\n        const borderEnd = rect.bottom - containerRect.top;\n        if (relativeY >= borderStart && relativeY <= borderEnd) {\n          overHandle = true;\n          break;\n        }\n      }\n    }\n\n    // Update cursor based on whether we're over a handle\n    if (overHandle) {\n      this.style.cursor =\n        this._orientation === 'horizontal' ? 'col-resize' : 'row-resize';\n    } else {\n      this.style.cursor = '';\n    }\n  }\n\n  private handleMouseUp(event: MouseEvent): void {\n    if (!this._resizing) return;\n\n    event.preventDefault();\n\n    const finalSize = this._activePanel\n      ? parseFloat(this._activePanel.getAttribute('size') || '50')\n      : 0;\n\n    // Dispatch resize end event\n    if (this._activePanel) {\n      dispatchCustomEvent<SplitPanelResizeEndEvent['detail']>(\n        this,\n        'split-panel-resize-end',\n        {\n          containerId: this.id,\n          container: this,\n          panelId: this._activePanel.id,\n          panel: this._activePanel,\n          finalSize,\n        }\n      );\n    }\n\n    this._resizing = false;\n    this._activePanel = null;\n    this.classList.remove('dragging');\n\n    // Update cursor based on current hover position\n    this.updateHoverCursor(event);\n  }\n\n  private handleMouseLeave(event: MouseEvent): void {\n    // End resizing if mouse leaves the container\n    if (this._resizing) {\n      this.handleMouseUp(event);\n    }\n\n    // Reset cursor when leaving the container\n    this.style.cursor = '';\n  }\n\n  private handleResize(): void {\n    this.updatePanelSizes();\n  }\n\n  private getPanels(): HTMLElement[] {\n    return Array.from(this.querySelectorAll('e2-split-panel'));\n  }\n\n  // Public API\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this.setAttribute('theme', value);\n  }\n\n  get orientation(): SplitPanelOrientation {\n    return this._orientation;\n  }\n\n  set orientation(value: SplitPanelOrientation) {\n    this.setAttribute('orientation', value);\n  }\n\n  get disabled(): boolean {\n    return this.hasAttribute('disabled');\n  }\n\n  set disabled(value: boolean) {\n    this.toggleAttribute('disabled', value);\n  }\n\n  applyTheme(theme: Theme): void {\n    applyTheme(this, theme);\n  }\n\n  // Method to programmatically resize a panel\n  resizePanel(panelId: string, size: number): void {\n    const panel = this.querySelector(`#${panelId}`) as HTMLElement;\n    if (panel && panel.tagName.toLowerCase() === 'e2-split-panel') {\n      panel.setAttribute('size', size.toString());\n      this.updatePanelSizes();\n    }\n  }\n\n  // Method to get panel sizes\n  getPanelSizes(): { [panelId: string]: number } {\n    const panels = this.getPanels();\n    const sizes: { [panelId: string]: number } = {};\n\n    panels.forEach(panel => {\n      if (panel.id) {\n        sizes[panel.id] = parseFloat(panel.getAttribute('size') || '0');\n      }\n    });\n\n    return sizes;\n  }\n\n  // Method to reset all panels to equal sizes\n  resetPanelSizes(): void {\n    const panels = this.getPanels();\n    const equalSize = 100 / panels.length;\n\n    panels.forEach(panel => {\n      panel.setAttribute('size', equalSize.toString());\n    });\n\n    this.updatePanelSizes();\n  }\n}\n\n// Register the element\nif (!customElements.get('e2-split-panel-container')) {\n  customElements.define('e2-split-panel-container', SplitPanelContainer);\n}\n\nexport default SplitPanelContainer;\n","/**\n * Tab Element\n * Individual tab that can be clicked to show associated content\n */\n\nimport { EditorElementProperties, Theme } from '../../types';\nimport {\n  applyTheme,\n  dispatchCustomEvent,\n  generateId,\n  getShadowRoot,\n} from '../../utils';\n\nexport class Tab extends HTMLElement implements EditorElementProperties {\n  private _theme: Theme = 'auto';\n  private _active: boolean = false;\n  private _closable: boolean = false;\n  private _icon: string = '';\n  private _label: string = '';\n\n  static get observedAttributes(): string[] {\n    return [\n      'theme',\n      'disabled',\n      'active',\n      'closable',\n      'icon',\n      'label',\n      'panel',\n    ];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n    this.setupEventListeners();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: flex;\n          align-items: center;\n          padding: 8px 12px;\n          background: var(--tab-bg, #f8f8f8);\n          border: 1px solid var(--tab-border, #ddd);\n          border-bottom: none;\n          cursor: pointer;\n          user-select: none;\n          font-family: var(--font-family, system-ui, sans-serif);\n          font-size: var(--font-size, 14px);\n          color: var(--tab-color, #333);\n          min-width: 0;\n          position: relative;\n          transition: background-color 0.2s ease, color 0.2s ease;\n        }\n\n        :host(:hover) {\n          background: var(--tab-bg-hover, #e8e8e8);\n        }\n\n        :host([active]) {\n          background: var(--tab-bg-active, #ffffff);\n          color: var(--tab-color-active, #000);\n          border-bottom: 1px solid var(--tab-bg-active, #ffffff);\n          z-index: 1;\n        }\n\n        :host(.theme-dark) {\n          background: var(--tab-bg-dark, #2d2d2d);\n          border-color: var(--tab-border-dark, #555);\n          color: var(--tab-color-dark, #ccc);\n        }\n\n        :host(.theme-dark:hover) {\n          background: var(--tab-bg-hover-dark, #3d3d3d);\n        }\n\n        :host(.theme-dark[active]) {\n          background: var(--tab-bg-active-dark, #1e1e1e);\n          color: var(--tab-color-active-dark, #fff);\n          border-bottom-color: var(--tab-bg-active-dark, #1e1e1e);\n        }\n\n        :host([disabled]) {\n          opacity: 0.6;\n          cursor: not-allowed;\n          pointer-events: none;\n        }\n\n        /* Tab position adjustments for container orientation */\n        :host-context(e2-tab-container[tab-position=\"bottom\"]) {\n          border-top: none;\n          border-bottom: 1px solid var(--tab-border, #ddd);\n        }\n\n        :host-context(e2-tab-container[tab-position=\"bottom\"][active]) {\n          border-top: 1px solid var(--tab-bg-active, #ffffff);\n          border-bottom-color: var(--tab-bg-active, #ffffff);\n        }\n\n        :host-context(e2-tab-container.theme-dark[tab-position=\"bottom\"]) {\n          border-bottom-color: var(--tab-border-dark, #555);\n        }\n\n        :host-context(e2-tab-container.theme-dark[tab-position=\"bottom\"][active]) {\n          border-top-color: var(--tab-bg-active-dark, #1e1e1e);\n          border-bottom-color: var(--tab-bg-active-dark, #1e1e1e);\n        }\n\n        :host-context(e2-tab-container[tab-position=\"left\"]),\n        :host-context(e2-tab-container[tab-position=\"right\"]) {\n          border-bottom: 1px solid var(--tab-border, #ddd);\n          border-right: none;\n          width: 100%;\n        }\n\n        :host-context(e2-tab-container[tab-position=\"left\"][active]) {\n          border-right: 1px solid var(--tab-bg-active, #ffffff);\n        }\n\n        :host-context(e2-tab-container[tab-position=\"right\"]) {\n          border-left: none;\n          border-right: 1px solid var(--tab-border, #ddd);\n        }\n\n        :host-context(e2-tab-container[tab-position=\"right\"][active]) {\n          border-left: 1px solid var(--tab-bg-active, #ffffff);\n          border-right-color: var(--tab-bg-active, #ffffff);\n        }\n\n        .tab-content {\n          display: flex;\n          align-items: center;\n          gap: 6px;\n          min-width: 0;\n          flex: 1;\n        }\n\n        .tab-icon {\n          flex-shrink: 0;\n          font-size: 16px;\n          width: 16px;\n          height: 16px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n        }\n\n        .tab-label {\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n          flex: 1;\n          min-width: 0;\n        }\n\n        .close-button {\n          flex-shrink: 0;\n          width: 16px;\n          height: 16px;\n          border: none;\n          background: transparent;\n          cursor: pointer;\n          border-radius: 2px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          margin-left: 4px;\n          font-size: 12px;\n          color: var(--tab-close-color, #666);\n          opacity: 0.7;\n          transition: opacity 0.2s ease, background-color 0.2s ease;\n        }\n\n        .close-button:hover {\n          opacity: 1;\n          background: var(--tab-close-bg-hover, rgba(0, 0, 0, 0.1));\n        }\n\n        :host(.theme-dark) .close-button {\n          color: var(--tab-close-color-dark, #aaa);\n        }\n\n        :host(.theme-dark) .close-button:hover {\n          background: var(--tab-close-bg-hover-dark, rgba(255, 255, 255, 0.1));\n        }\n\n        :host(:not([closable])) .close-button {\n          display: none;\n        }\n      </style>\n\n      <div class=\"tab-content\">\n        <span class=\"tab-icon\"></span>\n        <span class=\"tab-label\"></span>\n        <button class=\"close-button\" type=\"button\">&times;</button>\n      </div>\n    `;\n  }\n\n  private setupEventListeners(): void {\n    this.addEventListener('click', this.handleClick.bind(this));\n\n    const closeButton = this.shadowRoot?.querySelector(\n      '.close-button'\n    ) as HTMLButtonElement;\n    closeButton?.addEventListener('click', this.handleCloseClick.bind(this));\n  }\n\n  private handleClick(event: MouseEvent): void {\n    if (this.disabled) return;\n\n    // Don't trigger tab click if close button was clicked\n    if ((event.target as HTMLElement).classList.contains('close-button')) {\n      return;\n    }\n\n    event.stopPropagation();\n\n    dispatchCustomEvent(this, 'tab-click', {\n      tabId: this.id,\n      tab: this,\n      panelId: this.getAttribute('panel') || `${this.id}-panel`,\n    });\n  }\n\n  private handleCloseClick(event: MouseEvent): void {\n    if (this.disabled) return;\n\n    event.stopPropagation();\n\n    dispatchCustomEvent(this, 'tab-close', {\n      tabId: this.id,\n      tab: this,\n      panelId: this.getAttribute('panel') || `${this.id}-panel`,\n    });\n\n    // The parent container will handle the removal\n  }\n\n  private updateContent(): void {\n    const shadowRoot = this.shadowRoot!;\n    const iconElement = shadowRoot.querySelector('.tab-icon') as HTMLElement;\n    const labelElement = shadowRoot.querySelector('.tab-label') as HTMLElement;\n\n    // Update icon\n    if (this._icon) {\n      iconElement.textContent = this._icon;\n      iconElement.style.display = 'flex';\n    } else {\n      iconElement.style.display = 'none';\n    }\n\n    // Update label\n    labelElement.textContent = this._label || this.textContent || '';\n  }\n\n  // Public API\n  public click(): void {\n    if (!this.disabled) {\n      this.handleClick(new MouseEvent('click'));\n    }\n  }\n\n  public close(): void {\n    if (!this.disabled && this._closable) {\n      this.handleCloseClick(new MouseEvent('click'));\n    }\n  }\n\n  // Properties\n  public get theme(): Theme {\n    return this._theme;\n  }\n\n  public set theme(value: Theme) {\n    this._theme = value;\n    this.setAttribute('theme', value);\n    this.applyTheme(value);\n  }\n\n  public get active(): boolean {\n    return this._active;\n  }\n\n  public set active(value: boolean) {\n    this._active = value;\n    if (value) {\n      this.setAttribute('active', '');\n    } else {\n      this.removeAttribute('active');\n    }\n  }\n\n  public get closable(): boolean {\n    return this._closable;\n  }\n\n  public set closable(value: boolean) {\n    this._closable = value;\n    if (value) {\n      this.setAttribute('closable', '');\n    } else {\n      this.removeAttribute('closable');\n    }\n  }\n\n  public get icon(): string {\n    return this._icon;\n  }\n\n  public set icon(value: string) {\n    this._icon = value;\n    this.setAttribute('icon', value);\n    this.updateContent();\n  }\n\n  public get label(): string {\n    return this._label;\n  }\n\n  public set label(value: string) {\n    this._label = value;\n    this.setAttribute('label', value);\n    this.updateContent();\n  }\n\n  public get panel(): string | null {\n    return this.getAttribute('panel');\n  }\n\n  public set panel(value: string | null) {\n    if (value) {\n      this.setAttribute('panel', value);\n    } else {\n      this.removeAttribute('panel');\n    }\n  }\n\n  public get disabled(): boolean {\n    return this.hasAttribute('disabled');\n  }\n\n  public set disabled(value: boolean) {\n    if (value) {\n      this.setAttribute('disabled', '');\n    } else {\n      this.removeAttribute('disabled');\n    }\n  }\n\n  public applyTheme(theme: Theme): void {\n    applyTheme(this, theme);\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string | null,\n    newValue: string | null\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'theme':\n        this._theme = (newValue as Theme) || 'auto';\n        this.applyTheme(this._theme);\n        break;\n      case 'active':\n        this._active = newValue !== null;\n        break;\n      case 'closable':\n        this._closable = newValue !== null;\n        break;\n      case 'icon':\n        this._icon = newValue || '';\n        this.updateContent();\n        break;\n      case 'label':\n        this._label = newValue || '';\n        this.updateContent();\n        break;\n    }\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('tab');\n    }\n    this.applyTheme(this._theme);\n    this.updateContent();\n\n    // Handle pending setup from dynamic creation\n    if ((this as any)._pendingSetup) {\n      const setup = (this as any)._pendingSetup;\n\n      // Set attributes safely now that element is connected\n      if (setup.slot) {\n        this.setAttribute('slot', setup.slot);\n      }\n      if (setup.panel) {\n        this.setAttribute('panel', setup.panel);\n      }\n      if (setup.label) {\n        this.label = setup.label;\n      }\n      if (setup.closable) {\n        this.closable = setup.closable;\n      }\n      if (setup.theme) {\n        this.applyTheme(setup.theme);\n      }\n\n      // Clean up\n      delete (this as any)._pendingSetup;\n    }\n\n    // Update content when connected\n    this.updateContent();\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-tab')) {\n  customElements.define('e2-tab', Tab);\n}\n","/**\n * Tab Container Element\n * A container that manages tabs and their associated panels\n */\n\nimport {\n  EditorElementProperties,\n  TabCloseEvent,\n  TabContainerChangeEvent,\n  TabSelectEvent,\n  Theme,\n} from '../../types';\nimport {\n  applyTheme,\n  dispatchCustomEvent,\n  generateId,\n  getShadowRoot,\n} from '../../utils';\n\nexport class TabContainer\n  extends HTMLElement\n  implements EditorElementProperties\n{\n  private _theme: Theme = 'auto';\n  private _activeTabId: string | null = null;\n  private _tabPosition: 'top' | 'bottom' | 'left' | 'right' = 'top';\n  private _closable: boolean = false;\n\n  static get observedAttributes(): string[] {\n    return ['theme', 'disabled', 'active-tab', 'tab-position', 'closable'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n    this.setupEventListeners();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: flex;\n          flex-direction: column;\n          background: var(--tab-container-bg, #ffffff);\n          border: 1px solid var(--tab-container-border, #ccc);\n          border-radius: var(--tab-container-border-radius, 4px);\n          overflow: hidden;\n          font-family: var(--font-family, system-ui, sans-serif);\n          font-size: var(--font-size, 14px);\n        }\n\n        :host(.theme-dark) {\n          background: var(--tab-container-bg-dark, #1e1e1e);\n          border-color: var(--tab-container-border-dark, #555);\n          color: var(--text-color-dark, #fff);\n        }\n\n        :host([disabled]) {\n          opacity: 0.6;\n          pointer-events: none;\n        }\n\n        /* Tab position variations */\n        :host([tab-position=\"top\"]) {\n          flex-direction: column;\n        }\n\n        :host([tab-position=\"bottom\"]) {\n          flex-direction: column-reverse;\n        }\n\n        :host([tab-position=\"left\"]) {\n          flex-direction: row;\n        }\n\n        :host([tab-position=\"right\"]) {\n          flex-direction: row-reverse;\n        }\n\n        .tab-list {\n          display: flex;\n          background: var(--tab-list-bg, #f8f8f8);\n          border-bottom: 1px solid var(--tab-list-border, #ddd);\n          overflow-x: auto;\n          flex-shrink: 0;\n        }\n\n        :host(.theme-dark) .tab-list {\n          background: var(--tab-list-bg-dark, #2d2d2d);\n          border-bottom-color: var(--tab-list-border-dark, #555);\n        }\n\n        :host([tab-position=\"bottom\"]) .tab-list {\n          border-bottom: none;\n          border-top: 1px solid var(--tab-list-border, #ddd);\n        }\n\n        :host(.theme-dark[tab-position=\"bottom\"]) .tab-list {\n          border-top-color: var(--tab-list-border-dark, #555);\n        }\n\n        :host([tab-position=\"left\"]) .tab-list,\n        :host([tab-position=\"right\"]) .tab-list {\n          flex-direction: column;\n          border-bottom: none;\n          border-right: 1px solid var(--tab-list-border, #ddd);\n          overflow-x: visible;\n          overflow-y: auto;\n        }\n\n        :host([tab-position=\"right\"]) .tab-list {\n          border-right: none;\n          border-left: 1px solid var(--tab-list-border, #ddd);\n        }\n\n        :host(.theme-dark[tab-position=\"left\"]) .tab-list {\n          border-right-color: var(--tab-list-border-dark, #555);\n        }\n\n        :host(.theme-dark[tab-position=\"right\"]) .tab-list {\n          border-left-color: var(--tab-list-border-dark, #555);\n        }\n\n        .panel-container {\n          flex: 1;\n          overflow: hidden;\n          position: relative;\n        }\n\n        ::slotted(e2-tab) {\n          flex-shrink: 0;\n        }\n\n        ::slotted(e2-tab-panel) {\n          position: absolute;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          overflow: auto;\n        }\n\n        ::slotted(e2-tab-panel[active]) {\n          display: flex !important;\n        }\n      </style>\n\n      <div class=\"tab-list\">\n        <slot name=\"tabs\"></slot>\n      </div>\n      <div class=\"panel-container\">\n        <slot name=\"panels\"></slot>\n      </div>\n    `;\n  }\n\n  private setupEventListeners(): void {\n    // Listen for tab clicks\n    this.addEventListener(\n      'tab-click',\n      this.handleTabClick.bind(this) as EventListener\n    );\n    this.addEventListener(\n      'tab-close',\n      this.handleTabClose.bind(this) as EventListener\n    );\n\n    // Listen for slotchange to manage initial state\n    const shadowRoot = this.shadowRoot!;\n    const tabSlot = shadowRoot.querySelector(\n      'slot[name=\"tabs\"]'\n    ) as HTMLSlotElement;\n    const panelSlot = shadowRoot.querySelector(\n      'slot[name=\"panels\"]'\n    ) as HTMLSlotElement;\n\n    tabSlot?.addEventListener('slotchange', () => {\n      this.updateTabsAndPanels();\n    });\n\n    panelSlot?.addEventListener('slotchange', () => {\n      this.updateTabsAndPanels();\n    });\n  }\n\n  private handleTabClick(event: Event): void {\n    event.stopPropagation();\n    const tabElement = event.target as HTMLElement;\n    const tabId = tabElement.id;\n    const panelId = tabElement.getAttribute('panel') || `${tabId}-panel`;\n\n    this.selectTab(tabId, panelId);\n  }\n\n  private handleTabClose(event: Event): void {\n    event.stopPropagation();\n\n    // Find the actual tab element (event might come from close button inside tab)\n    let tabElement = event.target as HTMLElement;\n\n    // If the event came from inside a tab, find the parent tab element\n    if (!tabElement.matches('e2-tab')) {\n      tabElement = tabElement.closest('e2-tab') as HTMLElement;\n    }\n\n    if (!tabElement) {\n      return;\n    }\n\n    const tabId = tabElement.id;\n    const panelId = tabElement.getAttribute('panel') || `${tabId}-panel`;\n\n    // Check if this tab is already being removed to prevent recursion\n    if (tabElement.hasAttribute('data-removing')) {\n      return;\n    }\n\n    // Mark as being removed to prevent recursive calls\n    tabElement.setAttribute('data-removing', 'true');\n\n    // Dispatch close event to external listeners (without bubbling to avoid recursion)\n    const closeEvent = dispatchCustomEvent<TabCloseEvent['detail']>(\n      this,\n      'tab-close',\n      {\n        tabId,\n        tab: tabElement,\n        panelId,\n        panel: this.querySelector(\n          `e2-tab-panel[id=\"${panelId}\"]`\n        ) as HTMLElement,\n        containerId: this.id,\n        container: this,\n      },\n      { bubbles: false } // Prevent bubbling to avoid recursion\n    );\n\n    // Defer the removal to break any potential event loops\n    if (closeEvent) {\n      setTimeout(() => {\n        this.removeTab(tabId);\n      }, 0);\n    }\n  }\n\n  private selectTab(tabId: string, panelId: string): void {\n    const tabElement = this.querySelector(\n      `e2-tab[id=\"${tabId}\"]`\n    ) as HTMLElement;\n    const panelElement = this.querySelector(\n      `e2-tab-panel[id=\"${panelId}\"]`\n    ) as HTMLElement;\n\n    if (!tabElement || !panelElement) {\n      return;\n    }\n\n    const previousTabId = this._activeTabId;\n\n    // Deactivate all tabs and panels\n    this.querySelectorAll('e2-tab').forEach(tab => {\n      if ((tab as any).active !== undefined) {\n        (tab as any).active = false;\n      } else {\n        tab.removeAttribute('active');\n      }\n    });\n    this.querySelectorAll('e2-tab-panel').forEach(panel => {\n      if ((panel as any).active !== undefined) {\n        (panel as any).active = false;\n      } else {\n        panel.removeAttribute('active');\n        (panel as HTMLElement).style.display = 'none';\n      }\n    });\n\n    // Activate the selected tab and panel\n    if ((tabElement as any).active !== undefined) {\n      (tabElement as any).active = true;\n    } else {\n      tabElement.setAttribute('active', '');\n    }\n\n    if ((panelElement as any).active !== undefined) {\n      (panelElement as any).active = true;\n    } else {\n      panelElement.setAttribute('active', '');\n      panelElement.style.display = 'flex';\n    }\n\n    this._activeTabId = tabId;\n    this.setAttribute('active-tab', tabId);\n\n    // Dispatch select event\n    dispatchCustomEvent<TabSelectEvent['detail']>(this, 'tab-select', {\n      tabId,\n      tab: tabElement,\n      panelId,\n      panel: panelElement,\n      containerId: this.id,\n      container: this,\n      previousTabId: previousTabId || undefined,\n    });\n\n    // Dispatch container change event\n    dispatchCustomEvent<TabContainerChangeEvent['detail']>(\n      this,\n      'tab-container-change',\n      {\n        containerId: this.id,\n        container: this,\n        activeTabId: tabId,\n        activePanelId: panelId,\n      }\n    );\n  }\n\n  private removeTab(tabId: string): void {\n    const tabElement = this.querySelector(\n      `e2-tab[id=\"${tabId}\"]`\n    ) as HTMLElement;\n    const panelId = tabElement?.getAttribute('panel') || `${tabId}-panel`;\n    const panelElement = this.querySelector(\n      `e2-tab-panel[id=\"${panelId}\"]`\n    ) as HTMLElement;\n\n    // Remove elements\n    tabElement?.remove();\n    panelElement?.remove();\n\n    // If this was the active tab, select another\n    if (this._activeTabId === tabId) {\n      const remainingTabs = this.querySelectorAll('e2-tab');\n      if (remainingTabs.length > 0) {\n        const nextTab = remainingTabs[0] as HTMLElement;\n        const nextPanelId =\n          nextTab.getAttribute('panel') || `${nextTab.id}-panel`;\n        this.selectTab(nextTab.id, nextPanelId);\n      } else {\n        this._activeTabId = null;\n        this.removeAttribute('active-tab');\n      }\n    }\n  }\n\n  private updateTabsAndPanels(): void {\n    // Auto-assign panels to tabs and vice versa\n    const tabs = this.querySelectorAll('e2-tab');\n    const panels = this.querySelectorAll('e2-tab-panel');\n\n    tabs.forEach((tab, index) => {\n      const tabElement = tab as HTMLElement;\n\n      // Only set ID if it's not already set and the element doesn't have attributes being processed\n      if (!tabElement.id && !tabElement.hasAttribute('id')) {\n        try {\n          tabElement.id = generateId('tab');\n        } catch (e) {\n          // If setting ID fails, skip this tab for now\n          console.warn('Failed to set tab ID, skipping:', e);\n          return;\n        }\n      }\n\n      // Set closable attribute if container is closable, but avoid if element is being processed\n      if (this._closable && !tabElement.hasAttribute('closable')) {\n        try {\n          tabElement.setAttribute('closable', '');\n        } catch (e) {\n          // If setting attribute fails, the element might still be initializing\n          console.warn('Failed to set closable attribute, skipping:', e);\n        }\n      }\n\n      // Apply current theme\n      if ((tabElement as any).applyTheme) {\n        try {\n          (tabElement as any).applyTheme(this._theme);\n        } catch (e) {\n          console.warn('Failed to apply theme to tab:', e);\n        }\n      }\n\n      // Link to panel\n      if (!tabElement.getAttribute('panel')) {\n        const correspondingPanel = panels[index] as HTMLElement;\n        if (correspondingPanel) {\n          if (\n            !correspondingPanel.id &&\n            !correspondingPanel.hasAttribute('id')\n          ) {\n            try {\n              correspondingPanel.id = `${tabElement.id}-panel`;\n            } catch (e) {\n              console.warn('Failed to set panel ID:', e);\n              return;\n            }\n          }\n          try {\n            tabElement.setAttribute('panel', correspondingPanel.id);\n          } catch (e) {\n            console.warn('Failed to link tab to panel:', e);\n          }\n        }\n      }\n    });\n\n    // Determine which tab should be active initially\n    let activeTabElement: HTMLElement | null = null;\n    let activePanelId: string | null = null;\n\n    // Priority 1: Check if container has active-tab attribute\n    if (this.hasAttribute('active-tab')) {\n      const activeTabId = this.getAttribute('active-tab');\n      activeTabElement = this.querySelector(\n        `e2-tab[id=\"${activeTabId}\"]`\n      ) as HTMLElement;\n    }\n\n    // Priority 2: Check if any tab has active attribute\n    if (!activeTabElement) {\n      activeTabElement = this.querySelector('e2-tab[active]') as HTMLElement;\n    }\n\n    // Priority 3: Use first tab as fallback\n    if (!activeTabElement && tabs.length > 0) {\n      activeTabElement = tabs[0] as HTMLElement;\n    }\n\n    // Set the active panel ID based on the determined active tab\n    if (activeTabElement) {\n      activePanelId =\n        activeTabElement.getAttribute('panel') ||\n        `${activeTabElement.id}-panel`;\n    }\n\n    panels.forEach(panel => {\n      const panelElement = panel as HTMLElement;\n\n      // Only set ID if it's not already set and the element is ready\n      if (!panelElement.id && !panelElement.hasAttribute('id')) {\n        try {\n          panelElement.id = generateId('tab-panel');\n        } catch (e) {\n          console.warn('Failed to set panel ID:', e);\n          return;\n        }\n      }\n\n      // Apply current theme\n      if ((panelElement as any).applyTheme) {\n        try {\n          (panelElement as any).applyTheme(this._theme);\n        } catch (e) {\n          console.warn('Failed to apply theme to panel:', e);\n        }\n      }\n\n      // Hide all panels except the one that should be active\n      if (panelElement.id === activePanelId) {\n        // This will be the initially active panel - ensure it's visible\n        if ((panelElement as any).active !== undefined) {\n          try {\n            (panelElement as any).active = true;\n          } catch (e) {\n            console.warn('Failed to set panel active property:', e);\n          }\n        } else {\n          try {\n            panelElement.setAttribute('active', '');\n            panelElement.style.display = 'flex';\n          } catch (e) {\n            console.warn('Failed to set panel active state:', e);\n          }\n        }\n      } else {\n        if ((panelElement as any).active !== undefined) {\n          try {\n            (panelElement as any).active = false;\n          } catch (e) {\n            console.warn('Failed to set panel inactive property:', e);\n          }\n        } else {\n          try {\n            panelElement.style.display = 'none';\n          } catch (e) {\n            console.warn('Failed to hide panel:', e);\n          }\n        }\n      }\n    });\n\n    // Select the determined active tab if none is currently selected\n    if (!this._activeTabId && activeTabElement) {\n      const panelId =\n        activeTabElement.getAttribute('panel') ||\n        `${activeTabElement.id}-panel`;\n      setTimeout(() => {\n        if (activeTabElement) {\n          this.selectTab(activeTabElement.id, panelId);\n        }\n      }, 100);\n    }\n  }\n\n  // Public API\n  public selectTabById(tabId: string): void {\n    const tabElement = this.querySelector(\n      `e2-tab[id=\"${tabId}\"]`\n    ) as HTMLElement;\n    if (tabElement) {\n      const panelId = tabElement.getAttribute('panel') || `${tabId}-panel`;\n      this.selectTab(tabId, panelId);\n    }\n  }\n\n  public addTab(\n    label: string,\n    content: string = '',\n    tabId?: string,\n    panelId?: string\n  ): { tabId: string; panelId: string } {\n    const finalTabId = tabId || generateId('tab');\n    const finalPanelId = panelId || `${finalTabId}-panel`;\n\n    // Create tab element using customElements workaround\n    const TabConstructor = window.customElements.get('e2-tab') as any;\n    const tab = new TabConstructor();\n    tab.id = finalTabId;\n\n    // Create panel element using customElements workaround\n    const TabPanelConstructor = window.customElements.get(\n      'e2-tab-panel'\n    ) as any;\n    const panel = new TabPanelConstructor();\n    panel.id = finalPanelId;\n\n    // Set up initial data that will be applied in connectedCallback\n    (tab as any)._pendingSetup = {\n      slot: 'tabs',\n      panel: finalPanelId,\n      label: label,\n      closable: this._closable,\n      theme: this._theme,\n    };\n\n    (panel as any)._pendingSetup = {\n      slot: 'panels',\n      content: content,\n      theme: this._theme,\n    };\n\n    // Add to DOM - this will trigger connectedCallback\n    this.appendChild(tab);\n    this.appendChild(panel);\n\n    return { tabId: finalTabId, panelId: finalPanelId };\n  }\n\n  public removeTabById(tabId: string): void {\n    this.removeTab(tabId);\n  }\n\n  public get activeTabId(): string | null {\n    return this._activeTabId;\n  }\n\n  public get tabs(): NodeListOf<HTMLElement> {\n    return this.querySelectorAll('e2-tab');\n  }\n\n  public get panels(): NodeListOf<HTMLElement> {\n    return this.querySelectorAll('e2-tab-panel');\n  }\n\n  // Attribute handling\n  public get theme(): Theme {\n    return this._theme;\n  }\n\n  public set theme(value: Theme) {\n    this._theme = value;\n    this.setAttribute('theme', value);\n    this.applyTheme(value);\n  }\n\n  public get tabPosition(): 'top' | 'bottom' | 'left' | 'right' {\n    return this._tabPosition;\n  }\n\n  public set tabPosition(value: 'top' | 'bottom' | 'left' | 'right') {\n    this._tabPosition = value;\n    this.setAttribute('tab-position', value);\n  }\n\n  public get closable(): boolean {\n    return this._closable;\n  }\n\n  public set closable(value: boolean) {\n    this._closable = value;\n    if (value) {\n      this.setAttribute('closable', '');\n    } else {\n      this.removeAttribute('closable');\n    }\n\n    // Update existing tabs\n    this.querySelectorAll('e2-tab').forEach(tab => {\n      if (value) {\n        tab.setAttribute('closable', '');\n      } else {\n        tab.removeAttribute('closable');\n      }\n    });\n  }\n\n  public get disabled(): boolean {\n    return this.hasAttribute('disabled');\n  }\n\n  public set disabled(value: boolean) {\n    if (value) {\n      this.setAttribute('disabled', '');\n    } else {\n      this.removeAttribute('disabled');\n    }\n  }\n\n  public applyTheme(theme: Theme): void {\n    applyTheme(this, theme);\n\n    // Also apply theme to all child tabs and panels\n    this.querySelectorAll('e2-tab').forEach((tab: any) => {\n      if (tab.applyTheme) {\n        tab.applyTheme(theme);\n      }\n    });\n\n    this.querySelectorAll('e2-tab-panel').forEach((panel: any) => {\n      if (panel.applyTheme) {\n        panel.applyTheme(theme);\n      }\n    });\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string | null,\n    newValue: string | null\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'theme':\n        this._theme = (newValue as Theme) || 'auto';\n        this.applyTheme(this._theme);\n        break;\n      case 'active-tab':\n        if (newValue && newValue !== this._activeTabId) {\n          this.selectTabById(newValue);\n        }\n        break;\n      case 'tab-position':\n        this._tabPosition = (newValue as any) || 'top';\n        break;\n      case 'closable':\n        this._closable = newValue !== null;\n        break;\n    }\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('tab-container');\n    }\n    this.applyTheme(this._theme);\n    this.updateTabsAndPanels();\n\n    // Defer initialization until the next frame to avoid conflicts with custom element initialization\n    // Use requestAnimationFrame instead of setTimeout for better timing\n    // requestAnimationFrame(() => {\n    //   // Wait one more frame to ensure all child custom elements are fully initialized\n    //   requestAnimationFrame(() => {\n    //     this.updateTabsAndPanels();\n\n    //     // If still no active tab after initialization, try once more\n    //     if (!this._activeTabId) {\n    //       requestAnimationFrame(() => {\n    //         this.updateTabsAndPanels();\n    //       });\n    //     }\n    //   });\n    // });\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-tab-container')) {\n  customElements.define('e2-tab-container', TabContainer);\n}\n","/**\n * Tab Panel Element\n * Container for tab content that shows/hides based on tab selection\n */\n\nimport { EditorElementProperties, Theme } from '../../types';\nimport { applyTheme, generateId, getShadowRoot } from '../../utils';\n\nexport class TabPanel extends HTMLElement implements EditorElementProperties {\n  private _theme: Theme = 'auto';\n  private _active: boolean = false;\n\n  static get observedAttributes(): string[] {\n    return ['theme', 'disabled', 'active'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: none;\n          flex-direction: column;\n          width: 100%;\n          height: 100%;\n          overflow: auto;\n          background: var(--tab-panel-bg, #ffffff);\n          padding: var(--tab-panel-padding, 16px);\n          font-family: var(--font-family, system-ui, sans-serif);\n          font-size: var(--font-size, 14px);\n          color: var(--tab-panel-color, #333);\n          box-sizing: border-box;\n        }\n\n        :host([active]) {\n          display: flex;\n        }\n\n        :host(.theme-dark) {\n          background: var(--tab-panel-bg-dark, #1e1e1e);\n          color: var(--tab-panel-color-dark, #fff);\n        }\n\n        :host([disabled]) {\n          opacity: 0.6;\n          pointer-events: none;\n        }\n\n        /* Scrollbar styling for dark theme */\n        :host(.theme-dark) {\n          scrollbar-width: thin;\n          scrollbar-color: var(--scrollbar-thumb-dark, #555) var(--scrollbar-track-dark, #2d2d2d);\n        }\n\n        :host(.theme-dark)::-webkit-scrollbar {\n          width: 8px;\n          height: 8px;\n        }\n\n        :host(.theme-dark)::-webkit-scrollbar-track {\n          background: var(--scrollbar-track-dark, #2d2d2d);\n        }\n\n        :host(.theme-dark)::-webkit-scrollbar-thumb {\n          background: var(--scrollbar-thumb-dark, #555);\n          border-radius: 4px;\n        }\n\n        :host(.theme-dark)::-webkit-scrollbar-thumb:hover {\n          background: var(--scrollbar-thumb-hover-dark, #666);\n        }\n\n        /* Light theme scrollbar */\n        :host(.theme-light) {\n          scrollbar-width: thin;\n          scrollbar-color: var(--scrollbar-thumb-light, #ccc) var(--scrollbar-track-light, #f0f0f0);\n        }\n\n        :host(.theme-light)::-webkit-scrollbar {\n          width: 8px;\n          height: 8px;\n        }\n\n        :host(.theme-light)::-webkit-scrollbar-track {\n          background: var(--scrollbar-track-light, #f0f0f0);\n        }\n\n        :host(.theme-light)::-webkit-scrollbar-thumb {\n          background: var(--scrollbar-thumb-light, #ccc);\n          border-radius: 4px;\n        }\n\n        :host(.theme-light)::-webkit-scrollbar-thumb:hover {\n          background: var(--scrollbar-thumb-hover-light, #bbb);\n        }\n\n        /* Content styling */\n        ::slotted(*) {\n          max-width: 100%;\n        }\n\n        ::slotted(h1),\n        ::slotted(h2),\n        ::slotted(h3),\n        ::slotted(h4),\n        ::slotted(h5),\n        ::slotted(h6) {\n          margin-top: 0;\n          color: inherit;\n        }\n\n        ::slotted(p) {\n          line-height: 1.5;\n          margin-bottom: 1em;\n        }\n\n        ::slotted(pre) {\n          background: var(--code-bg, #f5f5f5);\n          padding: 12px;\n          border-radius: 4px;\n          overflow-x: auto;\n          font-family: var(--font-family-mono, 'Consolas', 'Monaco', monospace);\n        }\n\n        :host(.theme-dark) ::slotted(pre) {\n          background: var(--code-bg-dark, #0d1117);\n        }\n\n        ::slotted(code) {\n          background: var(--code-bg, #f5f5f5);\n          padding: 2px 4px;\n          border-radius: 2px;\n          font-family: var(--font-family-mono, 'Consolas', 'Monaco', monospace);\n          font-size: 0.9em;\n        }\n\n        :host(.theme-dark) ::slotted(code) {\n          background: var(--code-bg-dark, #0d1117);\n        }\n\n        /* Loading state */\n        :host([loading]) {\n          display: flex;\n          align-items: center;\n          justify-content: center;\n        }\n\n        :host([loading])::before {\n          content: 'Loading...';\n          color: var(--tab-panel-loading-color, #666);\n        }\n\n        :host(.theme-dark[loading])::before {\n          color: var(--tab-panel-loading-color-dark, #aaa);\n        }\n\n        /* Empty state */\n        :host(:empty:not([loading])) {\n          display: flex;\n          align-items: center;\n          justify-content: center;\n        }\n\n        :host(:empty:not([loading]))::before {\n          content: attr(data-empty-message);\n          color: var(--tab-panel-empty-color, #999);\n          font-style: italic;\n        }\n\n        :host(.theme-dark:empty:not([loading]))::before {\n          color: var(--tab-panel-empty-color-dark, #666);\n        }\n      </style>\n\n      <slot></slot>\n    `;\n  }\n\n  // Public API\n  public show(): void {\n    this.active = true;\n  }\n\n  public hide(): void {\n    this.active = false;\n  }\n\n  public scrollToTop(): void {\n    this.scrollTop = 0;\n  }\n\n  public scrollToBottom(): void {\n    this.scrollTop = this.scrollHeight;\n  }\n\n  public scrollToElement(element: Element): void {\n    if (this.contains(element)) {\n      element.scrollIntoView({ behavior: 'smooth', block: 'nearest' });\n    }\n  }\n\n  public clearContent(): void {\n    this.innerHTML = '';\n  }\n\n  public setContent(content: string): void {\n    // Clear existing content first to avoid conflicts\n    this.innerHTML = '';\n    this.innerHTML = content;\n  }\n\n  public appendContent(content: string): void {\n    this.insertAdjacentHTML('beforeend', content);\n  }\n\n  public prependContent(content: string): void {\n    this.insertAdjacentHTML('afterbegin', content);\n  }\n\n  // Properties\n  public get theme(): Theme {\n    return this._theme;\n  }\n\n  public set theme(value: Theme) {\n    this._theme = value;\n    this.setAttribute('theme', value);\n    this.applyTheme(value);\n  }\n\n  public get active(): boolean {\n    return this._active;\n  }\n\n  public set active(value: boolean) {\n    this._active = value;\n    if (value) {\n      this.setAttribute('active', '');\n      this.style.display = 'flex';\n    } else {\n      this.removeAttribute('active');\n      this.style.display = 'none';\n    }\n  }\n\n  public get disabled(): boolean {\n    return this.hasAttribute('disabled');\n  }\n\n  public set disabled(value: boolean) {\n    if (value) {\n      this.setAttribute('disabled', '');\n    } else {\n      this.removeAttribute('disabled');\n    }\n  }\n\n  public get loading(): boolean {\n    return this.hasAttribute('loading');\n  }\n\n  public set loading(value: boolean) {\n    if (value) {\n      this.setAttribute('loading', '');\n    } else {\n      this.removeAttribute('loading');\n    }\n  }\n\n  public get emptyMessage(): string {\n    return this.getAttribute('data-empty-message') || 'No content available';\n  }\n\n  public set emptyMessage(value: string) {\n    this.setAttribute('data-empty-message', value);\n  }\n\n  public applyTheme(theme: Theme): void {\n    applyTheme(this, theme);\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string | null,\n    newValue: string | null\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'theme':\n        this._theme = (newValue as Theme) || 'auto';\n        this.applyTheme(this._theme);\n        break;\n      case 'active':\n        this._active = newValue !== null;\n        if (this._active) {\n          this.style.display = 'flex';\n        } else {\n          this.style.display = 'none';\n        }\n        break;\n    }\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('tab-panel');\n    }\n    this.applyTheme(this._theme);\n\n    // Handle pending setup from dynamic creation\n    if ((this as any)._pendingSetup) {\n      const setup = (this as any)._pendingSetup;\n\n      // Set attributes safely now that element is connected\n      if (setup.slot) {\n        this.setAttribute('slot', setup.slot);\n      }\n      if (setup.content) {\n        // Only set innerHTML if the element doesn't already have content\n        // This prevents conflicts when the element is declared with existing content\n        if (this.children.length === 0 && this.textContent?.trim() === '') {\n          this.innerHTML = setup.content;\n        }\n      }\n      if (setup.theme) {\n        this.applyTheme(setup.theme);\n      }\n\n      // Clean up\n      delete (this as any)._pendingSetup;\n    }\n\n    // Set initial visibility based on active state\n    if (this._active) {\n      this.style.display = 'flex';\n    } else {\n      this.style.display = 'none';\n    }\n\n    // Set default empty message if not provided\n    if (!this.hasAttribute('data-empty-message')) {\n      this.emptyMessage = 'No content available';\n    }\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-tab-panel')) {\n  customElements.define('e2-tab-panel', TabPanel);\n}\n","/**\n * Toolbar Element\n * A horizontal container for toolbar buttons and other controls\n */\n\nimport { EditorElementProperties, Theme } from '../../types';\nimport { applyTheme, generateId, getShadowRoot } from '../../utils';\n\nexport class Toolbar extends HTMLElement implements EditorElementProperties {\n  private _theme: Theme = 'auto';\n\n  static get observedAttributes(): string[] {\n    return ['theme', 'disabled'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: flex;\n          align-items: center;\n          padding: 4px;\n          background: var(--toolbar-bg, #f0f0f0);\n          border-bottom: 1px solid var(--toolbar-border, #ccc);\n          gap: 2px;\n          font-family: var(--font-family, system-ui, sans-serif);\n          font-size: var(--font-size, 14px);\n        }\n\n        :host(.theme-dark) {\n          background: var(--toolbar-bg-dark, #2d2d2d);\n          border-bottom-color: var(--toolbar-border-dark, #555);\n          color: var(--text-color-dark, #fff);\n        }\n\n        :host([disabled]) {\n          opacity: 0.6;\n          pointer-events: none;\n        }\n\n        ::slotted(*) {\n          flex-shrink: 0;\n        }\n      </style>\n      <slot></slot>\n    `;\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('toolbar');\n    }\n    this.applyTheme(this._theme);\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string,\n    newValue: string\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'theme':\n        this.theme = newValue as Theme;\n        break;\n    }\n  }\n\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this._theme = value;\n    this.applyTheme(value);\n  }\n\n  applyTheme(theme: Theme): void {\n    applyTheme(this, theme);\n  }\n\n  /**\n   * Close all toolbar menus except the specified one\n   * @param exceptMenu The menu to keep open (optional)\n   */\n  closeAllMenus(exceptMenu?: HTMLElement): void {\n    const toolbarMenus = this.querySelectorAll('e2-toolbar-menu');\n    toolbarMenus.forEach(menu => {\n      if (menu !== exceptMenu && typeof (menu as any).close === 'function') {\n        (menu as any).close();\n      }\n    });\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-toolbar')) {\n  customElements.define('e2-toolbar', Toolbar);\n}\n","/**\n * Toolbar Button Element\n * A button designed to be used within a toolbar\n */\n\nimport { EditorElementProperties, Theme } from '../../types';\nimport { applyTheme, generateId, getShadowRoot } from '../../utils';\n\nexport class ToolbarButton\n  extends HTMLElement\n  implements EditorElementProperties\n{\n  private _theme: Theme = 'auto';\n\n  static get observedAttributes(): string[] {\n    return ['label', 'icon', 'theme', 'disabled', 'active'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: inline-block;\n        }\n\n        button {\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          gap: 4px;\n          padding: 6px 12px;\n          border: 1px solid transparent;\n          background: transparent;\n          color: var(--text-color, #333);\n          font-family: inherit;\n          font-size: inherit;\n          cursor: pointer;\n          border-radius: 3px;\n          min-height: 24px;\n          transition: all 0.15s ease;\n          text-overflow: ellipsis;\n          overflow: hidden;\n        }\n\n        button:hover {\n          background: var(--button-hover-bg, rgba(0, 0, 0, 0.1));\n        }\n\n        button:active,\n        button.active {\n          background: var(--button-active-bg, rgba(0, 0, 0, 0.2));\n        }\n\n        button:disabled {\n          opacity: 0.6;\n          cursor: not-allowed;\n        }\n\n        :host(.theme-dark) button {\n          color: var(--text-color-dark, #fff);\n        }\n\n        :host(.theme-dark) button:hover {\n          background: var(--button-hover-bg-dark, rgba(255, 255, 255, 0.1));\n        }\n\n        :host(.theme-dark) button:active,\n        :host(.theme-dark) button.active {\n          background: var(--button-active-bg-dark, rgba(255, 255, 255, 0.2));\n        }\n\n        .icon {\n          width: 16px;\n          height: 16px;\n          flex-shrink: 0;\n        }\n\n        .label {\n          white-space: nowrap;\n        }\n      </style>\n      <button>\n        <span class=\"icon\" style=\"display: none;\"></span>\n        <span class=\"label\"></span>\n      </button>\n    `;\n\n    const button = shadowRoot.querySelector('button')!;\n    button.addEventListener('click', this.handleClick.bind(this));\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('toolbar-button');\n    }\n    this.updateContent();\n    this.applyTheme(this._theme);\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string,\n    newValue: string\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'label':\n      case 'icon':\n        this.updateContent();\n        break;\n      case 'theme':\n        this.theme = newValue as Theme;\n        break;\n      case 'disabled':\n        this.updateDisabled();\n        break;\n      case 'active':\n        this.updateActive();\n        break;\n    }\n  }\n\n  private updateContent(): void {\n    const shadowRoot = this.shadowRoot!;\n    const iconSpan = shadowRoot.querySelector('.icon') as HTMLSpanElement;\n    const labelSpan = shadowRoot.querySelector('.label') as HTMLSpanElement;\n\n    const icon = this.getAttribute('icon');\n    const label = this.getAttribute('label') || '';\n\n    if (icon) {\n      iconSpan.textContent = icon;\n      iconSpan.style.display = 'inline-block';\n    } else {\n      iconSpan.style.display = 'none';\n    }\n\n    labelSpan.textContent = label;\n  }\n\n  private updateDisabled(): void {\n    const button = this.shadowRoot!.querySelector('button')!;\n    button.disabled = this.hasAttribute('disabled');\n  }\n\n  private updateActive(): void {\n    const button = this.shadowRoot!.querySelector('button')!;\n    button.classList.toggle('active', this.hasAttribute('active'));\n  }\n\n  private handleClick(event: Event): void {\n    if (this.hasAttribute('disabled')) return;\n\n    const customEvent = new CustomEvent('toolbar-button-click', {\n      detail: {\n        buttonId: this.id,\n        button: this,\n      },\n      bubbles: true,\n      cancelable: true,\n    });\n\n    this.dispatchEvent(customEvent);\n  }\n\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this._theme = value;\n    this.applyTheme(value);\n  }\n\n  applyTheme(theme: Theme): void {\n    applyTheme(this, theme);\n  }\n\n  get label(): string {\n    return this.getAttribute('label') || '';\n  }\n\n  set label(value: string) {\n    this.setAttribute('label', value);\n  }\n\n  get icon(): string {\n    return this.getAttribute('icon') || '';\n  }\n\n  set icon(value: string) {\n    this.setAttribute('icon', value);\n  }\n\n  get active(): boolean {\n    return this.hasAttribute('active');\n  }\n\n  set active(value: boolean) {\n    if (value) {\n      this.setAttribute('active', '');\n    } else {\n      this.removeAttribute('active');\n    }\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-toolbar-button')) {\n  customElements.define('e2-toolbar-button', ToolbarButton);\n}\n","/**\n * Toolbar Menu Element\n * A dropdown menu button designed to be used within a toolbar\n */\n\nimport { EditorElementProperties, Theme } from '../../types';\nimport { applyTheme, generateId, getShadowRoot } from '../../utils';\n\nexport class ToolbarMenu\n  extends HTMLElement\n  implements EditorElementProperties\n{\n  private _theme: Theme = 'auto';\n  private _isOpen: boolean = false;\n  private _justOpened: boolean = false;\n\n  static get observedAttributes(): string[] {\n    return ['label', 'icon', 'theme', 'disabled'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n    this.bindEvents();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: inline-block;\n          position: relative;\n        }\n\n        .button {\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          gap: 4px;\n          padding: 6px 12px;\n          border: 1px solid transparent;\n          background: transparent;\n          color: var(--text-color, #333);\n          font-family: inherit;\n          font-size: inherit;\n          cursor: pointer;\n          border-radius: 3px;\n          min-height: 24px;\n          transition: all 0.15s ease;\n          text-overflow: ellipsis;\n          overflow: hidden;\n        }\n\n        .button:hover {\n          background: var(--button-hover-bg, rgba(0, 0, 0, 0.1));\n        }\n\n        .button:active,\n        .button.open {\n          background: var(--button-active-bg, rgba(0, 0, 0, 0.2));\n        }\n\n        .button:disabled {\n          opacity: 0.6;\n          cursor: not-allowed;\n        }\n\n        :host(.theme-dark) .button {\n          color: var(--text-color-dark, #fff);\n        }\n\n        :host(.theme-dark) .button:hover {\n          background: var(--button-hover-bg-dark, rgba(255, 255, 255, 0.1));\n        }\n\n        :host(.theme-dark) .button:active,\n        :host(.theme-dark) .button.open {\n          background: var(--button-active-bg-dark, rgba(255, 255, 255, 0.2));\n        }\n\n        .icon {\n          width: 16px;\n          height: 16px;\n          flex-shrink: 0;\n        }\n\n        .label {\n          white-space: nowrap;\n        }\n\n        .dropdown-arrow {\n          width: 0;\n          height: 0;\n          border-left: 4px solid transparent;\n          border-right: 4px solid transparent;\n          border-top: 4px solid currentColor;\n          margin-left: 4px;\n          flex-shrink: 0;\n        }\n\n        .dropdown {\n          position: absolute;\n          top: 100%;\n          left: 0;\n          z-index: 9999;\n          display: none;\n          min-width: 180px;\n          background: var(--context-menu-bg, #ffffff);\n          border: 1px solid var(--context-menu-border, #d0d0d0);\n          border-radius: 4px;\n          box-shadow: var(--context-menu-shadow, 0 2px 8px rgba(0, 0, 0, 0.15));\n          padding: 4px 0;\n          font-family: inherit;\n          font-size: 14px;\n          margin-top: 2px;\n        }\n\n        .dropdown.open {\n          display: block;\n        }\n\n        :host(.theme-light) .dropdown {\n          background: var(--context-menu-bg-light, #ffffff);\n          border-color: var(--context-menu-border-light, #d0d0d0);\n          box-shadow: var(--context-menu-shadow-light, 0 2px 8px rgba(0, 0, 0, 0.15));\n        }\n\n        :host(.theme-dark) .dropdown {\n          background: var(--context-menu-bg-dark, #2a2a2a);\n          border-color: var(--context-menu-border-dark, #444444);\n          box-shadow: var(--context-menu-shadow-dark, 0 2px 8px rgba(0, 0, 0, 0.4));\n        }\n\n        @media (prefers-color-scheme: dark) {\n          :host(.theme-auto) .dropdown {\n            background: var(--context-menu-bg-dark, #2a2a2a);\n            border-color: var(--context-menu-border-dark, #444444);\n            box-shadow: var(--context-menu-shadow-dark, 0 2px 8px rgba(0, 0, 0, 0.4));\n          }\n        }\n\n        ::slotted(*) {\n          display: block;\n        }\n      </style>\n      <button class=\"button\">\n        <span class=\"icon\" style=\"display: none;\"></span>\n        <span class=\"label\"></span>\n        <div class=\"dropdown-arrow\"></div>\n      </button>\n      <div class=\"dropdown\">\n        <slot></slot>\n      </div>\n    `;\n\n    const button = shadowRoot.querySelector('.button')!;\n    button.addEventListener('click', this.handleButtonClick.bind(this));\n  }\n\n  private bindEvents(): void {\n    // Close menu when clicking outside\n    document.addEventListener('click', this.handleDocumentClick.bind(this));\n\n    // Close menu on escape key\n    document.addEventListener('keydown', this.handleKeyDown.bind(this));\n\n    // Handle window resize\n    window.addEventListener('resize', this.handleWindowResize.bind(this));\n\n    // Listen for item clicks to close menu\n    this.addEventListener('click', this.handleItemClick.bind(this));\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('toolbar-menu');\n    }\n    this.updateContent();\n    this.applyTheme(this._theme);\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string,\n    newValue: string\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'label':\n      case 'icon':\n        this.updateContent();\n        break;\n      case 'theme':\n        this.theme = newValue as Theme;\n        break;\n      case 'disabled':\n        this.updateDisabled();\n        break;\n    }\n  }\n\n  private updateContent(): void {\n    const shadowRoot = this.shadowRoot!;\n    const iconSpan = shadowRoot.querySelector('.icon') as HTMLSpanElement;\n    const labelSpan = shadowRoot.querySelector('.label') as HTMLSpanElement;\n\n    const icon = this.getAttribute('icon');\n    const label = this.getAttribute('label') || '';\n\n    if (icon) {\n      iconSpan.textContent = icon;\n      iconSpan.style.display = 'inline-block';\n    } else {\n      iconSpan.style.display = 'none';\n    }\n\n    labelSpan.textContent = label;\n  }\n\n  private updateDisabled(): void {\n    const button = this.shadowRoot!.querySelector(\n      '.button'\n    )! as HTMLButtonElement;\n    button.disabled = this.hasAttribute('disabled');\n\n    if (this.hasAttribute('disabled') && this._isOpen) {\n      this.close();\n    }\n  }\n\n  private handleButtonClick(event: Event): void {\n    if (this.hasAttribute('disabled')) return;\n\n    event.stopPropagation();\n\n    if (this._isOpen) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  private handleDocumentClick(event: MouseEvent): void {\n    if (!this._isOpen) return;\n\n    // Ignore the click that just opened the menu\n    if (this._justOpened) {\n      this._justOpened = false;\n      return;\n    }\n\n    const target = event.target as Node;\n    if (!this.contains(target) && !this.shadowRoot?.contains(target)) {\n      this.close();\n    }\n  }\n\n  private handleKeyDown(event: KeyboardEvent): void {\n    if (!this._isOpen) return;\n\n    switch (event.key) {\n      case 'Escape':\n        event.preventDefault();\n        this.close();\n        break;\n      case 'ArrowDown':\n        event.preventDefault();\n        this.focusNextItem();\n        break;\n      case 'ArrowUp':\n        event.preventDefault();\n        this.focusPreviousItem();\n        break;\n      case 'Enter':\n      case ' ':\n        event.preventDefault();\n        this.activateFocusedItem();\n        break;\n    }\n  }\n\n  private handleWindowResize(): void {\n    if (this._isOpen) {\n      this.close();\n    }\n  }\n\n  private handleItemClick(event: Event): void {\n    // Close menu when any item is clicked\n    const target = event.target as HTMLElement;\n    if (\n      target.tagName === 'E2-CONTEXT-MENU-ITEM' ||\n      target.closest('e2-context-menu-item')\n    ) {\n      // Small delay to allow the item click event to be processed first\n      setTimeout(() => this.close(), 0);\n    }\n  }\n\n  private focusNextItem(): void {\n    const items = this.querySelectorAll('e2-context-menu-item:not([disabled])');\n    const currentIndex = Array.from(items).findIndex(\n      item => item === document.activeElement || item.shadowRoot?.activeElement\n    );\n\n    const nextIndex = currentIndex < items.length - 1 ? currentIndex + 1 : 0;\n    (items[nextIndex] as HTMLElement).focus();\n  }\n\n  private focusPreviousItem(): void {\n    const items = this.querySelectorAll('e2-context-menu-item:not([disabled])');\n    const currentIndex = Array.from(items).findIndex(\n      item => item === document.activeElement || item.shadowRoot?.activeElement\n    );\n\n    const prevIndex = currentIndex > 0 ? currentIndex - 1 : items.length - 1;\n    (items[prevIndex] as HTMLElement).focus();\n  }\n\n  private activateFocusedItem(): void {\n    const focused = document.activeElement;\n    if (focused && focused.tagName === 'E2-CONTEXT-MENU-ITEM') {\n      (focused as any).click();\n    }\n  }\n\n  private adjustPosition(): void {\n    const dropdown = this.shadowRoot!.querySelector('.dropdown') as HTMLElement;\n    const rect = this.getBoundingClientRect();\n    const dropdownRect = dropdown.getBoundingClientRect();\n\n    // Check if dropdown would go off the right edge of the viewport\n    if (rect.left + dropdownRect.width > window.innerWidth) {\n      dropdown.style.left = 'auto';\n      dropdown.style.right = '0';\n    } else {\n      dropdown.style.left = '0';\n      dropdown.style.right = 'auto';\n    }\n\n    // Check if dropdown would go off the bottom edge of the viewport\n    if (rect.bottom + dropdownRect.height > window.innerHeight) {\n      dropdown.style.top = 'auto';\n      dropdown.style.bottom = '100%';\n      dropdown.style.marginTop = '0';\n      dropdown.style.marginBottom = '2px';\n    } else {\n      dropdown.style.top = '100%';\n      dropdown.style.bottom = 'auto';\n      dropdown.style.marginTop = '2px';\n      dropdown.style.marginBottom = '0';\n    }\n  }\n\n  // Public API\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this._theme = value;\n    this.applyTheme(value);\n  }\n\n  applyTheme(theme: Theme): void {\n    applyTheme(this, theme);\n\n    // Apply theme to all child context menu items and separators\n    const childItems = this.querySelectorAll(\n      'e2-context-menu-item, e2-context-menu-separator'\n    );\n    childItems.forEach(child => {\n      if (typeof (child as any).applyTheme === 'function') {\n        (child as any).applyTheme(theme);\n      }\n    });\n  }\n\n  get label(): string {\n    return this.getAttribute('label') || '';\n  }\n\n  set label(value: string) {\n    this.setAttribute('label', value);\n  }\n\n  get icon(): string {\n    return this.getAttribute('icon') || '';\n  }\n\n  set icon(value: string) {\n    this.setAttribute('icon', value);\n  }\n\n  get isOpen(): boolean {\n    return this._isOpen;\n  }\n\n  open(): void {\n    if (this.hasAttribute('disabled') || this._isOpen) return;\n\n    // Close other toolbar menus in the same toolbar\n    const parentToolbar = this.closest('e2-toolbar');\n    if (\n      parentToolbar &&\n      typeof (parentToolbar as any).closeAllMenus === 'function'\n    ) {\n      (parentToolbar as any).closeAllMenus(this);\n    }\n\n    this._isOpen = true;\n    const button = this.shadowRoot!.querySelector('.button')!;\n    const dropdown = this.shadowRoot!.querySelector('.dropdown')!;\n\n    button.classList.add('open');\n    dropdown.classList.add('open');\n\n    // Adjust position to stay within viewport\n    this.adjustPosition();\n\n    // Set the flag to prevent immediate closing\n    this._justOpened = true;\n\n    // Ensure all child items have the correct theme\n    this.applyTheme(this._theme);\n\n    // Dispatch show event\n    const showEvent = new CustomEvent('toolbar-menu-show', {\n      detail: {\n        menuId: this.id,\n        menu: this,\n      },\n      bubbles: true,\n      cancelable: true,\n    });\n\n    this.dispatchEvent(showEvent);\n  }\n\n  close(): void {\n    if (!this._isOpen) return;\n\n    this._isOpen = false;\n    const button = this.shadowRoot!.querySelector('.button')!;\n    const dropdown = this.shadowRoot!.querySelector('.dropdown')!;\n\n    button.classList.remove('open');\n    dropdown.classList.remove('open');\n\n    // Dispatch hide event\n    const hideEvent = new CustomEvent('toolbar-menu-hide', {\n      detail: {\n        menuId: this.id,\n        menu: this,\n      },\n      bubbles: true,\n      cancelable: true,\n    });\n\n    this.dispatchEvent(hideEvent);\n  }\n\n  toggle(): void {\n    if (this._isOpen) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-toolbar-menu')) {\n  customElements.define('e2-toolbar-menu', ToolbarMenu);\n}\n","/**\n * Toolbar Separator Element\n * A visual separator for toolbar items\n */\n\nimport { Theme } from '../../types';\nimport { applyTheme, getShadowRoot } from '../../utils';\n\nexport class ToolbarSeparator extends HTMLElement {\n  private _theme: Theme = 'auto';\n\n  static get observedAttributes(): string[] {\n    return ['theme'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: inline-block;\n          width: 1px;\n          height: 24px;\n          background: var(--separator-color, #ccc);\n          margin: 0 4px;\n          flex-shrink: 0;\n        }\n\n        :host(.theme-dark) {\n          background: var(--separator-color-dark, #555);\n        }\n      </style>\n    `;\n  }\n\n  connectedCallback(): void {\n    this.applyTheme(this._theme);\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string,\n    newValue: string\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'theme':\n        this.theme = newValue as Theme;\n        break;\n    }\n  }\n\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this._theme = value;\n    this.applyTheme(value);\n  }\n\n  applyTheme(theme: Theme): void {\n    applyTheme(this, theme);\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-toolbar-separator')) {\n  customElements.define('e2-toolbar-separator', ToolbarSeparator);\n}\n","/**\n * E2 - A collection of custom HTML elements for building editors\n *\n * This library provides a set of reusable UI components designed specifically\n * for creating level editors, sprite editors, and similar desktop-like web applications.\n */\n\n// Import and register all custom elements\nimport './elements/app/app';\nimport './elements/contextmenu/context-menu';\nimport './elements/contextmenu/context-menu-item';\nimport './elements/contextmenu/context-menu-separator';\nimport './elements/dialog/alert';\nimport './elements/dialog/confirm';\nimport './elements/dialog/dialog';\nimport './elements/dialog/prompt';\nimport './elements/panel/collapsible-panel';\nimport './elements/panel/split-panel';\nimport './elements/panel/split-panel-container';\nimport './elements/tabs/tab';\nimport './elements/tabs/tab-container';\nimport './elements/tabs/tab-panel';\nimport './elements/toolbar/toolbar';\nimport './elements/toolbar/toolbar-button';\nimport './elements/toolbar/toolbar-menu';\nimport './elements/toolbar/toolbar-separator';\n\n// Export types and interfaces for TypeScript users\nexport * from './types';\n\n// Export utility functions if any\nexport * from './utils';\n\n// Version information\nexport const VERSION = '1.0.0';\n\n// Auto-registration message for development\nif (typeof window !== 'undefined' && process.env.NODE_ENV === 'development') {\n  console.log(\n    `E2 v${VERSION} loaded - Custom elements registered automatically`\n  );\n}\n"],"names":["root","factory","exports","module","define","amd","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","generateId","prefix","Math","random","toString","substring","dispatchCustomEvent","element","eventName","detail","options","event","CustomEvent","bubbles","cancelable","dispatchEvent","addGlobalCSS","css","id","document","getElementById","style","createElement","textContent","head","appendChild","createTemplate","html","template","innerHTML","trim","getShadowRoot","mode","shadowRoot","attachShadow","debounce","func","wait","timeout","args","clearTimeout","window","setTimeout","isElementVisible","rect","getBoundingClientRect","top","left","bottom","innerHeight","documentElement","clientHeight","right","innerWidth","clientWidth","applyTheme","theme","classList","remove","add","E2App","HTMLElement","observedAttributes","constructor","super","_theme","_stylesInitialized","handleThemeChange","setupElement","styleElement","connectedCallback","setupAutoTheme","disconnectedCallback","mediaQueryList","removeEventListener","matchMedia","addEventListener","attributeChangedCallback","name","oldValue","newValue","undefined","setCSSVariable","property","setProperty","getCSSVariable","getComputedStyle","getPropertyValue","customElements","ContextMenu","_visible","_justShown","boundContextMenuHandler","handleContextMenu","bind","bindEvents","handleDocumentClick","handleKeyDown","handleWindowResize","setupTargetListeners","removeTargetListeners","hide","targetSelector","getAttribute","querySelectorAll","forEach","target","disabled","mouseEvent","preventDefault","stopPropagation","trigger","currentTarget","show","clientX","clientY","contains","focusNextItem","focusPreviousItem","activateFocusedItem","items","currentIndex","Array","from","findIndex","item","activeElement","length","focus","focused","tagName","click","setAttribute","hasAttribute","removeAttribute","visible","x","y","adjustPosition","requestAnimationFrame","firstItem","querySelector","menuId","menu","viewportWidth","viewportHeight","parseInt","width","height","child","ContextMenuItem","button","handleClick","tabIndex","handleFocus","updateContent","updateDisabledState","iconElement","labelElement","shortcutElement","icon","display","label","shortcut","contextMenu","closest","itemId","includes","Event","ContextMenuSeparator","_value","AlertDialogElement","_nativeDialog","_resolvePromise","_rejectPromise","handleClose","handleCancel","close","titleElement","messageElement","buttonElement","getDefaultTitle","type","className","getIconForType","dialogId","dialog","title","message","buttonText","open","Promise","resolve","reject","Error","showModal","ConfirmDialogElement","confirmButton","cancelButton","confirm","cancel","confirmed","confirmText","cancelText","danger","DialogElement","closeButton","updateTitle","updateClosable","updateSize","closable","returnValue","modal","PromptDialogElement","input","handleInput","handleKeydown","inputElement","multiline","currentType","toLowerCase","textarea","parentNode","replaceChild","setupInputElement","placeholder","defaultValue","pattern","minLength","maxLength","HTMLInputElement","validateInput","shiftKey","errorMessage","isValid","error","required","RegExp","test","toggle","select","CollapsiblePanel","_collapsed","_orientation","handleToggle","collapsed","panelId","panel","orientation","expand","collapse","SplitPanel","_size","_minSize","_maxSize","_resizable","handleResize","parseFloat","toggleAttribute","size","minSize","maxSize","resizable","getCurrentSize","container","parentElement","containerHeight","containerWidth","SplitPanelContainer","_resizing","_activePanel","_startPosition","_startSize","_nextPanelStartSize","_updatingPanelSizes","debouncedResize","handleMouseDown","handleMouseMove","handleMouseUp","handleMouseLeave","updateHandles","updatePanelSizes","panels","getPanels","containerRect","handleSize","totalHandleSpace","availableSpace","totalSetSize","unsetPanels","remainingPercentage","max","defaultSize","actualSize","flexBasis","panelIndex","currentPanel","nextPanel","i","relativeX","relativeY","onBorder","borderStart","borderEnd","cursor","containerId","startSize","delta","deltaPercentage","indexOf","newCurrentSize","min","newNextSize","updateHoverCursor","overHandle","finalSize","resizePanel","getPanelSizes","sizes","resetPanelSizes","equalSize","Tab","_active","_closable","_icon","_label","setupEventListeners","handleCloseClick","tabId","tab","MouseEvent","active","_pendingSetup","setup","slot","TabContainer","_activeTabId","_tabPosition","handleTabClick","handleTabClose","tabSlot","panelSlot","updateTabsAndPanels","tabElement","selectTab","matches","removeTab","panelElement","previousTabId","activeTabId","activePanelId","remainingTabs","nextTab","nextPanelId","tabs","index","e","console","warn","correspondingPanel","activeTabElement","selectTabById","addTab","content","finalTabId","finalPanelId","removeTabById","tabPosition","TabPanel","scrollToTop","scrollTop","scrollToBottom","scrollHeight","scrollToElement","scrollIntoView","behavior","block","clearContent","setContent","appendContent","insertAdjacentHTML","prependContent","loading","emptyMessage","children","Toolbar","closeAllMenus","exceptMenu","ToolbarButton","updateDisabled","updateActive","iconSpan","labelSpan","customEvent","buttonId","ToolbarMenu","_isOpen","_justOpened","handleButtonClick","handleItemClick","dropdown","dropdownRect","marginTop","marginBottom","isOpen","parentToolbar","showEvent","hideEvent","ToolbarSeparator","VERSION"],"sourceRoot":""}