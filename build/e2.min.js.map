{"version":3,"file":"e2.min.js","mappings":"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","sources":["webpack://E2/webpack/universalModuleDefinition","webpack://E2/webpack/bootstrap","webpack://E2/webpack/runtime/define property getters","webpack://E2/webpack/runtime/hasOwnProperty shorthand","webpack://E2/webpack/runtime/make namespace object","webpack://E2/./src/utils.ts","webpack://E2/./src/elements/contextmenu/context-menu.ts","webpack://E2/./src/elements/contextmenu/context-menu-item.ts","webpack://E2/./src/elements/contextmenu/context-menu-separator.ts","webpack://E2/./src/elements/dialog/alert.ts","webpack://E2/./src/elements/dialog/confirm.ts","webpack://E2/./src/elements/dialog/dialog.ts","webpack://E2/./src/elements/dialog/prompt.ts","webpack://E2/./src/elements/panel/collapsible-panel.ts","webpack://E2/./src/elements/tabs/tab.ts","webpack://E2/./src/elements/tabs/tab-container.ts","webpack://E2/./src/elements/tabs/tab-panel.ts","webpack://E2/./src/elements/toolbar/toolbar.ts","webpack://E2/./src/elements/toolbar/toolbar-button.ts","webpack://E2/./src/elements/toolbar/toolbar-menu.ts","webpack://E2/./src/elements/toolbar/toolbar-separator.ts","webpack://E2/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"E2\"] = factory();\n\telse\n\t\troot[\"E2\"] = factory();\n})(this, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Utility functions for editor elements\n */\n\n/**\n * Generate a unique ID for elements\n */\nexport function generateId(prefix = 'element'): string {\n  return `${prefix}-${Math.random().toString(36).substring(2, 9)}`;\n}\n\n/**\n * Dispatch a custom event from an element\n */\nexport function dispatchCustomEvent<T = any>(\n  element: HTMLElement,\n  eventName: string,\n  detail?: T,\n  options: CustomEventInit = {}\n): boolean {\n  const event = new CustomEvent(eventName, {\n    detail,\n    bubbles: true,\n    cancelable: true,\n    ...options,\n  });\n\n  return element.dispatchEvent(event);\n}\n\n/**\n * Add CSS to the document head if it doesn't already exist\n */\nexport function addGlobalCSS(css: string, id?: string): void {\n  if (id && document.getElementById(id)) {\n    return; // CSS already added\n  }\n\n  const style = document.createElement('style');\n  if (id) {\n    style.id = id;\n  }\n  style.textContent = css;\n  document.head.appendChild(style);\n}\n\n/**\n * Create a template element with the given HTML\n */\nexport function createTemplate(html: string): HTMLTemplateElement {\n  const template = document.createElement('template');\n  template.innerHTML = html.trim();\n  return template;\n}\n\n/**\n * Get or create a shadow root for an element\n */\nexport function getShadowRoot(\n  element: HTMLElement,\n  options: ShadowRootInit = { mode: 'open' }\n): ShadowRoot {\n  return element.shadowRoot || element.attachShadow(options);\n}\n\n/**\n * Debounce function to limit how often a function can be called\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: number;\n\n  return function executedFunction(...args: Parameters<T>) {\n    const later = () => {\n      clearTimeout(timeout);\n      func(...args);\n    };\n\n    clearTimeout(timeout);\n    timeout = window.setTimeout(later, wait);\n  };\n}\n\n/**\n * Check if an element is visible in the viewport\n */\nexport function isElementVisible(element: HTMLElement): boolean {\n  const rect = element.getBoundingClientRect();\n  return (\n    rect.top >= 0 &&\n    rect.left >= 0 &&\n    rect.bottom <=\n      (window.innerHeight || document.documentElement.clientHeight) &&\n    rect.right <= (window.innerWidth || document.documentElement.clientWidth)\n  );\n}\n\n/**\n * Apply theme class to an element\n */\nexport function applyTheme(\n  element: HTMLElement,\n  theme: 'light' | 'dark' | 'auto'\n): void {\n  element.classList.remove('theme-light', 'theme-dark', 'theme-auto');\n  element.classList.add(`theme-${theme}`);\n}\n","/**\n * Context Menu Element\n * A popup menu that appears on right-click or programmatic trigger\n */\n\nimport {\n  ContextMenuHideEvent,\n  ContextMenuShowEvent,\n  EditorElementProperties,\n  Theme,\n} from '../../types';\nimport {\n  applyTheme,\n  dispatchCustomEvent,\n  generateId,\n  getShadowRoot,\n} from '../../utils';\n\nexport class ContextMenu\n  extends HTMLElement\n  implements EditorElementProperties\n{\n  private _theme: Theme = 'auto';\n  private _visible: boolean = false;\n  private _justShown: boolean = false;\n\n  static get observedAttributes(): string[] {\n    return ['theme', 'disabled', 'target'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n    this.bindEvents();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          position: fixed;\n          z-index: 9999;\n          display: none;\n          min-width: 180px;\n          background: var(--context-menu-bg, #ffffff);\n          border: 1px solid var(--context-menu-border, #d0d0d0);\n          border-radius: 4px;\n          box-shadow: var(--context-menu-shadow, 0 2px 8px rgba(0, 0, 0, 0.15));\n          padding: 4px 0;\n          font-family: inherit;\n          font-size: 14px;\n        }\n\n        :host([visible]) {\n          display: block;\n        }\n\n        :host([disabled]) {\n          opacity: 0.6;\n          pointer-events: none;\n        }\n\n        /* Light theme */\n        :host(.theme-light) {\n          background: var(--context-menu-bg-light, #ffffff);\n          border-color: var(--context-menu-border-light, #d0d0d0);\n          box-shadow: var(--context-menu-shadow-light, 0 2px 8px rgba(0, 0, 0, 0.15));\n        }\n\n        /* Dark theme */\n        :host(.theme-dark) {\n          background: var(--context-menu-bg-dark, #2a2a2a);\n          border-color: var(--context-menu-border-dark, #444444);\n          box-shadow: var(--context-menu-shadow-dark, 0 2px 8px rgba(0, 0, 0, 0.4));\n        }\n\n        /* Auto theme - follows system preference */\n        @media (prefers-color-scheme: dark) {\n          :host(.theme-auto) {\n            background: var(--context-menu-bg-dark, #2a2a2a);\n            border-color: var(--context-menu-border-dark, #444444);\n            box-shadow: var(--context-menu-shadow-dark, 0 2px 8px rgba(0, 0, 0, 0.4));\n          }\n        }\n\n        ::slotted(*) {\n          display: block;\n        }\n      </style>\n      <slot></slot>\n    `;\n  }\n\n  private bindEvents(): void {\n    // Close menu when clicking outside\n    document.addEventListener('click', this.handleDocumentClick.bind(this));\n\n    // Close menu on escape key\n    document.addEventListener('keydown', this.handleKeyDown.bind(this));\n\n    // Handle window resize\n    window.addEventListener('resize', this.handleWindowResize.bind(this));\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('context-menu');\n    }\n    this.applyTheme(this._theme);\n    this.setupTargetListeners();\n  }\n\n  disconnectedCallback(): void {\n    this.removeTargetListeners();\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string,\n    newValue: string\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'theme':\n        this._theme = (newValue as Theme) || 'auto';\n        this.applyTheme(this._theme);\n        break;\n      case 'target':\n        this.removeTargetListeners();\n        this.setupTargetListeners();\n        break;\n      case 'disabled':\n        if (newValue !== null && this._visible) {\n          this.hide();\n        }\n        break;\n    }\n  }\n\n  private boundContextMenuHandler = this.handleContextMenu.bind(this);\n\n  private setupTargetListeners(): void {\n    const targetSelector = this.getAttribute('target');\n    if (!targetSelector) return;\n\n    const targets = document.querySelectorAll(targetSelector);\n    targets.forEach(target => {\n      target.addEventListener('contextmenu', this.boundContextMenuHandler);\n    });\n  }\n\n  private removeTargetListeners(): void {\n    const targetSelector = this.getAttribute('target');\n    if (!targetSelector) return;\n\n    const targets = document.querySelectorAll(targetSelector);\n    targets.forEach(target => {\n      target.removeEventListener('contextmenu', this.boundContextMenuHandler);\n    });\n  }\n\n  private handleContextMenu(event: Event): void {\n    if (this.disabled) return;\n\n    const mouseEvent = event as MouseEvent;\n    mouseEvent.preventDefault();\n    mouseEvent.stopPropagation();\n\n    const trigger = mouseEvent.currentTarget as HTMLElement;\n    this.show(mouseEvent.clientX, mouseEvent.clientY, trigger);\n  }\n\n  private handleDocumentClick(event: MouseEvent): void {\n    if (!this._visible) return;\n\n    // Ignore the click that just triggered the menu to show\n    if (this._justShown) {\n      this._justShown = false;\n      return;\n    }\n\n    const target = event.target as Node;\n    if (!this.contains(target) && !this.shadowRoot?.contains(target)) {\n      this.hide();\n    }\n  }\n\n  private handleKeyDown(event: KeyboardEvent): void {\n    if (!this._visible) return;\n\n    switch (event.key) {\n      case 'Escape':\n        event.preventDefault();\n        this.hide();\n        break;\n      case 'ArrowDown':\n        event.preventDefault();\n        this.focusNextItem();\n        break;\n      case 'ArrowUp':\n        event.preventDefault();\n        this.focusPreviousItem();\n        break;\n      case 'Enter':\n      case ' ':\n        event.preventDefault();\n        this.activateFocusedItem();\n        break;\n    }\n  }\n\n  private handleWindowResize(): void {\n    if (this._visible) {\n      this.hide();\n    }\n  }\n\n  private focusNextItem(): void {\n    const items = this.querySelectorAll('e2-context-menu-item:not([disabled])');\n    const currentIndex = Array.from(items).findIndex(\n      item => item === document.activeElement || item.shadowRoot?.activeElement\n    );\n\n    const nextIndex = currentIndex < items.length - 1 ? currentIndex + 1 : 0;\n    (items[nextIndex] as HTMLElement).focus();\n  }\n\n  private focusPreviousItem(): void {\n    const items = this.querySelectorAll('e2-context-menu-item:not([disabled])');\n    const currentIndex = Array.from(items).findIndex(\n      item => item === document.activeElement || item.shadowRoot?.activeElement\n    );\n\n    const prevIndex = currentIndex > 0 ? currentIndex - 1 : items.length - 1;\n    (items[prevIndex] as HTMLElement).focus();\n  }\n\n  private activateFocusedItem(): void {\n    const focused = document.activeElement;\n    if (focused && focused.tagName === 'e2-context-menu-ITEM') {\n      (focused as any).click();\n    }\n  }\n\n  // Public API\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this._theme = value;\n    this.setAttribute('theme', value);\n  }\n\n  get disabled(): boolean {\n    return this.hasAttribute('disabled');\n  }\n\n  set disabled(value: boolean) {\n    if (value) {\n      this.setAttribute('disabled', '');\n    } else {\n      this.removeAttribute('disabled');\n    }\n  }\n\n  get visible(): boolean {\n    return this._visible;\n  }\n\n  get target(): string | null {\n    return this.getAttribute('target');\n  }\n\n  set target(value: string | null) {\n    if (value) {\n      this.setAttribute('target', value);\n    } else {\n      this.removeAttribute('target');\n    }\n  }\n\n  show(x: number, y: number, trigger?: HTMLElement): void {\n    if (this.disabled) return;\n\n    this._visible = true;\n    this.setAttribute('visible', '');\n\n    // Position the menu\n    this.style.left = `${x}px`;\n    this.style.top = `${y}px`;\n\n    // Ensure menu stays within viewport\n    this.adjustPosition();\n\n    // Set the flag to prevent immediate hiding, reset it after a short delay\n    this._justShown = true;\n    setTimeout(() => {\n      this._justShown = false;\n    }, 50);\n\n    // Ensure all child items have the correct theme\n    this.applyTheme(this._theme);\n\n    // Focus first item\n    requestAnimationFrame(() => {\n      const firstItem = this.querySelector(\n        'e2-context-menu-item:not([disabled])'\n      ) as HTMLElement;\n      if (firstItem) {\n        firstItem.focus();\n      }\n    });\n\n    // Dispatch show event\n    dispatchCustomEvent<ContextMenuShowEvent['detail']>(\n      this,\n      'context-menu-show',\n      {\n        menuId: this.id,\n        menu: this,\n        x,\n        y,\n        trigger: trigger || this,\n      }\n    );\n  }\n\n  hide(): void {\n    if (!this._visible) return;\n\n    this._visible = false;\n    this.removeAttribute('visible');\n\n    // Dispatch hide event\n    dispatchCustomEvent<ContextMenuHideEvent['detail']>(\n      this,\n      'context-menu-hide',\n      {\n        menuId: this.id,\n        menu: this,\n      }\n    );\n  }\n\n  private adjustPosition(): void {\n    const rect = this.getBoundingClientRect();\n    const viewportWidth = window.innerWidth;\n    const viewportHeight = window.innerHeight;\n\n    let left = parseInt(this.style.left);\n    let top = parseInt(this.style.top);\n\n    // Adjust horizontal position\n    if (left + rect.width > viewportWidth) {\n      left = viewportWidth - rect.width - 10;\n    }\n    if (left < 10) {\n      left = 10;\n    }\n\n    // Adjust vertical position\n    if (top + rect.height > viewportHeight) {\n      top = viewportHeight - rect.height - 10;\n    }\n    if (top < 10) {\n      top = 10;\n    }\n\n    this.style.left = `${left}px`;\n    this.style.top = `${top}px`;\n  }\n\n  applyTheme(theme: Theme): void {\n    this._theme = theme;\n    applyTheme(this, theme);\n\n    // Apply theme to all child context menu items and separators\n    const childItems = this.querySelectorAll(\n      'e2-context-menu-item, e2-context-menu-separator'\n    );\n    childItems.forEach(child => {\n      if (typeof (child as any).applyTheme === 'function') {\n        (child as any).applyTheme(theme);\n      }\n    });\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-context-menu')) {\n  customElements.define('e2-context-menu', ContextMenu);\n}\n","/**\n * Context Menu Item Element\n * A clickable item within a context menu\n */\n\nimport {\n  ContextMenuItemClickEvent,\n  EditorElementProperties,\n  Theme,\n} from '../../types';\nimport {\n  applyTheme,\n  dispatchCustomEvent,\n  generateId,\n  getShadowRoot,\n} from '../../utils';\n\nexport class ContextMenuItem\n  extends HTMLElement\n  implements EditorElementProperties\n{\n  private _theme: Theme = 'auto';\n\n  static get observedAttributes(): string[] {\n    return ['label', 'icon', 'theme', 'disabled', 'value', 'shortcut'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: block;\n        }\n\n        .item {\n          display: flex;\n          align-items: center;\n          padding: 8px 16px;\n          cursor: pointer;\n          color: var(--context-menu-item-color, #333);\n          background: transparent;\n          border: none;\n          width: 100%;\n          text-align: left;\n          font-family: inherit;\n          font-size: inherit;\n          line-height: 1.4;\n          transition: background-color 0.15s ease;\n          outline: none;\n        }\n\n        .item:hover,\n        .item:focus {\n          background: var(--context-menu-item-hover-bg, rgba(0, 0, 0, 0.1));\n        }\n\n        .item:disabled {\n          opacity: 0.6;\n          cursor: not-allowed;\n        }\n\n        .item:disabled:hover {\n          background: transparent;\n        }\n\n        .icon {\n          width: 16px;\n          height: 16px;\n          margin-right: 8px;\n          flex-shrink: 0;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n        }\n\n        .icon:empty {\n          margin-right: 0;\n          width: 0;\n        }\n\n        .content {\n          flex: 1;\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          min-width: 0;\n        }\n\n        .label {\n          flex: 1;\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n        }\n\n        .shortcut {\n          color: var(--context-menu-item-shortcut-color, #666);\n          font-size: 0.85em;\n          margin-left: 12px;\n          flex-shrink: 0;\n        }\n\n        /* Light theme */\n        :host(.theme-light) .item {\n          color: var(--context-menu-item-color-light, #333);\n        }\n\n        :host(.theme-light) .item:hover,\n        :host(.theme-light) .item:focus {\n          background: var(--context-menu-item-hover-bg-light, rgba(0, 0, 0, 0.1));\n        }\n\n        :host(.theme-light) .shortcut {\n          color: var(--context-menu-item-shortcut-color-light, #666);\n        }\n\n        /* Dark theme */\n        :host(.theme-dark) .item {\n          color: var(--context-menu-item-color-dark, #fff);\n        }\n\n        :host(.theme-dark) .item:hover,\n        :host(.theme-dark) .item:focus {\n          background: var(--context-menu-item-hover-bg-dark, rgba(255, 255, 255, 0.1));\n        }\n\n        :host(.theme-dark) .shortcut {\n          color: var(--context-menu-item-shortcut-color-dark, #aaa);\n        }\n\n        /* Auto theme - follows system preference */\n        @media (prefers-color-scheme: dark) {\n          :host(.theme-auto) .item {\n            color: var(--context-menu-item-color-dark, #fff);\n          }\n\n          :host(.theme-auto) .item:hover,\n          :host(.theme-auto) .item:focus {\n            background: var(--context-menu-item-hover-bg-dark, rgba(255, 255, 255, 0.1));\n          }\n\n          :host(.theme-auto) .shortcut {\n            color: var(--context-menu-item-shortcut-color-dark, #aaa);\n          }\n        }\n      </style>\n      <button class=\"item\" type=\"button\">\n        <span class=\"icon\"></span>\n        <div class=\"content\">\n          <span class=\"label\"></span>\n          <span class=\"shortcut\"></span>\n        </div>\n      </button>\n    `;\n\n    const button = shadowRoot.querySelector('.item')!;\n    button.addEventListener('click', this.handleClick.bind(this));\n    button.addEventListener('keydown', (event: Event) =>\n      this.handleKeyDown(event as KeyboardEvent)\n    );\n\n    // Make the element focusable\n    this.tabIndex = 0;\n    this.addEventListener('focus', this.handleFocus.bind(this));\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('context-menu-item');\n    }\n    this.applyTheme(this._theme);\n    this.updateContent();\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string,\n    newValue: string\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'theme':\n        this._theme = (newValue as Theme) || 'auto';\n        this.applyTheme(this._theme);\n        break;\n      case 'label':\n      case 'icon':\n      case 'shortcut':\n        this.updateContent();\n        break;\n      case 'disabled':\n        this.updateDisabledState();\n        break;\n    }\n  }\n\n  private updateContent(): void {\n    if (!this.shadowRoot) return;\n\n    const iconElement = this.shadowRoot.querySelector('.icon') as HTMLElement;\n    const labelElement = this.shadowRoot.querySelector('.label') as HTMLElement;\n    const shortcutElement = this.shadowRoot.querySelector(\n      '.shortcut'\n    ) as HTMLElement;\n\n    // Update icon\n    const icon = this.getAttribute('icon');\n    if (icon) {\n      iconElement.textContent = icon;\n      iconElement.style.display = 'flex';\n    } else {\n      iconElement.textContent = '';\n      iconElement.style.display = 'none';\n    }\n\n    // Update label\n    const label = this.getAttribute('label') || this.textContent?.trim() || '';\n    labelElement.textContent = label;\n\n    // Update shortcut\n    const shortcut = this.getAttribute('shortcut');\n    if (shortcut) {\n      shortcutElement.textContent = shortcut;\n      shortcutElement.style.display = 'block';\n    } else {\n      shortcutElement.textContent = '';\n      shortcutElement.style.display = 'none';\n    }\n  }\n\n  private updateDisabledState(): void {\n    if (!this.shadowRoot) return;\n\n    const button = this.shadowRoot.querySelector('.item') as HTMLButtonElement;\n    button.disabled = this.disabled;\n  }\n\n  private handleClick(event: Event): void {\n    if (this.disabled) return;\n\n    event.stopPropagation();\n\n    // Find the parent context menu\n    const contextMenu = this.closest('e2-context-menu');\n\n    // Dispatch item click event\n    dispatchCustomEvent<ContextMenuItemClickEvent['detail']>(\n      this,\n      'context-menu-item-click',\n      {\n        itemId: this.id,\n        item: this,\n        menuId: contextMenu?.id || '',\n        menu: contextMenu as HTMLElement,\n        value: this.value,\n      }\n    );\n\n    // Hide the context menu\n    if (contextMenu && typeof (contextMenu as any).hide === 'function') {\n      (contextMenu as any).hide();\n    }\n  }\n\n  private handleKeyDown(event: KeyboardEvent): void {\n    if (this.disabled) return;\n\n    // Let the parent context menu handle navigation keys\n    if (['ArrowDown', 'ArrowUp', 'Escape'].includes(event.key)) {\n      return;\n    }\n\n    if (event.key === 'Enter' || event.key === ' ') {\n      event.preventDefault();\n      this.handleClick(event);\n    }\n  }\n\n  private handleFocus(): void {\n    if (!this.shadowRoot) return;\n\n    const button = this.shadowRoot.querySelector('.item') as HTMLButtonElement;\n    button.focus();\n  }\n\n  // Public API\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this._theme = value;\n    this.setAttribute('theme', value);\n  }\n\n  get disabled(): boolean {\n    return this.hasAttribute('disabled');\n  }\n\n  set disabled(value: boolean) {\n    if (value) {\n      this.setAttribute('disabled', '');\n    } else {\n      this.removeAttribute('disabled');\n    }\n  }\n\n  get label(): string {\n    return this.getAttribute('label') || '';\n  }\n\n  set label(value: string) {\n    this.setAttribute('label', value);\n  }\n\n  get icon(): string {\n    return this.getAttribute('icon') || '';\n  }\n\n  set icon(value: string) {\n    if (value) {\n      this.setAttribute('icon', value);\n    } else {\n      this.removeAttribute('icon');\n    }\n  }\n\n  get value(): string {\n    return this.getAttribute('value') || this.label;\n  }\n\n  set value(value: string) {\n    this.setAttribute('value', value);\n  }\n\n  get shortcut(): string {\n    return this.getAttribute('shortcut') || '';\n  }\n\n  set shortcut(value: string) {\n    if (value) {\n      this.setAttribute('shortcut', value);\n    } else {\n      this.removeAttribute('shortcut');\n    }\n  }\n\n  click(): void {\n    if (!this.disabled) {\n      this.handleClick(new Event('click'));\n    }\n  }\n\n  focus(): void {\n    super.focus();\n    this.handleFocus();\n  }\n\n  applyTheme(theme: Theme): void {\n    this._theme = theme;\n    applyTheme(this, theme);\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-context-menu-item')) {\n  customElements.define('e2-context-menu-item', ContextMenuItem);\n}\n","/**\n * Context Menu Separator Element\n * A visual separator line between context menu items\n */\n\nimport { EditorElementProperties, Theme } from '../../types';\nimport { applyTheme, getShadowRoot } from '../../utils';\n\nexport class ContextMenuSeparator\n  extends HTMLElement\n  implements EditorElementProperties\n{\n  private _theme: Theme = 'auto';\n\n  static get observedAttributes(): string[] {\n    return ['theme'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: block;\n          margin: 4px 0;\n        }\n\n        .separator {\n          height: 1px;\n          background: var(--context-menu-separator-color, #e0e0e0);\n          margin: 0 8px;\n        }\n\n        /* Light theme */\n        :host(.theme-light) .separator {\n          background: var(--context-menu-separator-color-light, #e0e0e0);\n        }\n\n        /* Dark theme */\n        :host(.theme-dark) .separator {\n          background: var(--context-menu-separator-color-dark, #555);\n        }\n\n        /* Auto theme - follows system preference */\n        @media (prefers-color-scheme: dark) {\n          :host(.theme-auto) .separator {\n            background: var(--context-menu-separator-color-dark, #555);\n          }\n        }\n      </style>\n      <div class=\"separator\"></div>\n    `;\n  }\n\n  connectedCallback(): void {\n    this.applyTheme(this._theme);\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string,\n    newValue: string\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'theme':\n        this._theme = (newValue as Theme) || 'auto';\n        this.applyTheme(this._theme);\n        break;\n    }\n  }\n\n  // Public API\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this._theme = value;\n    this.setAttribute('theme', value);\n  }\n\n  get disabled(): boolean {\n    return false; // Separators cannot be disabled\n  }\n\n  set disabled(_value: boolean) {\n    // Separators cannot be disabled\n  }\n\n  applyTheme(theme: Theme): void {\n    this._theme = theme;\n    applyTheme(this, theme);\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-context-menu-separator')) {\n  customElements.define('e2-context-menu-separator', ContextMenuSeparator);\n}\n","/**\n * Alert Dialog Element\n * A specialized dialog for displaying messages and notifications\n */\n\nimport { AlertType, EditorElementProperties, Theme } from '../../types';\nimport {\n  applyTheme,\n  dispatchCustomEvent,\n  generateId,\n  getShadowRoot,\n} from '../../utils';\n\nexport class AlertDialogElement\n  extends HTMLElement\n  implements EditorElementProperties\n{\n  private _theme: Theme = 'auto';\n  private _nativeDialog: HTMLDialogElement | null = null;\n  private _resolvePromise: ((value: void) => void) | null = null;\n  private _rejectPromise: ((reason?: any) => void) | null = null;\n\n  static get observedAttributes(): string[] {\n    return ['title', 'message', 'button-text', 'theme', 'type'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          --dialog-bg: #ffffff;\n          --dialog-border: #e0e0e0;\n          --dialog-shadow: rgba(0, 0, 0, 0.25);\n          --dialog-backdrop: rgba(0, 0, 0, 0.5);\n          --text-color: #333333;\n          --text-secondary: #666666;\n          --button-bg: #007bff;\n          --button-hover: #0056b3;\n          --button-active: #004085;\n          --icon-info: #17a2b8;\n          --icon-success: #28a745;\n          --icon-warning: #ffc107;\n          --icon-error: #dc3545;\n\n          display: block;\n        }\n\n        :host(.theme-dark) {\n          --dialog-bg: #2d2d2d;\n          --dialog-border: #555555;\n          --dialog-shadow: rgba(0, 0, 0, 0.5);\n          --dialog-backdrop: rgba(0, 0, 0, 0.7);\n          --text-color: #ffffff;\n          --text-secondary: #cccccc;\n          --button-bg: #0d6efd;\n          --button-hover: #0b5ed7;\n          --button-active: #0a58ca;\n          --icon-info: #0dcaf0;\n          --icon-success: #198754;\n          --icon-warning: #fd7e14;\n          --icon-error: #dc3545;\n        }\n\n        dialog {\n          border: 1px solid var(--dialog-border);\n          border-radius: 8px;\n          padding: 0;\n          background: var(--dialog-bg);\n          color: var(--text-color);\n          font-family: var(--font-family, system-ui, sans-serif);\n          font-size: var(--font-size, 14px);\n          box-shadow: 0 8px 24px var(--dialog-shadow);\n          min-width: 320px;\n          max-width: 500px;\n          animation: dialog-fade-in 0.2s ease-out;\n        }\n\n        dialog::backdrop {\n          background: var(--dialog-backdrop);\n          animation: backdrop-fade-in 0.2s ease-out;\n        }\n\n        @keyframes dialog-fade-in {\n          from {\n            opacity: 0;\n            transform: scale(0.9) translateY(-20px);\n          }\n          to {\n            opacity: 1;\n            transform: scale(1) translateY(0);\n          }\n        }\n\n        @keyframes backdrop-fade-in {\n          from { opacity: 0; }\n          to { opacity: 1; }\n        }\n\n        .dialog-content {\n          padding: 24px;\n        }\n\n        .dialog-header {\n          display: flex;\n          align-items: flex-start;\n          gap: 12px;\n          margin-bottom: 16px;\n        }\n\n        .dialog-icon {\n          flex-shrink: 0;\n          width: 24px;\n          height: 24px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          font-size: 20px;\n          margin-top: 2px;\n        }\n\n        .dialog-icon.type-info {\n          color: var(--icon-info);\n        }\n\n        .dialog-icon.type-success {\n          color: var(--icon-success);\n        }\n\n        .dialog-icon.type-warning {\n          color: var(--icon-warning);\n        }\n\n        .dialog-icon.type-error {\n          color: var(--icon-error);\n        }\n\n        .dialog-text {\n          flex: 1;\n        }\n\n        .dialog-title {\n          font-size: 18px;\n          font-weight: 600;\n          margin: 0 0 8px 0;\n          color: var(--text-color);\n        }\n\n        .dialog-message {\n          color: var(--text-secondary);\n          line-height: 1.5;\n          margin: 0;\n          white-space: pre-wrap;\n        }\n\n        .dialog-buttons {\n          display: flex;\n          justify-content: center;\n          margin-top: 24px;\n        }\n\n        .dialog-button {\n          padding: 10px 24px;\n          border: none;\n          border-radius: 4px;\n          background: var(--button-bg);\n          color: white;\n          font-family: inherit;\n          font-size: 14px;\n          font-weight: 500;\n          cursor: pointer;\n          transition: all 0.15s ease;\n          min-width: 100px;\n        }\n\n        .dialog-button:hover {\n          background: var(--button-hover);\n        }\n\n        .dialog-button:active {\n          background: var(--button-active);\n        }\n\n        .dialog-button:focus {\n          outline: 2px solid var(--button-bg);\n          outline-offset: 2px;\n        }\n\n        :host([hidden]) {\n          display: none !important;\n        }\n      </style>\n\n      <dialog part=\"dialog\">\n        <div class=\"dialog-content\" part=\"content\">\n          <div class=\"dialog-header\" part=\"header\">\n            <div class=\"dialog-icon type-info\" part=\"icon\">ℹ️</div>\n            <div class=\"dialog-text\" part=\"text\">\n              <h3 class=\"dialog-title\" part=\"title\">Information</h3>\n              <p class=\"dialog-message\" part=\"message\">This is an alert message.</p>\n            </div>\n          </div>\n\n          <div class=\"dialog-buttons\" part=\"buttons\">\n            <button class=\"dialog-button\" part=\"button\" type=\"button\">\n              OK\n            </button>\n          </div>\n        </div>\n      </dialog>\n    `;\n\n    this._nativeDialog = shadowRoot.querySelector('dialog');\n    const button = shadowRoot.querySelector('.dialog-button');\n\n    // Set up event listeners\n    if (this._nativeDialog) {\n      this._nativeDialog.addEventListener('close', this.handleClose.bind(this));\n      this._nativeDialog.addEventListener(\n        'cancel',\n        this.handleCancel.bind(this)\n      );\n    }\n\n    if (button) {\n      button.addEventListener('click', () => this.close());\n    }\n\n    // Apply initial theme\n    this.applyTheme(this._theme);\n    this.updateContent();\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('alert-dialog');\n    }\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string | null,\n    newValue: string | null\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'title':\n      case 'message':\n      case 'button-text':\n      case 'type':\n        this.updateContent();\n        break;\n      case 'theme':\n        this._theme = (newValue as Theme) || 'auto';\n        this.applyTheme(this._theme);\n        break;\n    }\n  }\n\n  private updateContent(): void {\n    const titleElement = this.shadowRoot?.querySelector('.dialog-title');\n    const messageElement = this.shadowRoot?.querySelector('.dialog-message');\n    const buttonElement = this.shadowRoot?.querySelector('.dialog-button');\n    const iconElement = this.shadowRoot?.querySelector('.dialog-icon');\n\n    if (titleElement) {\n      titleElement.textContent =\n        this.getAttribute('title') || this.getDefaultTitle();\n    }\n\n    if (messageElement) {\n      messageElement.textContent =\n        this.getAttribute('message') || 'This is an alert message.';\n    }\n\n    if (buttonElement) {\n      buttonElement.textContent = this.getAttribute('button-text') || 'OK';\n    }\n\n    if (iconElement) {\n      const type = this.getAttribute('type') || 'info';\n      iconElement.className = `dialog-icon type-${type}`;\n      iconElement.textContent = this.getIconForType(type);\n    }\n  }\n\n  private getDefaultTitle(): string {\n    const type = this.getAttribute('type') || 'info';\n    switch (type) {\n      case 'success':\n        return 'Success';\n      case 'warning':\n        return 'Warning';\n      case 'error':\n        return 'Error';\n      default:\n        return 'Information';\n    }\n  }\n\n  private getIconForType(type: string): string {\n    switch (type) {\n      case 'success':\n        return '✅';\n      case 'warning':\n        return '⚠️';\n      case 'error':\n        return '❌';\n      default:\n        return 'ℹ️';\n    }\n  }\n\n  private handleClose(): void {\n    if (this._resolvePromise) {\n      this._resolvePromise();\n      this._resolvePromise = null;\n      this._rejectPromise = null;\n    }\n\n    dispatchCustomEvent(this, 'alert-dialog-close', {\n      dialogId: this.id,\n      dialog: this,\n    });\n  }\n\n  private handleCancel(event: Event): void {\n    const cancelable = dispatchCustomEvent(this, 'alert-dialog-cancel', {\n      dialogId: this.id,\n      dialog: this,\n    });\n\n    if (!cancelable) {\n      event.preventDefault();\n    } else {\n      this.close();\n    }\n  }\n\n  private close(): void {\n    if (this._resolvePromise) {\n      this._resolvePromise();\n      this._resolvePromise = null;\n      this._rejectPromise = null;\n    }\n\n    dispatchCustomEvent(this, 'alert-dialog-dismiss', {\n      dialogId: this.id,\n      dialog: this,\n    });\n\n    this._nativeDialog?.close();\n  }\n\n  // Public API\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this.setAttribute('theme', value);\n  }\n\n  get title(): string {\n    return this.getAttribute('title') || this.getDefaultTitle();\n  }\n\n  set title(value: string) {\n    this.setAttribute('title', value);\n  }\n\n  get message(): string {\n    return this.getAttribute('message') || 'This is an alert message.';\n  }\n\n  set message(value: string) {\n    this.setAttribute('message', value);\n  }\n\n  get buttonText(): string {\n    return this.getAttribute('button-text') || 'OK';\n  }\n\n  set buttonText(value: string) {\n    this.setAttribute('button-text', value);\n  }\n\n  get type(): AlertType {\n    return (this.getAttribute('type') || 'info') as AlertType;\n  }\n\n  set type(value: AlertType) {\n    this.setAttribute('type', value);\n  }\n\n  get open(): boolean {\n    return this._nativeDialog?.open || false;\n  }\n\n  /**\n   * Show the alert dialog and return a promise that resolves when dismissed\n   */\n  public show(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (this._resolvePromise) {\n        // Already showing, reject the previous promise\n        this._rejectPromise?.(\n          new Error('Dialog was replaced by another show() call')\n        );\n      }\n\n      this._resolvePromise = resolve;\n      this._rejectPromise = reject;\n\n      dispatchCustomEvent(this, 'alert-dialog-show', {\n        dialogId: this.id,\n        dialog: this,\n      });\n\n      this._nativeDialog?.showModal();\n    });\n  }\n\n  public applyTheme(theme: Theme): void {\n    this._theme = theme;\n    applyTheme(this, theme);\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-alert')) {\n  customElements.define('e2-alert', AlertDialogElement);\n}\n","/**\n * Confirm Dialog Element\n * A specialized dialog for yes/no confirmations with promise-based API\n */\n\nimport { EditorElementProperties, Theme } from '../../types';\nimport {\n  applyTheme,\n  dispatchCustomEvent,\n  generateId,\n  getShadowRoot,\n} from '../../utils';\n\nexport class ConfirmDialogElement\n  extends HTMLElement\n  implements EditorElementProperties\n{\n  private _theme: Theme = 'auto';\n  private _nativeDialog: HTMLDialogElement | null = null;\n  private _resolvePromise: ((value: boolean) => void) | null = null;\n  private _rejectPromise: ((reason?: any) => void) | null = null;\n\n  static get observedAttributes(): string[] {\n    return [\n      'title',\n      'message',\n      'confirm-text',\n      'cancel-text',\n      'theme',\n      'danger',\n    ];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          --dialog-bg: #ffffff;\n          --dialog-border: #e0e0e0;\n          --dialog-shadow: rgba(0, 0, 0, 0.25);\n          --dialog-backdrop: rgba(0, 0, 0, 0.5);\n          --text-color: #333333;\n          --text-secondary: #666666;\n          --button-bg: #f8f9fa;\n          --button-border: #e0e0e0;\n          --button-hover: #e9ecef;\n          --button-active: #dee2e6;\n          --confirm-bg: #007bff;\n          --confirm-hover: #0056b3;\n          --confirm-active: #004085;\n          --danger-bg: #dc3545;\n          --danger-hover: #c82333;\n          --danger-active: #bd2130;\n\n          display: block;\n        }\n\n        :host(.theme-dark) {\n          --dialog-bg: #2d2d2d;\n          --dialog-border: #555555;\n          --dialog-shadow: rgba(0, 0, 0, 0.5);\n          --dialog-backdrop: rgba(0, 0, 0, 0.7);\n          --text-color: #ffffff;\n          --text-secondary: #cccccc;\n          --button-bg: #404040;\n          --button-border: #555555;\n          --button-hover: #4a4a4a;\n          --button-active: #555555;\n          --confirm-bg: #0d6efd;\n          --confirm-hover: #0b5ed7;\n          --confirm-active: #0a58ca;\n          --danger-bg: #dc3545;\n          --danger-hover: #bb2d3b;\n          --danger-active: #b02a37;\n        }\n\n        dialog {\n          border: 1px solid var(--dialog-border);\n          border-radius: 8px;\n          padding: 0;\n          background: var(--dialog-bg);\n          color: var(--text-color);\n          font-family: var(--font-family, system-ui, sans-serif);\n          font-size: var(--font-size, 14px);\n          box-shadow: 0 8px 24px var(--dialog-shadow);\n          min-width: 320px;\n          max-width: 500px;\n          animation: dialog-fade-in 0.2s ease-out;\n        }\n\n        dialog::backdrop {\n          background: var(--dialog-backdrop);\n          animation: backdrop-fade-in 0.2s ease-out;\n        }\n\n        @keyframes dialog-fade-in {\n          from {\n            opacity: 0;\n            transform: scale(0.9) translateY(-20px);\n          }\n          to {\n            opacity: 1;\n            transform: scale(1) translateY(0);\n          }\n        }\n\n        @keyframes backdrop-fade-in {\n          from { opacity: 0; }\n          to { opacity: 1; }\n        }\n\n        .dialog-content {\n          padding: 24px;\n        }\n\n        .dialog-title {\n          font-size: 18px;\n          font-weight: 600;\n          margin: 0 0 16px 0;\n          color: var(--text-color);\n        }\n\n        .dialog-message {\n          color: var(--text-secondary);\n          line-height: 1.5;\n          margin: 0 0 24px 0;\n        }\n\n        .dialog-buttons {\n          display: flex;\n          justify-content: flex-end;\n          gap: 12px;\n        }\n\n        .dialog-button {\n          padding: 8px 16px;\n          border: 1px solid var(--button-border);\n          border-radius: 4px;\n          background: var(--button-bg);\n          color: var(--text-color);\n          font-family: inherit;\n          font-size: 14px;\n          cursor: pointer;\n          transition: all 0.15s ease;\n          min-width: 80px;\n        }\n\n        .dialog-button:hover {\n          background: var(--button-hover);\n        }\n\n        .dialog-button:active {\n          background: var(--button-active);\n        }\n\n        .dialog-button:focus {\n          outline: 2px solid var(--confirm-bg);\n          outline-offset: 2px;\n        }\n\n        .confirm-button {\n          background: var(--confirm-bg);\n          color: white;\n          border-color: var(--confirm-bg);\n        }\n\n        .confirm-button:hover {\n          background: var(--confirm-hover);\n          border-color: var(--confirm-hover);\n        }\n\n        .confirm-button:active {\n          background: var(--confirm-active);\n          border-color: var(--confirm-active);\n        }\n\n        :host([danger]) .confirm-button {\n          background: var(--danger-bg);\n          border-color: var(--danger-bg);\n        }\n\n        :host([danger]) .confirm-button:hover {\n          background: var(--danger-hover);\n          border-color: var(--danger-hover);\n        }\n\n        :host([danger]) .confirm-button:active {\n          background: var(--danger-active);\n          border-color: var(--danger-active);\n        }\n\n        :host([danger]) .confirm-button:focus {\n          outline-color: var(--danger-bg);\n        }\n\n        :host([hidden]) {\n          display: none !important;\n        }\n      </style>\n\n      <dialog part=\"dialog\">\n        <div class=\"dialog-content\" part=\"content\">\n          <h3 class=\"dialog-title\" part=\"title\">Confirm</h3>\n          <p class=\"dialog-message\" part=\"message\">Are you sure?</p>\n\n          <div class=\"dialog-buttons\" part=\"buttons\">\n            <button class=\"dialog-button cancel-button\" part=\"cancel-button\" type=\"button\">\n              Cancel\n            </button>\n            <button class=\"dialog-button confirm-button\" part=\"confirm-button\" type=\"button\">\n              OK\n            </button>\n          </div>\n        </div>\n      </dialog>\n    `;\n\n    this._nativeDialog = shadowRoot.querySelector('dialog');\n    const confirmButton = shadowRoot.querySelector('.confirm-button');\n    const cancelButton = shadowRoot.querySelector('.cancel-button');\n\n    // Set up event listeners\n    if (this._nativeDialog) {\n      this._nativeDialog.addEventListener('close', this.handleClose.bind(this));\n      this._nativeDialog.addEventListener(\n        'cancel',\n        this.handleCancel.bind(this)\n      );\n    }\n\n    if (confirmButton) {\n      confirmButton.addEventListener('click', () => this.confirm());\n    }\n\n    if (cancelButton) {\n      cancelButton.addEventListener('click', () => this.cancel());\n    }\n\n    // Apply initial theme\n    this.applyTheme(this._theme);\n    this.updateContent();\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('confirm-dialog');\n    }\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string | null,\n    newValue: string | null\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'title':\n      case 'message':\n      case 'confirm-text':\n      case 'cancel-text':\n        this.updateContent();\n        break;\n      case 'theme':\n        this._theme = (newValue as Theme) || 'auto';\n        this.applyTheme(this._theme);\n        break;\n      case 'danger':\n        // Styling handled by CSS attribute selector\n        break;\n    }\n  }\n\n  private updateContent(): void {\n    const titleElement = this.shadowRoot?.querySelector('.dialog-title');\n    const messageElement = this.shadowRoot?.querySelector('.dialog-message');\n    const confirmButton = this.shadowRoot?.querySelector('.confirm-button');\n    const cancelButton = this.shadowRoot?.querySelector('.cancel-button');\n\n    if (titleElement) {\n      titleElement.textContent = this.getAttribute('title') || 'Confirm';\n    }\n\n    if (messageElement) {\n      messageElement.textContent =\n        this.getAttribute('message') || 'Are you sure?';\n    }\n\n    if (confirmButton) {\n      confirmButton.textContent = this.getAttribute('confirm-text') || 'OK';\n    }\n\n    if (cancelButton) {\n      cancelButton.textContent = this.getAttribute('cancel-text') || 'Cancel';\n    }\n  }\n\n  private handleClose(): void {\n    // If dialog was closed without explicit confirm/cancel, treat as cancel\n    if (this._resolvePromise) {\n      this._resolvePromise(false);\n      this._resolvePromise = null;\n      this._rejectPromise = null;\n    }\n\n    dispatchCustomEvent(this, 'confirm-dialog-close', {\n      dialogId: this.id,\n      dialog: this,\n      confirmed: false,\n    });\n  }\n\n  private handleCancel(event: Event): void {\n    const cancelable = dispatchCustomEvent(this, 'confirm-dialog-cancel', {\n      dialogId: this.id,\n      dialog: this,\n    });\n\n    if (!cancelable) {\n      event.preventDefault();\n    } else {\n      this.cancel();\n    }\n  }\n\n  private confirm(): void {\n    if (this._resolvePromise) {\n      this._resolvePromise(true);\n      this._resolvePromise = null;\n      this._rejectPromise = null;\n    }\n\n    dispatchCustomEvent(this, 'confirm-dialog-confirm', {\n      dialogId: this.id,\n      dialog: this,\n      confirmed: true,\n    });\n\n    this._nativeDialog?.close('confirmed');\n  }\n\n  private cancel(): void {\n    if (this._resolvePromise) {\n      this._resolvePromise(false);\n      this._resolvePromise = null;\n      this._rejectPromise = null;\n    }\n\n    dispatchCustomEvent(this, 'confirm-dialog-cancel', {\n      dialogId: this.id,\n      dialog: this,\n      confirmed: false,\n    });\n\n    this._nativeDialog?.close('cancelled');\n  }\n\n  // Public API\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this.setAttribute('theme', value);\n  }\n\n  get title(): string {\n    return this.getAttribute('title') || 'Confirm';\n  }\n\n  set title(value: string) {\n    this.setAttribute('title', value);\n  }\n\n  get message(): string {\n    return this.getAttribute('message') || 'Are you sure?';\n  }\n\n  set message(value: string) {\n    this.setAttribute('message', value);\n  }\n\n  get confirmText(): string {\n    return this.getAttribute('confirm-text') || 'OK';\n  }\n\n  set confirmText(value: string) {\n    this.setAttribute('confirm-text', value);\n  }\n\n  get cancelText(): string {\n    return this.getAttribute('cancel-text') || 'Cancel';\n  }\n\n  set cancelText(value: string) {\n    this.setAttribute('cancel-text', value);\n  }\n\n  get danger(): boolean {\n    return this.hasAttribute('danger');\n  }\n\n  set danger(value: boolean) {\n    if (value) {\n      this.setAttribute('danger', '');\n    } else {\n      this.removeAttribute('danger');\n    }\n  }\n\n  get open(): boolean {\n    return this._nativeDialog?.open || false;\n  }\n\n  /**\n   * Show the confirmation dialog and return a promise that resolves to true/false\n   */\n  public show(): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      if (this._resolvePromise) {\n        // Already showing, reject the previous promise\n        this._rejectPromise?.(\n          new Error('Dialog was replaced by another show() call')\n        );\n      }\n\n      this._resolvePromise = resolve;\n      this._rejectPromise = reject;\n\n      dispatchCustomEvent(this, 'confirm-dialog-show', {\n        dialogId: this.id,\n        dialog: this,\n      });\n\n      this._nativeDialog?.showModal();\n    });\n  }\n\n  public applyTheme(theme: Theme): void {\n    this._theme = theme;\n    applyTheme(this, theme);\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-confirm')) {\n  customElements.define('e2-confirm', ConfirmDialogElement);\n}\n","/**\n * Dialog Element\n * A wrapper around the native <dialog> element with theming and enhanced functionality\n */\n\nimport { EditorElementProperties, Theme } from '../../types';\nimport {\n  applyTheme,\n  dispatchCustomEvent,\n  generateId,\n  getShadowRoot,\n} from '../../utils';\n\nexport class DialogElement\n  extends HTMLElement\n  implements EditorElementProperties\n{\n  private _theme: Theme = 'auto';\n  private _nativeDialog: HTMLDialogElement | null = null;\n\n  static get observedAttributes(): string[] {\n    return ['title', 'theme', 'modal', 'closable', 'width', 'height'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          --dialog-bg: #ffffff;\n          --dialog-border: #e0e0e0;\n          --dialog-shadow: rgba(0, 0, 0, 0.25);\n          --dialog-backdrop: rgba(0, 0, 0, 0.5);\n          --dialog-header-bg: #f8f9fa;\n          --dialog-header-border: #e0e0e0;\n          --text-color: #333333;\n          --close-button-hover: #f0f0f0;\n          --close-button-active: #e0e0e0;\n\n          display: block;\n        }\n\n        :host(.theme-dark) {\n          --dialog-bg: #2d2d2d;\n          --dialog-border: #555555;\n          --dialog-shadow: rgba(0, 0, 0, 0.5);\n          --dialog-backdrop: rgba(0, 0, 0, 0.7);\n          --dialog-header-bg: #404040;\n          --dialog-header-border: #555555;\n          --text-color: #ffffff;\n          --close-button-hover: #404040;\n          --close-button-active: #555555;\n        }\n\n        dialog {\n          border: 1px solid var(--dialog-border);\n          border-radius: 8px;\n          padding: 0;\n          background: var(--dialog-bg);\n          color: var(--text-color);\n          font-family: var(--font-family, system-ui, sans-serif);\n          font-size: var(--font-size, 14px);\n          box-shadow: 0 8px 24px var(--dialog-shadow);\n          min-width: 300px;\n          max-width: calc(100vw - 32px);\n          max-height: calc(100vh - 32px);\n          overflow: hidden;\n          animation: dialog-fade-in 0.2s ease-out;\n        }\n\n        dialog::backdrop {\n          background: var(--dialog-backdrop);\n          animation: backdrop-fade-in 0.2s ease-out;\n        }\n\n        @keyframes dialog-fade-in {\n          from {\n            opacity: 0;\n            transform: scale(0.9) translateY(-20px);\n          }\n          to {\n            opacity: 1;\n            transform: scale(1) translateY(0);\n          }\n        }\n\n        @keyframes backdrop-fade-in {\n          from { opacity: 0; }\n          to { opacity: 1; }\n        }\n\n        .dialog-header {\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          padding: 16px 20px;\n          background: var(--dialog-header-bg);\n          border-bottom: 1px solid var(--dialog-header-border);\n          min-height: 24px;\n        }\n\n        .dialog-title {\n          font-weight: 600;\n          font-size: 16px;\n          margin: 0;\n        }\n\n        .close-button {\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          width: 28px;\n          height: 28px;\n          border: none;\n          background: transparent;\n          border-radius: 4px;\n          cursor: pointer;\n          color: var(--text-color);\n          font-size: 18px;\n          transition: background-color 0.15s ease;\n        }\n\n        .close-button:hover {\n          background: var(--close-button-hover);\n        }\n\n        .close-button:active {\n          background: var(--close-button-active);\n        }\n\n        .close-button:disabled {\n          opacity: 0.5;\n          cursor: not-allowed;\n        }\n\n        .dialog-content {\n          padding: 20px;\n          overflow-y: auto;\n        }\n\n        .dialog-footer {\n          padding: 16px 20px;\n          border-top: 1px solid var(--dialog-header-border);\n          background: var(--dialog-header-bg);\n          display: flex;\n          justify-content: flex-end;\n          gap: 12px;\n        }\n\n        .dialog-footer:empty {\n          display: none;\n        }\n\n        :host([hidden]) {\n          display: none !important;\n        }\n      </style>\n\n      <dialog part=\"dialog\">\n        <div class=\"dialog-header\" part=\"header\">\n          <h3 class=\"dialog-title\" part=\"title\"></h3>\n          <button class=\"close-button\" part=\"close-button\" type=\"button\" aria-label=\"Close dialog\">\n            ×\n          </button>\n        </div>\n\n        <div class=\"dialog-content\" part=\"content\">\n          <slot></slot>\n        </div>\n\n        <div class=\"dialog-footer\" part=\"footer\">\n          <slot name=\"footer\"></slot>\n        </div>\n      </dialog>\n    `;\n\n    this._nativeDialog = shadowRoot.querySelector('dialog');\n    const closeButton = shadowRoot.querySelector('.close-button');\n\n    // Set up event listeners\n    if (this._nativeDialog) {\n      this._nativeDialog.addEventListener('close', this.handleClose.bind(this));\n      this._nativeDialog.addEventListener(\n        'cancel',\n        this.handleCancel.bind(this)\n      );\n    }\n\n    if (closeButton) {\n      closeButton.addEventListener('click', () => this.close());\n    }\n\n    // Apply initial theme\n    this.applyTheme(this._theme);\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('dialog');\n    }\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string | null,\n    newValue: string | null\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'title':\n        this.updateTitle();\n        break;\n      case 'theme':\n        this._theme = (newValue as Theme) || 'auto';\n        this.applyTheme(this._theme);\n        break;\n      case 'modal':\n        // Modal state affects how dialog opens\n        break;\n      case 'closable':\n        this.updateClosable();\n        break;\n      case 'width':\n        this.updateSize();\n        break;\n      case 'height':\n        this.updateSize();\n        break;\n    }\n  }\n\n  private updateTitle(): void {\n    const titleElement = this.shadowRoot?.querySelector('.dialog-title');\n    if (titleElement) {\n      titleElement.textContent = this.getAttribute('title') || '';\n    }\n  }\n\n  private updateClosable(): void {\n    const closeButton = this.shadowRoot?.querySelector(\n      '.close-button'\n    ) as HTMLButtonElement;\n    if (closeButton) {\n      const closable = this.getAttribute('closable') !== 'false';\n      closeButton.disabled = !closable;\n      closeButton.style.display = closable ? 'flex' : 'none';\n    }\n  }\n\n  private updateSize(): void {\n    if (this._nativeDialog) {\n      const width = this.getAttribute('width');\n      const height = this.getAttribute('height');\n\n      if (width) {\n        this._nativeDialog.style.width =\n          width.includes('px') || width.includes('%') || width.includes('em')\n            ? width\n            : `${width}px`;\n      }\n\n      if (height) {\n        this._nativeDialog.style.height =\n          height.includes('px') || height.includes('%') || height.includes('em')\n            ? height\n            : `${height}px`;\n      }\n    }\n  }\n\n  private handleClose(): void {\n    dispatchCustomEvent(this, 'dialog-close', {\n      dialogId: this.id,\n      dialog: this,\n      returnValue: this._nativeDialog?.returnValue,\n    });\n  }\n\n  private handleCancel(event: Event): void {\n    const cancelable = dispatchCustomEvent(this, 'dialog-cancel', {\n      dialogId: this.id,\n      dialog: this,\n    });\n\n    if (!cancelable) {\n      event.preventDefault();\n    }\n  }\n\n  // Public API\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this.setAttribute('theme', value);\n  }\n\n  get title(): string {\n    return this.getAttribute('title') || '';\n  }\n\n  set title(value: string) {\n    this.setAttribute('title', value);\n  }\n\n  get modal(): boolean {\n    return this.hasAttribute('modal');\n  }\n\n  set modal(value: boolean) {\n    if (value) {\n      this.setAttribute('modal', '');\n    } else {\n      this.removeAttribute('modal');\n    }\n  }\n\n  get closable(): boolean {\n    return this.getAttribute('closable') !== 'false';\n  }\n\n  set closable(value: boolean) {\n    this.setAttribute('closable', value.toString());\n  }\n\n  get open(): boolean {\n    return this._nativeDialog?.open || false;\n  }\n\n  get returnValue(): string {\n    return this._nativeDialog?.returnValue || '';\n  }\n\n  set returnValue(value: string) {\n    if (this._nativeDialog) {\n      this._nativeDialog.returnValue = value;\n    }\n  }\n\n  public show(): void {\n    if (!this._nativeDialog) return;\n\n    dispatchCustomEvent(this, 'dialog-show', {\n      dialogId: this.id,\n      dialog: this,\n    });\n\n    this._nativeDialog.show();\n  }\n\n  public showModal(): void {\n    if (!this._nativeDialog) return;\n\n    dispatchCustomEvent(this, 'dialog-show', {\n      dialogId: this.id,\n      dialog: this,\n      modal: true,\n    });\n\n    this._nativeDialog.showModal();\n  }\n\n  public close(returnValue?: string): void {\n    if (!this._nativeDialog) return;\n\n    if (returnValue !== undefined) {\n      this._nativeDialog.returnValue = returnValue;\n    }\n\n    this._nativeDialog.close();\n  }\n\n  public applyTheme(theme: Theme): void {\n    this._theme = theme;\n    applyTheme(this, theme);\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-dialog')) {\n  customElements.define('e2-dialog', DialogElement);\n}\n","/**\n * Prompt Dialog Element\n * A specialized dialog for text input with validation\n */\n\nimport { EditorElementProperties, Theme } from '../../types';\nimport {\n  applyTheme,\n  dispatchCustomEvent,\n  generateId,\n  getShadowRoot,\n} from '../../utils';\n\nexport class PromptDialogElement\n  extends HTMLElement\n  implements EditorElementProperties\n{\n  private _theme: Theme = 'auto';\n  private _nativeDialog: HTMLDialogElement | null = null;\n  private _resolvePromise: ((value: string | null) => void) | null = null;\n  private _rejectPromise: ((reason?: any) => void) | null = null;\n\n  static get observedAttributes(): string[] {\n    return [\n      'title',\n      'message',\n      'placeholder',\n      'default-value',\n      'confirm-text',\n      'cancel-text',\n      'theme',\n      'required',\n      'multiline',\n      'pattern',\n      'min-length',\n      'max-length',\n    ];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          --dialog-bg: #ffffff;\n          --dialog-border: #e0e0e0;\n          --dialog-shadow: rgba(0, 0, 0, 0.25);\n          --dialog-backdrop: rgba(0, 0, 0, 0.5);\n          --text-color: #333333;\n          --text-secondary: #666666;\n          --input-bg: #ffffff;\n          --input-border: #d0d7de;\n          --input-border-focus: #0969da;\n          --input-border-error: #d1242f;\n          --button-bg: #f8f9fa;\n          --button-border: #e0e0e0;\n          --button-hover: #e9ecef;\n          --button-active: #dee2e6;\n          --confirm-bg: #007bff;\n          --confirm-hover: #0056b3;\n          --confirm-active: #004085;\n          --error-color: #d1242f;\n\n          display: block;\n        }\n\n        :host(.theme-dark) {\n          --dialog-bg: #2d2d2d;\n          --dialog-border: #555555;\n          --dialog-shadow: rgba(0, 0, 0, 0.5);\n          --dialog-backdrop: rgba(0, 0, 0, 0.7);\n          --text-color: #ffffff;\n          --text-secondary: #cccccc;\n          --input-bg: #21262d;\n          --input-border: #30363d;\n          --input-border-focus: #0969da;\n          --input-border-error: #f85149;\n          --button-bg: #404040;\n          --button-border: #555555;\n          --button-hover: #4a4a4a;\n          --button-active: #555555;\n          --confirm-bg: #0d6efd;\n          --confirm-hover: #0b5ed7;\n          --confirm-active: #0a58ca;\n          --error-color: #f85149;\n        }\n\n        dialog {\n          border: 1px solid var(--dialog-border);\n          border-radius: 8px;\n          padding: 0;\n          background: var(--dialog-bg);\n          color: var(--text-color);\n          font-family: var(--font-family, system-ui, sans-serif);\n          font-size: var(--font-size, 14px);\n          box-shadow: 0 8px 24px var(--dialog-shadow);\n          min-width: 400px;\n          max-width: 600px;\n          animation: dialog-fade-in 0.2s ease-out;\n        }\n\n        dialog::backdrop {\n          background: var(--dialog-backdrop);\n          animation: backdrop-fade-in 0.2s ease-out;\n        }\n\n        @keyframes dialog-fade-in {\n          from {\n            opacity: 0;\n            transform: scale(0.9) translateY(-20px);\n          }\n          to {\n            opacity: 1;\n            transform: scale(1) translateY(0);\n          }\n        }\n\n        @keyframes backdrop-fade-in {\n          from { opacity: 0; }\n          to { opacity: 1; }\n        }\n\n        .dialog-content {\n          padding: 24px;\n        }\n\n        .dialog-title {\n          font-size: 18px;\n          font-weight: 600;\n          margin: 0 0 8px 0;\n          color: var(--text-color);\n        }\n\n        .dialog-message {\n          color: var(--text-secondary);\n          line-height: 1.5;\n          margin: 0 0 16px 0;\n        }\n\n        .dialog-message:empty {\n          display: none;\n        }\n\n        .input-group {\n          margin-bottom: 20px;\n        }\n\n        .dialog-input {\n          width: 100%;\n          padding: 8px 12px;\n          border: 1px solid var(--input-border);\n          border-radius: 4px;\n          background: var(--input-bg);\n          color: var(--text-color);\n          font-family: inherit;\n          font-size: 14px;\n          transition: border-color 0.15s ease;\n          box-sizing: border-box;\n        }\n\n        .dialog-input:focus {\n          outline: none;\n          border-color: var(--input-border-focus);\n          box-shadow: 0 0 0 2px rgba(9, 105, 218, 0.3);\n        }\n\n        .dialog-input.error {\n          border-color: var(--input-border-error);\n        }\n\n        .dialog-input.error:focus {\n          box-shadow: 0 0 0 2px rgba(209, 36, 47, 0.3);\n        }\n\n        .dialog-textarea {\n          min-height: 80px;\n          resize: vertical;\n          font-family: inherit;\n        }\n\n        .error-message {\n          color: var(--error-color);\n          font-size: 12px;\n          margin-top: 4px;\n          display: none;\n        }\n\n        .error-message.visible {\n          display: block;\n        }\n\n        .dialog-buttons {\n          display: flex;\n          justify-content: flex-end;\n          gap: 12px;\n        }\n\n        .dialog-button {\n          padding: 8px 16px;\n          border: 1px solid var(--button-border);\n          border-radius: 4px;\n          background: var(--button-bg);\n          color: var(--text-color);\n          font-family: inherit;\n          font-size: 14px;\n          cursor: pointer;\n          transition: all 0.15s ease;\n          min-width: 80px;\n        }\n\n        .dialog-button:hover {\n          background: var(--button-hover);\n        }\n\n        .dialog-button:active {\n          background: var(--button-active);\n        }\n\n        .dialog-button:focus {\n          outline: 2px solid var(--confirm-bg);\n          outline-offset: 2px;\n        }\n\n        .dialog-button:disabled {\n          opacity: 0.6;\n          cursor: not-allowed;\n        }\n\n        .confirm-button {\n          background: var(--confirm-bg);\n          color: white;\n          border-color: var(--confirm-bg);\n        }\n\n        .confirm-button:hover:not(:disabled) {\n          background: var(--confirm-hover);\n          border-color: var(--confirm-hover);\n        }\n\n        .confirm-button:active:not(:disabled) {\n          background: var(--confirm-active);\n          border-color: var(--confirm-active);\n        }\n\n        :host([hidden]) {\n          display: none !important;\n        }\n      </style>\n\n      <dialog part=\"dialog\">\n        <div class=\"dialog-content\" part=\"content\">\n          <h3 class=\"dialog-title\" part=\"title\">Input Required</h3>\n          <p class=\"dialog-message\" part=\"message\"></p>\n\n          <div class=\"input-group\" part=\"input-group\">\n            <input class=\"dialog-input\" part=\"input\" type=\"text\" />\n            <div class=\"error-message\" part=\"error-message\"></div>\n          </div>\n\n          <div class=\"dialog-buttons\" part=\"buttons\">\n            <button class=\"dialog-button cancel-button\" part=\"cancel-button\" type=\"button\">\n              Cancel\n            </button>\n            <button class=\"dialog-button confirm-button\" part=\"confirm-button\" type=\"button\">\n              OK\n            </button>\n          </div>\n        </div>\n      </dialog>\n    `;\n\n    this._nativeDialog = shadowRoot.querySelector('dialog');\n    const confirmButton = shadowRoot.querySelector('.confirm-button');\n    const cancelButton = shadowRoot.querySelector('.cancel-button');\n    const input = shadowRoot.querySelector('.dialog-input') as HTMLInputElement;\n\n    // Set up event listeners\n    if (this._nativeDialog) {\n      this._nativeDialog.addEventListener('close', this.handleClose.bind(this));\n      this._nativeDialog.addEventListener(\n        'cancel',\n        this.handleCancel.bind(this)\n      );\n    }\n\n    if (confirmButton) {\n      confirmButton.addEventListener('click', () => this.confirm());\n    }\n\n    if (cancelButton) {\n      cancelButton.addEventListener('click', () => this.cancel());\n    }\n\n    if (input) {\n      input.addEventListener('input', this.handleInput.bind(this));\n      input.addEventListener('keydown', this.handleKeydown.bind(this));\n    }\n\n    // Apply initial theme\n    this.applyTheme(this._theme);\n    this.updateContent();\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('prompt-dialog');\n    }\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string | null,\n    newValue: string | null\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'title':\n      case 'message':\n      case 'placeholder':\n      case 'default-value':\n      case 'confirm-text':\n      case 'cancel-text':\n      case 'required':\n      case 'multiline':\n      case 'pattern':\n      case 'min-length':\n      case 'max-length':\n        this.updateContent();\n        break;\n      case 'theme':\n        this._theme = (newValue as Theme) || 'auto';\n        this.applyTheme(this._theme);\n        break;\n    }\n  }\n\n  private updateContent(): void {\n    const titleElement = this.shadowRoot?.querySelector('.dialog-title');\n    const messageElement = this.shadowRoot?.querySelector('.dialog-message');\n    const confirmButton = this.shadowRoot?.querySelector('.confirm-button');\n    const cancelButton = this.shadowRoot?.querySelector('.cancel-button');\n    const inputElement = this.shadowRoot?.querySelector(\n      '.dialog-input'\n    ) as HTMLInputElement;\n\n    if (titleElement) {\n      titleElement.textContent = this.getAttribute('title') || 'Input Required';\n    }\n\n    if (messageElement) {\n      const message = this.getAttribute('message') || '';\n      messageElement.textContent = message;\n    }\n\n    if (confirmButton) {\n      confirmButton.textContent = this.getAttribute('confirm-text') || 'OK';\n    }\n\n    if (cancelButton) {\n      cancelButton.textContent = this.getAttribute('cancel-text') || 'Cancel';\n    }\n\n    if (inputElement) {\n      // Handle multiline\n      const multiline = this.hasAttribute('multiline');\n      const currentType = inputElement.tagName.toLowerCase();\n\n      if (multiline && currentType === 'input') {\n        // Replace input with textarea\n        const textarea = document.createElement('textarea');\n        textarea.className = 'dialog-input dialog-textarea';\n        textarea.setAttribute('part', 'input');\n        inputElement.parentNode?.replaceChild(textarea, inputElement);\n        this.setupInputElement(textarea);\n      } else if (!multiline && currentType === 'textarea') {\n        // Replace textarea with input\n        const input = document.createElement('input');\n        input.className = 'dialog-input';\n        input.setAttribute('part', 'input');\n        input.type = 'text';\n        inputElement.parentNode?.replaceChild(input, inputElement);\n        this.setupInputElement(input);\n      } else {\n        this.setupInputElement(inputElement);\n      }\n    }\n  }\n\n  private setupInputElement(\n    element: HTMLInputElement | HTMLTextAreaElement\n  ): void {\n    const placeholder = this.getAttribute('placeholder') || '';\n    const defaultValue = this.getAttribute('default-value') || '';\n    const pattern = this.getAttribute('pattern');\n    const minLength = this.getAttribute('min-length');\n    const maxLength = this.getAttribute('max-length');\n\n    element.placeholder = placeholder;\n    element.value = defaultValue;\n\n    if (pattern && element instanceof HTMLInputElement) {\n      element.pattern = pattern;\n    }\n\n    if (minLength) {\n      element.minLength = parseInt(minLength, 10);\n    }\n\n    if (maxLength) {\n      element.maxLength = parseInt(maxLength, 10);\n    }\n\n    // Re-attach event listeners\n    element.addEventListener('input', this.handleInput.bind(this));\n    element.addEventListener('keydown', (event: Event) =>\n      this.handleKeydown(event as KeyboardEvent)\n    );\n  }\n\n  private handleInput(): void {\n    this.validateInput();\n  }\n\n  private handleKeydown(event: KeyboardEvent): void {\n    if (\n      event.key === 'Enter' &&\n      !event.shiftKey &&\n      !this.hasAttribute('multiline')\n    ) {\n      event.preventDefault();\n      this.confirm();\n    } else if (event.key === 'Escape') {\n      event.preventDefault();\n      this.cancel();\n    }\n  }\n\n  private validateInput(): boolean {\n    const input = this.shadowRoot?.querySelector('.dialog-input') as\n      | HTMLInputElement\n      | HTMLTextAreaElement;\n    const errorMessage = this.shadowRoot?.querySelector('.error-message');\n    const confirmButton = this.shadowRoot?.querySelector(\n      '.confirm-button'\n    ) as HTMLButtonElement;\n\n    if (!input || !errorMessage || !confirmButton) return false;\n\n    let isValid = true;\n    let error = '';\n\n    const value = input.value;\n    const required = this.hasAttribute('required');\n    const pattern = this.getAttribute('pattern');\n    const minLength = this.getAttribute('min-length');\n    const maxLength = this.getAttribute('max-length');\n\n    // Required validation\n    if (required && !value.trim()) {\n      isValid = false;\n      error = 'This field is required';\n    }\n\n    // Pattern validation\n    if (isValid && pattern && value && !new RegExp(pattern).test(value)) {\n      isValid = false;\n      error = 'Invalid format';\n    }\n\n    // Length validation\n    if (isValid && minLength && value.length < parseInt(minLength, 10)) {\n      isValid = false;\n      error = `Minimum length is ${minLength} characters`;\n    }\n\n    if (isValid && maxLength && value.length > parseInt(maxLength, 10)) {\n      isValid = false;\n      error = `Maximum length is ${maxLength} characters`;\n    }\n\n    // Update UI\n    input.classList.toggle('error', !isValid);\n    errorMessage.textContent = error;\n    errorMessage.classList.toggle('visible', !isValid);\n    confirmButton.disabled = !isValid;\n\n    return isValid;\n  }\n\n  private handleClose(): void {\n    if (this._resolvePromise) {\n      this._resolvePromise(null);\n      this._resolvePromise = null;\n      this._rejectPromise = null;\n    }\n\n    dispatchCustomEvent(this, 'prompt-dialog-close', {\n      dialogId: this.id,\n      dialog: this,\n      value: null,\n    });\n  }\n\n  private handleCancel(event: Event): void {\n    const cancelable = dispatchCustomEvent(this, 'prompt-dialog-cancel', {\n      dialogId: this.id,\n      dialog: this,\n    });\n\n    if (!cancelable) {\n      event.preventDefault();\n    } else {\n      this.cancel();\n    }\n  }\n\n  private confirm(): void {\n    if (!this.validateInput()) return;\n\n    const input = this.shadowRoot?.querySelector('.dialog-input') as\n      | HTMLInputElement\n      | HTMLTextAreaElement;\n    const value = input?.value || '';\n\n    if (this._resolvePromise) {\n      this._resolvePromise(value);\n      this._resolvePromise = null;\n      this._rejectPromise = null;\n    }\n\n    dispatchCustomEvent(this, 'prompt-dialog-confirm', {\n      dialogId: this.id,\n      dialog: this,\n      value,\n    });\n\n    this._nativeDialog?.close(value);\n  }\n\n  private cancel(): void {\n    if (this._resolvePromise) {\n      this._resolvePromise(null);\n      this._resolvePromise = null;\n      this._rejectPromise = null;\n    }\n\n    dispatchCustomEvent(this, 'prompt-dialog-cancel', {\n      dialogId: this.id,\n      dialog: this,\n      value: null,\n    });\n\n    this._nativeDialog?.close();\n  }\n\n  // Public API\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this.setAttribute('theme', value);\n  }\n\n  get title(): string {\n    return this.getAttribute('title') || 'Input Required';\n  }\n\n  set title(value: string) {\n    this.setAttribute('title', value);\n  }\n\n  get message(): string {\n    return this.getAttribute('message') || '';\n  }\n\n  set message(value: string) {\n    this.setAttribute('message', value);\n  }\n\n  get placeholder(): string {\n    return this.getAttribute('placeholder') || '';\n  }\n\n  set placeholder(value: string) {\n    this.setAttribute('placeholder', value);\n  }\n\n  get defaultValue(): string {\n    return this.getAttribute('default-value') || '';\n  }\n\n  set defaultValue(value: string) {\n    this.setAttribute('default-value', value);\n  }\n\n  get confirmText(): string {\n    return this.getAttribute('confirm-text') || 'OK';\n  }\n\n  set confirmText(value: string) {\n    this.setAttribute('confirm-text', value);\n  }\n\n  get cancelText(): string {\n    return this.getAttribute('cancel-text') || 'Cancel';\n  }\n\n  set cancelText(value: string) {\n    this.setAttribute('cancel-text', value);\n  }\n\n  get required(): boolean {\n    return this.hasAttribute('required');\n  }\n\n  set required(value: boolean) {\n    if (value) {\n      this.setAttribute('required', '');\n    } else {\n      this.removeAttribute('required');\n    }\n  }\n\n  get multiline(): boolean {\n    return this.hasAttribute('multiline');\n  }\n\n  set multiline(value: boolean) {\n    if (value) {\n      this.setAttribute('multiline', '');\n    } else {\n      this.removeAttribute('multiline');\n    }\n  }\n\n  get value(): string {\n    const input = this.shadowRoot?.querySelector('.dialog-input') as\n      | HTMLInputElement\n      | HTMLTextAreaElement;\n    return input?.value || '';\n  }\n\n  set value(value: string) {\n    const input = this.shadowRoot?.querySelector('.dialog-input') as\n      | HTMLInputElement\n      | HTMLTextAreaElement;\n    if (input) {\n      input.value = value;\n      this.validateInput();\n    }\n  }\n\n  get open(): boolean {\n    return this._nativeDialog?.open || false;\n  }\n\n  /**\n   * Show the prompt dialog and return a promise that resolves to the input value or null if cancelled\n   */\n  public show(): Promise<string | null> {\n    return new Promise((resolve, reject) => {\n      if (this._resolvePromise) {\n        // Already showing, reject the previous promise\n        this._rejectPromise?.(\n          new Error('Dialog was replaced by another show() call')\n        );\n      }\n\n      this._resolvePromise = resolve;\n      this._rejectPromise = reject;\n\n      dispatchCustomEvent(this, 'prompt-dialog-show', {\n        dialogId: this.id,\n        dialog: this,\n      });\n\n      this._nativeDialog?.showModal();\n\n      // Focus the input after showing\n      setTimeout(() => {\n        const input = this.shadowRoot?.querySelector('.dialog-input') as\n          | HTMLInputElement\n          | HTMLTextAreaElement;\n        input?.focus();\n        input?.select();\n      }, 100);\n    });\n  }\n\n  public applyTheme(theme: Theme): void {\n    this._theme = theme;\n    applyTheme(this, theme);\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-prompt')) {\n  customElements.define('e2-prompt', PromptDialogElement);\n}\n","/**\n * Collapsible Panel Element\n * A panel that can be collapsed to a thin bar with an expand button\n * or expanded to show its full content\n */\n\nimport { EditorElementProperties, Theme } from '../../types';\nimport {\n  applyTheme,\n  dispatchCustomEvent,\n  generateId,\n  getShadowRoot,\n} from '../../utils';\n\nexport type PanelOrientation = 'horizontal' | 'vertical';\n\nexport class CollapsiblePanel\n  extends HTMLElement\n  implements EditorElementProperties\n{\n  private _theme: Theme = 'auto';\n  private _collapsed: boolean = false;\n  private _orientation: PanelOrientation = 'vertical';\n\n  static get observedAttributes(): string[] {\n    return ['theme', 'disabled', 'collapsed', 'orientation'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: block;\n          position: relative;\n          background: var(--panel-bg, #ffffff);\n          border: 1px solid var(--panel-border, #ccc);\n          font-family: var(--font-family, system-ui, sans-serif);\n          font-size: var(--font-size, 14px);\n          transition: all 0.3s ease;\n        }\n\n        :host(.theme-dark) {\n          background: var(--panel-bg-dark, #2d2d2d);\n          border-color: var(--panel-border-dark, #555);\n          color: var(--text-color-dark, #fff);\n        }\n\n        :host([disabled]) {\n          opacity: 0.6;\n          pointer-events: none;\n        }\n\n        /* Vertical orientation (default) */\n        :host([orientation=\"vertical\"]) {\n          min-height: 200px;\n        }\n\n        :host([orientation=\"vertical\"][collapsed]) {\n          min-height: 32px;\n          height: 32px;\n          overflow: hidden;\n        }\n\n        /* Horizontal orientation */\n        :host([orientation=\"horizontal\"]) {\n          min-width: 200px;\n          display: inline-block;\n          vertical-align: top;\n        }\n\n        :host([orientation=\"horizontal\"][collapsed]) {\n          min-width: 32px;\n          width: 32px;\n          overflow: hidden;\n        }\n\n        .panel-header {\n          display: flex;\n          align-items: center;\n          padding: 8px;\n          background: var(--panel-header-bg, #f8f8f8);\n          border-bottom: 1px solid var(--panel-border, #ccc);\n          min-height: 16px;\n          cursor: pointer;\n          user-select: none;\n        }\n\n        :host(.theme-dark) .panel-header {\n          background: var(--panel-header-bg-dark, #3a3a3a);\n          border-bottom-color: var(--panel-border-dark, #555);\n        }\n\n        .panel-header:hover {\n          background: var(--panel-header-hover-bg, #e8e8e8);\n        }\n\n        :host(.theme-dark) .panel-header:hover {\n          background: var(--panel-header-hover-bg-dark, #404040);\n        }\n\n        .toggle-button {\n          width: 16px;\n          height: 16px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          font-size: 12px;\n          margin-right: 8px;\n          flex-shrink: 0;\n        }\n\n        /* Vertical orientation icons */\n        :host([orientation=\"vertical\"]) .toggle-button .burger-icon {\n          display: none;\n        }\n\n        :host([orientation=\"vertical\"]) .toggle-button .close-icon {\n          display: block;\n        }\n\n        :host([orientation=\"vertical\"][collapsed]) .toggle-button .burger-icon {\n          display: block;\n        }\n\n        :host([orientation=\"vertical\"][collapsed]) .toggle-button .close-icon {\n          display: none;\n        }\n\n        /* Horizontal orientation icons */\n        :host([orientation=\"horizontal\"]) .toggle-button .burger-icon {\n          display: none;\n        }\n\n        :host([orientation=\"horizontal\"]) .toggle-button .close-icon {\n          display: block;\n        }\n\n        :host([orientation=\"horizontal\"][collapsed]) .toggle-button .burger-icon {\n          display: block;\n        }\n\n        :host([orientation=\"horizontal\"][collapsed]) .toggle-button .close-icon {\n          display: none;\n        }\n\n        /* Rotate icons for horizontal orientation */\n        :host([orientation=\"horizontal\"]) .toggle-button {\n          transform: rotate(90deg);\n        }\n\n        .panel-title {\n          flex-grow: 1;\n          font-weight: 500;\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n        }\n\n        /* Hide title when collapsed */\n        :host([collapsed]) .panel-title {\n          display: none;\n        }\n\n        .panel-content {\n          padding: 12px;\n          overflow: auto;\n        }\n\n        :host([collapsed]) .panel-content {\n          display: none;\n        }\n\n        /* Content slot styling */\n        ::slotted(*) {\n          display: block;\n        }\n      </style>\n\n      <div class=\"panel-header\">\n        <div class=\"toggle-button\">\n          <span class=\"burger-icon\">☰</span>\n          <span class=\"close-icon\">✕</span>\n        </div>\n        <div class=\"panel-title\">\n          <slot name=\"title\">Panel</slot>\n        </div>\n      </div>\n\n      <div class=\"panel-content\">\n        <slot></slot>\n      </div>\n    `;\n\n    // Add click handler for the header\n    const header = shadowRoot.querySelector('.panel-header') as HTMLElement;\n    header.addEventListener('click', this.handleToggle.bind(this));\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('collapsible-panel');\n    }\n    this.applyTheme(this._theme);\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string,\n    newValue: string\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'theme':\n        this.theme = newValue as Theme;\n        break;\n      case 'collapsed':\n        this._collapsed = newValue !== null;\n        break;\n      case 'orientation':\n        this._orientation = (newValue as PanelOrientation) || 'vertical';\n        break;\n    }\n  }\n\n  private handleToggle(): void {\n    this.collapsed = !this.collapsed;\n\n    // Dispatch toggle event\n    dispatchCustomEvent(this, 'collapsible-panel-toggle', {\n      panelId: this.id,\n      panel: this,\n      collapsed: this.collapsed,\n      orientation: this.orientation,\n    });\n  }\n\n  // Public API\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this._theme = value;\n    this.applyTheme(value);\n  }\n\n  get collapsed(): boolean {\n    return this._collapsed;\n  }\n\n  set collapsed(value: boolean) {\n    this._collapsed = value;\n    if (value) {\n      this.setAttribute('collapsed', '');\n    } else {\n      this.removeAttribute('collapsed');\n    }\n  }\n\n  get orientation(): PanelOrientation {\n    return this._orientation;\n  }\n\n  set orientation(value: PanelOrientation) {\n    this._orientation = value;\n    this.setAttribute('orientation', value);\n  }\n\n  toggle(): void {\n    this.collapsed = !this.collapsed;\n  }\n\n  expand(): void {\n    this.collapsed = false;\n  }\n\n  collapse(): void {\n    this.collapsed = true;\n  }\n\n  applyTheme(theme: Theme): void {\n    applyTheme(this, theme);\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-collapsible-panel')) {\n  customElements.define('e2-collapsible-panel', CollapsiblePanel);\n}\n","/**\n * Tab Element\n * Individual tab that can be clicked to show associated content\n */\n\nimport { EditorElementProperties, Theme } from '../../types';\nimport {\n  applyTheme,\n  dispatchCustomEvent,\n  generateId,\n  getShadowRoot,\n} from '../../utils';\n\nexport class Tab extends HTMLElement implements EditorElementProperties {\n  private _theme: Theme = 'auto';\n  private _active: boolean = false;\n  private _closable: boolean = false;\n  private _icon: string = '';\n  private _label: string = '';\n\n  static get observedAttributes(): string[] {\n    return [\n      'theme',\n      'disabled',\n      'active',\n      'closable',\n      'icon',\n      'label',\n      'panel',\n    ];\n  }\n\n  constructor() {\n    super();\n    this.id = this.id || generateId('tab');\n    this.setupElement();\n    this.setupEventListeners();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: flex;\n          align-items: center;\n          padding: 8px 12px;\n          background: var(--tab-bg, #f8f8f8);\n          border: 1px solid var(--tab-border, #ddd);\n          border-bottom: none;\n          cursor: pointer;\n          user-select: none;\n          font-family: var(--font-family, system-ui, sans-serif);\n          font-size: var(--font-size, 14px);\n          color: var(--tab-color, #333);\n          min-width: 0;\n          position: relative;\n          transition: background-color 0.2s ease, color 0.2s ease;\n        }\n\n        :host(:hover) {\n          background: var(--tab-bg-hover, #e8e8e8);\n        }\n\n        :host([active]) {\n          background: var(--tab-bg-active, #ffffff);\n          color: var(--tab-color-active, #000);\n          border-bottom: 1px solid var(--tab-bg-active, #ffffff);\n          z-index: 1;\n        }\n\n        :host(.theme-dark) {\n          background: var(--tab-bg-dark, #2d2d2d);\n          border-color: var(--tab-border-dark, #555);\n          color: var(--tab-color-dark, #ccc);\n        }\n\n        :host(.theme-dark:hover) {\n          background: var(--tab-bg-hover-dark, #3d3d3d);\n        }\n\n        :host(.theme-dark[active]) {\n          background: var(--tab-bg-active-dark, #1e1e1e);\n          color: var(--tab-color-active-dark, #fff);\n          border-bottom-color: var(--tab-bg-active-dark, #1e1e1e);\n        }\n\n        :host([disabled]) {\n          opacity: 0.6;\n          cursor: not-allowed;\n          pointer-events: none;\n        }\n\n        /* Tab position adjustments for container orientation */\n        :host-context(e2-tab-container[tab-position=\"bottom\"]) {\n          border-top: none;\n          border-bottom: 1px solid var(--tab-border, #ddd);\n        }\n\n        :host-context(e2-tab-container[tab-position=\"bottom\"][active]) {\n          border-top: 1px solid var(--tab-bg-active, #ffffff);\n          border-bottom-color: var(--tab-bg-active, #ffffff);\n        }\n\n        :host-context(e2-tab-container.theme-dark[tab-position=\"bottom\"]) {\n          border-bottom-color: var(--tab-border-dark, #555);\n        }\n\n        :host-context(e2-tab-container.theme-dark[tab-position=\"bottom\"][active]) {\n          border-top-color: var(--tab-bg-active-dark, #1e1e1e);\n          border-bottom-color: var(--tab-bg-active-dark, #1e1e1e);\n        }\n\n        :host-context(e2-tab-container[tab-position=\"left\"]),\n        :host-context(e2-tab-container[tab-position=\"right\"]) {\n          border-bottom: 1px solid var(--tab-border, #ddd);\n          border-right: none;\n          width: 100%;\n        }\n\n        :host-context(e2-tab-container[tab-position=\"left\"][active]) {\n          border-right: 1px solid var(--tab-bg-active, #ffffff);\n        }\n\n        :host-context(e2-tab-container[tab-position=\"right\"]) {\n          border-left: none;\n          border-right: 1px solid var(--tab-border, #ddd);\n        }\n\n        :host-context(e2-tab-container[tab-position=\"right\"][active]) {\n          border-left: 1px solid var(--tab-bg-active, #ffffff);\n          border-right-color: var(--tab-bg-active, #ffffff);\n        }\n\n        .tab-content {\n          display: flex;\n          align-items: center;\n          gap: 6px;\n          min-width: 0;\n          flex: 1;\n        }\n\n        .tab-icon {\n          flex-shrink: 0;\n          font-size: 16px;\n          width: 16px;\n          height: 16px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n        }\n\n        .tab-label {\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n          flex: 1;\n          min-width: 0;\n        }\n\n        .close-button {\n          flex-shrink: 0;\n          width: 16px;\n          height: 16px;\n          border: none;\n          background: transparent;\n          cursor: pointer;\n          border-radius: 2px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          margin-left: 4px;\n          font-size: 12px;\n          color: var(--tab-close-color, #666);\n          opacity: 0.7;\n          transition: opacity 0.2s ease, background-color 0.2s ease;\n        }\n\n        .close-button:hover {\n          opacity: 1;\n          background: var(--tab-close-bg-hover, rgba(0, 0, 0, 0.1));\n        }\n\n        :host(.theme-dark) .close-button {\n          color: var(--tab-close-color-dark, #aaa);\n        }\n\n        :host(.theme-dark) .close-button:hover {\n          background: var(--tab-close-bg-hover-dark, rgba(255, 255, 255, 0.1));\n        }\n\n        :host(:not([closable])) .close-button {\n          display: none;\n        }\n      </style>\n\n      <div class=\"tab-content\">\n        <span class=\"tab-icon\"></span>\n        <span class=\"tab-label\"></span>\n        <button class=\"close-button\" type=\"button\">&times;</button>\n      </div>\n    `;\n\n    this.updateContent();\n    this.applyTheme(this._theme);\n  }\n\n  private setupEventListeners(): void {\n    this.addEventListener('click', this.handleClick.bind(this));\n\n    const closeButton = this.shadowRoot?.querySelector(\n      '.close-button'\n    ) as HTMLButtonElement;\n    closeButton?.addEventListener('click', this.handleCloseClick.bind(this));\n  }\n\n  private handleClick(event: MouseEvent): void {\n    if (this.disabled) return;\n\n    // Don't trigger tab click if close button was clicked\n    if ((event.target as HTMLElement).classList.contains('close-button')) {\n      return;\n    }\n\n    event.stopPropagation();\n\n    dispatchCustomEvent(this, 'tab-click', {\n      tabId: this.id,\n      tab: this,\n      panelId: this.getAttribute('panel') || `${this.id}-panel`,\n    });\n  }\n\n  private handleCloseClick(event: MouseEvent): void {\n    if (this.disabled) return;\n\n    event.stopPropagation();\n\n    dispatchCustomEvent(this, 'tab-close', {\n      tabId: this.id,\n      tab: this,\n      panelId: this.getAttribute('panel') || `${this.id}-panel`,\n    });\n\n    // The parent container will handle the removal\n  }\n\n  private updateContent(): void {\n    const shadowRoot = this.shadowRoot!;\n    const iconElement = shadowRoot.querySelector('.tab-icon') as HTMLElement;\n    const labelElement = shadowRoot.querySelector('.tab-label') as HTMLElement;\n\n    // Update icon\n    if (this._icon) {\n      iconElement.textContent = this._icon;\n      iconElement.style.display = 'flex';\n    } else {\n      iconElement.style.display = 'none';\n    }\n\n    // Update label\n    labelElement.textContent = this._label || this.textContent || '';\n  }\n\n  // Public API\n  public click(): void {\n    if (!this.disabled) {\n      this.handleClick(new MouseEvent('click'));\n    }\n  }\n\n  public close(): void {\n    if (!this.disabled && this._closable) {\n      this.handleCloseClick(new MouseEvent('click'));\n    }\n  }\n\n  // Properties\n  public get theme(): Theme {\n    return this._theme;\n  }\n\n  public set theme(value: Theme) {\n    this._theme = value;\n    this.setAttribute('theme', value);\n    this.applyTheme(value);\n  }\n\n  public get active(): boolean {\n    return this._active;\n  }\n\n  public set active(value: boolean) {\n    this._active = value;\n    if (value) {\n      this.setAttribute('active', '');\n    } else {\n      this.removeAttribute('active');\n    }\n  }\n\n  public get closable(): boolean {\n    return this._closable;\n  }\n\n  public set closable(value: boolean) {\n    this._closable = value;\n    if (value) {\n      this.setAttribute('closable', '');\n    } else {\n      this.removeAttribute('closable');\n    }\n  }\n\n  public get icon(): string {\n    return this._icon;\n  }\n\n  public set icon(value: string) {\n    this._icon = value;\n    this.setAttribute('icon', value);\n    this.updateContent();\n  }\n\n  public get label(): string {\n    return this._label;\n  }\n\n  public set label(value: string) {\n    this._label = value;\n    this.setAttribute('label', value);\n    this.updateContent();\n  }\n\n  public get panel(): string | null {\n    return this.getAttribute('panel');\n  }\n\n  public set panel(value: string | null) {\n    if (value) {\n      this.setAttribute('panel', value);\n    } else {\n      this.removeAttribute('panel');\n    }\n  }\n\n  public get disabled(): boolean {\n    return this.hasAttribute('disabled');\n  }\n\n  public set disabled(value: boolean) {\n    if (value) {\n      this.setAttribute('disabled', '');\n    } else {\n      this.removeAttribute('disabled');\n    }\n  }\n\n  public applyTheme(theme: Theme): void {\n    applyTheme(this, theme);\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string | null,\n    newValue: string | null\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'theme':\n        this._theme = (newValue as Theme) || 'auto';\n        this.applyTheme(this._theme);\n        break;\n      case 'active':\n        this._active = newValue !== null;\n        break;\n      case 'closable':\n        this._closable = newValue !== null;\n        break;\n      case 'icon':\n        this._icon = newValue || '';\n        this.updateContent();\n        break;\n      case 'label':\n        this._label = newValue || '';\n        this.updateContent();\n        break;\n    }\n  }\n\n  connectedCallback(): void {\n    // Handle pending setup from dynamic creation\n    if ((this as any)._pendingSetup) {\n      const setup = (this as any)._pendingSetup;\n\n      // Set attributes safely now that element is connected\n      if (setup.slot) {\n        this.setAttribute('slot', setup.slot);\n      }\n      if (setup.panel) {\n        this.setAttribute('panel', setup.panel);\n      }\n      if (setup.label) {\n        this.label = setup.label;\n      }\n      if (setup.closable) {\n        this.closable = setup.closable;\n      }\n      if (setup.theme) {\n        this.applyTheme(setup.theme);\n      }\n\n      // Clean up\n      delete (this as any)._pendingSetup;\n    }\n\n    // Update content when connected\n    this.updateContent();\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-tab')) {\n  customElements.define('e2-tab', Tab);\n}\n","/**\n * Tab Container Element\n * A container that manages tabs and their associated panels\n */\n\nimport {\n  EditorElementProperties,\n  TabCloseEvent,\n  TabContainerChangeEvent,\n  TabSelectEvent,\n  Theme,\n} from '../../types';\nimport {\n  applyTheme,\n  dispatchCustomEvent,\n  generateId,\n  getShadowRoot,\n} from '../../utils';\n\nexport class TabContainer\n  extends HTMLElement\n  implements EditorElementProperties\n{\n  private _theme: Theme = 'auto';\n  private _activeTabId: string | null = null;\n  private _tabPosition: 'top' | 'bottom' | 'left' | 'right' = 'top';\n  private _closable: boolean = false;\n\n  static get observedAttributes(): string[] {\n    return ['theme', 'disabled', 'active-tab', 'tab-position', 'closable'];\n  }\n\n  constructor() {\n    super();\n    this.id = this.id || generateId('tab-container');\n    this.setupElement();\n    this.setupEventListeners();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: flex;\n          flex-direction: column;\n          background: var(--tab-container-bg, #ffffff);\n          border: 1px solid var(--tab-container-border, #ccc);\n          border-radius: var(--tab-container-border-radius, 4px);\n          overflow: hidden;\n          font-family: var(--font-family, system-ui, sans-serif);\n          font-size: var(--font-size, 14px);\n        }\n\n        :host(.theme-dark) {\n          background: var(--tab-container-bg-dark, #1e1e1e);\n          border-color: var(--tab-container-border-dark, #555);\n          color: var(--text-color-dark, #fff);\n        }\n\n        :host([disabled]) {\n          opacity: 0.6;\n          pointer-events: none;\n        }\n\n        /* Tab position variations */\n        :host([tab-position=\"top\"]) {\n          flex-direction: column;\n        }\n\n        :host([tab-position=\"bottom\"]) {\n          flex-direction: column-reverse;\n        }\n\n        :host([tab-position=\"left\"]) {\n          flex-direction: row;\n        }\n\n        :host([tab-position=\"right\"]) {\n          flex-direction: row-reverse;\n        }\n\n        .tab-list {\n          display: flex;\n          background: var(--tab-list-bg, #f8f8f8);\n          border-bottom: 1px solid var(--tab-list-border, #ddd);\n          overflow-x: auto;\n          flex-shrink: 0;\n        }\n\n        :host(.theme-dark) .tab-list {\n          background: var(--tab-list-bg-dark, #2d2d2d);\n          border-bottom-color: var(--tab-list-border-dark, #555);\n        }\n\n        :host([tab-position=\"bottom\"]) .tab-list {\n          border-bottom: none;\n          border-top: 1px solid var(--tab-list-border, #ddd);\n        }\n\n        :host(.theme-dark[tab-position=\"bottom\"]) .tab-list {\n          border-top-color: var(--tab-list-border-dark, #555);\n        }\n\n        :host([tab-position=\"left\"]) .tab-list,\n        :host([tab-position=\"right\"]) .tab-list {\n          flex-direction: column;\n          border-bottom: none;\n          border-right: 1px solid var(--tab-list-border, #ddd);\n          overflow-x: visible;\n          overflow-y: auto;\n        }\n\n        :host([tab-position=\"right\"]) .tab-list {\n          border-right: none;\n          border-left: 1px solid var(--tab-list-border, #ddd);\n        }\n\n        :host(.theme-dark[tab-position=\"left\"]) .tab-list {\n          border-right-color: var(--tab-list-border-dark, #555);\n        }\n\n        :host(.theme-dark[tab-position=\"right\"]) .tab-list {\n          border-left-color: var(--tab-list-border-dark, #555);\n        }\n\n        .panel-container {\n          flex: 1;\n          overflow: hidden;\n          position: relative;\n        }\n\n        ::slotted(e2-tab) {\n          flex-shrink: 0;\n        }\n\n        ::slotted(e2-tab-panel) {\n          position: absolute;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          overflow: auto;\n        }\n\n        ::slotted(e2-tab-panel[active]) {\n          display: flex !important;\n        }\n      </style>\n\n      <div class=\"tab-list\">\n        <slot name=\"tabs\"></slot>\n      </div>\n      <div class=\"panel-container\">\n        <slot name=\"panels\"></slot>\n      </div>\n    `;\n\n    this.applyTheme(this._theme);\n  }\n\n  private setupEventListeners(): void {\n    // Listen for tab clicks\n    this.addEventListener(\n      'tab-click',\n      this.handleTabClick.bind(this) as EventListener\n    );\n    this.addEventListener(\n      'tab-close',\n      this.handleTabClose.bind(this) as EventListener\n    );\n\n    // Listen for slotchange to manage initial state\n    const shadowRoot = this.shadowRoot!;\n    const tabSlot = shadowRoot.querySelector(\n      'slot[name=\"tabs\"]'\n    ) as HTMLSlotElement;\n    const panelSlot = shadowRoot.querySelector(\n      'slot[name=\"panels\"]'\n    ) as HTMLSlotElement;\n\n    tabSlot?.addEventListener('slotchange', () => {\n      this.updateTabsAndPanels();\n    });\n\n    panelSlot?.addEventListener('slotchange', () => {\n      this.updateTabsAndPanels();\n    });\n  }\n\n  private handleTabClick(event: Event): void {\n    event.stopPropagation();\n    const tabElement = event.target as HTMLElement;\n    const tabId = tabElement.id;\n    const panelId = tabElement.getAttribute('panel') || `${tabId}-panel`;\n\n    this.selectTab(tabId, panelId);\n  }\n\n  private handleTabClose(event: Event): void {\n    event.stopPropagation();\n\n    // Find the actual tab element (event might come from close button inside tab)\n    let tabElement = event.target as HTMLElement;\n\n    // If the event came from inside a tab, find the parent tab element\n    if (!tabElement.matches('e2-tab')) {\n      tabElement = tabElement.closest('e2-tab') as HTMLElement;\n    }\n\n    if (!tabElement) {\n      return;\n    }\n\n    const tabId = tabElement.id;\n    const panelId = tabElement.getAttribute('panel') || `${tabId}-panel`;\n\n    // Check if this tab is already being removed to prevent recursion\n    if (tabElement.hasAttribute('data-removing')) {\n      return;\n    }\n\n    // Mark as being removed to prevent recursive calls\n    tabElement.setAttribute('data-removing', 'true');\n\n    // Dispatch close event to external listeners (without bubbling to avoid recursion)\n    const closeEvent = dispatchCustomEvent<TabCloseEvent['detail']>(\n      this,\n      'tab-close',\n      {\n        tabId,\n        tab: tabElement,\n        panelId,\n        panel: this.querySelector(\n          `e2-tab-panel[id=\"${panelId}\"]`\n        ) as HTMLElement,\n        containerId: this.id,\n        container: this,\n      },\n      { bubbles: false } // Prevent bubbling to avoid recursion\n    );\n\n    // Defer the removal to break any potential event loops\n    if (closeEvent) {\n      setTimeout(() => {\n        this.removeTab(tabId);\n      }, 0);\n    }\n  }\n\n  private selectTab(tabId: string, panelId: string): void {\n    const tabElement = this.querySelector(\n      `e2-tab[id=\"${tabId}\"]`\n    ) as HTMLElement;\n    const panelElement = this.querySelector(\n      `e2-tab-panel[id=\"${panelId}\"]`\n    ) as HTMLElement;\n\n    if (!tabElement || !panelElement) {\n      return;\n    }\n\n    const previousTabId = this._activeTabId;\n\n    // Deactivate all tabs and panels\n    this.querySelectorAll('e2-tab').forEach(tab => {\n      if ((tab as any).active !== undefined) {\n        (tab as any).active = false;\n      } else {\n        tab.removeAttribute('active');\n      }\n    });\n    this.querySelectorAll('e2-tab-panel').forEach(panel => {\n      if ((panel as any).active !== undefined) {\n        (panel as any).active = false;\n      } else {\n        panel.removeAttribute('active');\n        (panel as HTMLElement).style.display = 'none';\n      }\n    });\n\n    // Activate the selected tab and panel\n    if ((tabElement as any).active !== undefined) {\n      (tabElement as any).active = true;\n    } else {\n      tabElement.setAttribute('active', '');\n    }\n\n    if ((panelElement as any).active !== undefined) {\n      (panelElement as any).active = true;\n    } else {\n      panelElement.setAttribute('active', '');\n      panelElement.style.display = 'flex';\n    }\n\n    this._activeTabId = tabId;\n    this.setAttribute('active-tab', tabId);\n\n    // Dispatch select event\n    dispatchCustomEvent<TabSelectEvent['detail']>(this, 'tab-select', {\n      tabId,\n      tab: tabElement,\n      panelId,\n      panel: panelElement,\n      containerId: this.id,\n      container: this,\n      previousTabId: previousTabId || undefined,\n    });\n\n    // Dispatch container change event\n    dispatchCustomEvent<TabContainerChangeEvent['detail']>(\n      this,\n      'tab-container-change',\n      {\n        containerId: this.id,\n        container: this,\n        activeTabId: tabId,\n        activePanelId: panelId,\n      }\n    );\n  }\n\n  private removeTab(tabId: string): void {\n    const tabElement = this.querySelector(\n      `e2-tab[id=\"${tabId}\"]`\n    ) as HTMLElement;\n    const panelId = tabElement?.getAttribute('panel') || `${tabId}-panel`;\n    const panelElement = this.querySelector(\n      `e2-tab-panel[id=\"${panelId}\"]`\n    ) as HTMLElement;\n\n    // Remove elements\n    tabElement?.remove();\n    panelElement?.remove();\n\n    // If this was the active tab, select another\n    if (this._activeTabId === tabId) {\n      const remainingTabs = this.querySelectorAll('e2-tab');\n      if (remainingTabs.length > 0) {\n        const nextTab = remainingTabs[0] as HTMLElement;\n        const nextPanelId =\n          nextTab.getAttribute('panel') || `${nextTab.id}-panel`;\n        this.selectTab(nextTab.id, nextPanelId);\n      } else {\n        this._activeTabId = null;\n        this.removeAttribute('active-tab');\n      }\n    }\n  }\n\n  private updateTabsAndPanels(): void {\n    // Auto-assign panels to tabs and vice versa\n    const tabs = this.querySelectorAll('e2-tab');\n    const panels = this.querySelectorAll('e2-tab-panel');\n\n    tabs.forEach((tab, index) => {\n      const tabElement = tab as HTMLElement;\n      if (!tabElement.id) {\n        tabElement.id = generateId('tab');\n      }\n\n      // Set closable attribute if container is closable\n      if (this._closable) {\n        tabElement.setAttribute('closable', '');\n      }\n\n      // Apply current theme\n      if ((tabElement as any).applyTheme) {\n        (tabElement as any).applyTheme(this._theme);\n      }\n\n      // Link to panel\n      if (!tabElement.getAttribute('panel')) {\n        const correspondingPanel = panels[index] as HTMLElement;\n        if (correspondingPanel) {\n          if (!correspondingPanel.id) {\n            correspondingPanel.id = `${tabElement.id}-panel`;\n          }\n          tabElement.setAttribute('panel', correspondingPanel.id);\n        }\n      }\n    });\n\n    // Determine which tab should be active initially\n    let activeTabElement: HTMLElement | null = null;\n    let activePanelId: string | null = null;\n\n    // Priority 1: Check if container has active-tab attribute\n    if (this.hasAttribute('active-tab')) {\n      const activeTabId = this.getAttribute('active-tab');\n      activeTabElement = this.querySelector(\n        `e2-tab[id=\"${activeTabId}\"]`\n      ) as HTMLElement;\n    }\n\n    // Priority 2: Check if any tab has active attribute\n    if (!activeTabElement) {\n      activeTabElement = this.querySelector('e2-tab[active]') as HTMLElement;\n    }\n\n    // Priority 3: Use first tab as fallback\n    if (!activeTabElement && tabs.length > 0) {\n      activeTabElement = tabs[0] as HTMLElement;\n    }\n\n    // Set the active panel ID based on the determined active tab\n    if (activeTabElement) {\n      activePanelId =\n        activeTabElement.getAttribute('panel') ||\n        `${activeTabElement.id}-panel`;\n    }\n\n    panels.forEach(panel => {\n      const panelElement = panel as HTMLElement;\n      if (!panelElement.id) {\n        panelElement.id = generateId('tab-panel');\n      }\n\n      // Apply current theme\n      if ((panelElement as any).applyTheme) {\n        (panelElement as any).applyTheme(this._theme);\n      }\n\n      // Hide all panels except the one that should be active\n      if (panelElement.id === activePanelId) {\n        // This will be the initially active panel - ensure it's visible\n        if ((panelElement as any).active !== undefined) {\n          (panelElement as any).active = true;\n        } else {\n          panelElement.setAttribute('active', '');\n          panelElement.style.display = 'flex';\n        }\n      } else {\n        if ((panelElement as any).active !== undefined) {\n          (panelElement as any).active = false;\n        } else {\n          panelElement.style.display = 'none';\n        }\n      }\n    });\n\n    // Select the determined active tab if none is currently selected\n    if (!this._activeTabId && activeTabElement) {\n      const panelId =\n        activeTabElement.getAttribute('panel') ||\n        `${activeTabElement.id}-panel`;\n      setTimeout(() => {\n        if (activeTabElement) {\n          this.selectTab(activeTabElement.id, panelId);\n        }\n      }, 100);\n    }\n  }\n\n  // Public API\n  public selectTabById(tabId: string): void {\n    const tabElement = this.querySelector(\n      `e2-tab[id=\"${tabId}\"]`\n    ) as HTMLElement;\n    if (tabElement) {\n      const panelId = tabElement.getAttribute('panel') || `${tabId}-panel`;\n      this.selectTab(tabId, panelId);\n    }\n  }\n\n  public addTab(\n    label: string,\n    content: string = '',\n    tabId?: string,\n    panelId?: string\n  ): { tabId: string; panelId: string } {\n    const finalTabId = tabId || generateId('tab');\n    const finalPanelId = panelId || `${finalTabId}-panel`;\n\n    // Create tab element using customElements workaround\n    const TabConstructor = window.customElements.get('e2-tab') as any;\n    const tab = new TabConstructor();\n    tab.id = finalTabId;\n\n    // Create panel element using customElements workaround\n    const TabPanelConstructor = window.customElements.get(\n      'e2-tab-panel'\n    ) as any;\n    const panel = new TabPanelConstructor();\n    panel.id = finalPanelId;\n\n    // Set up initial data that will be applied in connectedCallback\n    (tab as any)._pendingSetup = {\n      slot: 'tabs',\n      panel: finalPanelId,\n      label: label,\n      closable: this._closable,\n      theme: this._theme,\n    };\n\n    (panel as any)._pendingSetup = {\n      slot: 'panels',\n      content: content,\n      theme: this._theme,\n    };\n\n    // Add to DOM - this will trigger connectedCallback\n    this.appendChild(tab);\n    this.appendChild(panel);\n\n    return { tabId: finalTabId, panelId: finalPanelId };\n  }\n\n  public removeTabById(tabId: string): void {\n    this.removeTab(tabId);\n  }\n\n  public get activeTabId(): string | null {\n    return this._activeTabId;\n  }\n\n  public get tabs(): NodeListOf<HTMLElement> {\n    return this.querySelectorAll('e2-tab');\n  }\n\n  public get panels(): NodeListOf<HTMLElement> {\n    return this.querySelectorAll('e2-tab-panel');\n  }\n\n  // Attribute handling\n  public get theme(): Theme {\n    return this._theme;\n  }\n\n  public set theme(value: Theme) {\n    this._theme = value;\n    this.setAttribute('theme', value);\n    this.applyTheme(value);\n  }\n\n  public get tabPosition(): 'top' | 'bottom' | 'left' | 'right' {\n    return this._tabPosition;\n  }\n\n  public set tabPosition(value: 'top' | 'bottom' | 'left' | 'right') {\n    this._tabPosition = value;\n    this.setAttribute('tab-position', value);\n  }\n\n  public get closable(): boolean {\n    return this._closable;\n  }\n\n  public set closable(value: boolean) {\n    this._closable = value;\n    if (value) {\n      this.setAttribute('closable', '');\n    } else {\n      this.removeAttribute('closable');\n    }\n\n    // Update existing tabs\n    this.querySelectorAll('e2-tab').forEach(tab => {\n      if (value) {\n        tab.setAttribute('closable', '');\n      } else {\n        tab.removeAttribute('closable');\n      }\n    });\n  }\n\n  public get disabled(): boolean {\n    return this.hasAttribute('disabled');\n  }\n\n  public set disabled(value: boolean) {\n    if (value) {\n      this.setAttribute('disabled', '');\n    } else {\n      this.removeAttribute('disabled');\n    }\n  }\n\n  public applyTheme(theme: Theme): void {\n    applyTheme(this, theme);\n\n    // Also apply theme to all child tabs and panels\n    this.querySelectorAll('e2-tab').forEach((tab: any) => {\n      if (tab.applyTheme) {\n        tab.applyTheme(theme);\n      }\n    });\n\n    this.querySelectorAll('e2-tab-panel').forEach((panel: any) => {\n      if (panel.applyTheme) {\n        panel.applyTheme(theme);\n      }\n    });\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string | null,\n    newValue: string | null\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'theme':\n        this._theme = (newValue as Theme) || 'auto';\n        this.applyTheme(this._theme);\n        break;\n      case 'active-tab':\n        if (newValue && newValue !== this._activeTabId) {\n          this.selectTabById(newValue);\n        }\n        break;\n      case 'tab-position':\n        this._tabPosition = (newValue as any) || 'top';\n        break;\n      case 'closable':\n        this._closable = newValue !== null;\n        break;\n    }\n  }\n\n  connectedCallback(): void {\n    // Use a longer delay to ensure all child elements are fully initialized\n    setTimeout(() => {\n      this.updateTabsAndPanels();\n\n      // If still no active tab after initialization, try again\n      if (!this._activeTabId) {\n        setTimeout(() => {\n          this.updateTabsAndPanels();\n        }, 50);\n      }\n    }, 10);\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-tab-container')) {\n  customElements.define('e2-tab-container', TabContainer);\n}\n","/**\n * Tab Panel Element\n * Container for tab content that shows/hides based on tab selection\n */\n\nimport { EditorElementProperties, Theme } from '../../types';\nimport { applyTheme, generateId, getShadowRoot } from '../../utils';\n\nexport class TabPanel extends HTMLElement implements EditorElementProperties {\n  private _theme: Theme = 'auto';\n  private _active: boolean = false;\n\n  static get observedAttributes(): string[] {\n    return ['theme', 'disabled', 'active'];\n  }\n\n  constructor() {\n    super();\n    this.id = this.id || generateId('tab-panel');\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: none;\n          flex-direction: column;\n          width: 100%;\n          height: 100%;\n          overflow: auto;\n          background: var(--tab-panel-bg, #ffffff);\n          padding: var(--tab-panel-padding, 16px);\n          font-family: var(--font-family, system-ui, sans-serif);\n          font-size: var(--font-size, 14px);\n          color: var(--tab-panel-color, #333);\n          box-sizing: border-box;\n        }\n\n        :host([active]) {\n          display: flex;\n        }\n\n        :host(.theme-dark) {\n          background: var(--tab-panel-bg-dark, #1e1e1e);\n          color: var(--tab-panel-color-dark, #fff);\n        }\n\n        :host([disabled]) {\n          opacity: 0.6;\n          pointer-events: none;\n        }\n\n        /* Scrollbar styling for dark theme */\n        :host(.theme-dark) {\n          scrollbar-width: thin;\n          scrollbar-color: var(--scrollbar-thumb-dark, #555) var(--scrollbar-track-dark, #2d2d2d);\n        }\n\n        :host(.theme-dark)::-webkit-scrollbar {\n          width: 8px;\n          height: 8px;\n        }\n\n        :host(.theme-dark)::-webkit-scrollbar-track {\n          background: var(--scrollbar-track-dark, #2d2d2d);\n        }\n\n        :host(.theme-dark)::-webkit-scrollbar-thumb {\n          background: var(--scrollbar-thumb-dark, #555);\n          border-radius: 4px;\n        }\n\n        :host(.theme-dark)::-webkit-scrollbar-thumb:hover {\n          background: var(--scrollbar-thumb-hover-dark, #666);\n        }\n\n        /* Light theme scrollbar */\n        :host(.theme-light) {\n          scrollbar-width: thin;\n          scrollbar-color: var(--scrollbar-thumb-light, #ccc) var(--scrollbar-track-light, #f0f0f0);\n        }\n\n        :host(.theme-light)::-webkit-scrollbar {\n          width: 8px;\n          height: 8px;\n        }\n\n        :host(.theme-light)::-webkit-scrollbar-track {\n          background: var(--scrollbar-track-light, #f0f0f0);\n        }\n\n        :host(.theme-light)::-webkit-scrollbar-thumb {\n          background: var(--scrollbar-thumb-light, #ccc);\n          border-radius: 4px;\n        }\n\n        :host(.theme-light)::-webkit-scrollbar-thumb:hover {\n          background: var(--scrollbar-thumb-hover-light, #bbb);\n        }\n\n        /* Content styling */\n        ::slotted(*) {\n          max-width: 100%;\n        }\n\n        ::slotted(h1),\n        ::slotted(h2),\n        ::slotted(h3),\n        ::slotted(h4),\n        ::slotted(h5),\n        ::slotted(h6) {\n          margin-top: 0;\n          color: inherit;\n        }\n\n        ::slotted(p) {\n          line-height: 1.5;\n          margin-bottom: 1em;\n        }\n\n        ::slotted(pre) {\n          background: var(--code-bg, #f5f5f5);\n          padding: 12px;\n          border-radius: 4px;\n          overflow-x: auto;\n          font-family: var(--font-family-mono, 'Consolas', 'Monaco', monospace);\n        }\n\n        :host(.theme-dark) ::slotted(pre) {\n          background: var(--code-bg-dark, #0d1117);\n        }\n\n        ::slotted(code) {\n          background: var(--code-bg, #f5f5f5);\n          padding: 2px 4px;\n          border-radius: 2px;\n          font-family: var(--font-family-mono, 'Consolas', 'Monaco', monospace);\n          font-size: 0.9em;\n        }\n\n        :host(.theme-dark) ::slotted(code) {\n          background: var(--code-bg-dark, #0d1117);\n        }\n\n        /* Loading state */\n        :host([loading]) {\n          display: flex;\n          align-items: center;\n          justify-content: center;\n        }\n\n        :host([loading])::before {\n          content: 'Loading...';\n          color: var(--tab-panel-loading-color, #666);\n        }\n\n        :host(.theme-dark[loading])::before {\n          color: var(--tab-panel-loading-color-dark, #aaa);\n        }\n\n        /* Empty state */\n        :host(:empty:not([loading])) {\n          display: flex;\n          align-items: center;\n          justify-content: center;\n        }\n\n        :host(:empty:not([loading]))::before {\n          content: attr(data-empty-message);\n          color: var(--tab-panel-empty-color, #999);\n          font-style: italic;\n        }\n\n        :host(.theme-dark:empty:not([loading]))::before {\n          color: var(--tab-panel-empty-color-dark, #666);\n        }\n      </style>\n\n      <slot></slot>\n    `;\n\n    this.applyTheme(this._theme);\n  }\n\n  // Public API\n  public show(): void {\n    this.active = true;\n  }\n\n  public hide(): void {\n    this.active = false;\n  }\n\n  public scrollToTop(): void {\n    this.scrollTop = 0;\n  }\n\n  public scrollToBottom(): void {\n    this.scrollTop = this.scrollHeight;\n  }\n\n  public scrollToElement(element: Element): void {\n    if (this.contains(element)) {\n      element.scrollIntoView({ behavior: 'smooth', block: 'nearest' });\n    }\n  }\n\n  public clearContent(): void {\n    this.innerHTML = '';\n  }\n\n  public setContent(content: string): void {\n    this.innerHTML = content;\n  }\n\n  public appendContent(content: string): void {\n    this.insertAdjacentHTML('beforeend', content);\n  }\n\n  public prependContent(content: string): void {\n    this.insertAdjacentHTML('afterbegin', content);\n  }\n\n  // Properties\n  public get theme(): Theme {\n    return this._theme;\n  }\n\n  public set theme(value: Theme) {\n    this._theme = value;\n    this.setAttribute('theme', value);\n    this.applyTheme(value);\n  }\n\n  public get active(): boolean {\n    return this._active;\n  }\n\n  public set active(value: boolean) {\n    this._active = value;\n    if (value) {\n      this.setAttribute('active', '');\n      this.style.display = 'flex';\n    } else {\n      this.removeAttribute('active');\n      this.style.display = 'none';\n    }\n  }\n\n  public get disabled(): boolean {\n    return this.hasAttribute('disabled');\n  }\n\n  public set disabled(value: boolean) {\n    if (value) {\n      this.setAttribute('disabled', '');\n    } else {\n      this.removeAttribute('disabled');\n    }\n  }\n\n  public get loading(): boolean {\n    return this.hasAttribute('loading');\n  }\n\n  public set loading(value: boolean) {\n    if (value) {\n      this.setAttribute('loading', '');\n    } else {\n      this.removeAttribute('loading');\n    }\n  }\n\n  public get emptyMessage(): string {\n    return this.getAttribute('data-empty-message') || 'No content available';\n  }\n\n  public set emptyMessage(value: string) {\n    this.setAttribute('data-empty-message', value);\n  }\n\n  public applyTheme(theme: Theme): void {\n    applyTheme(this, theme);\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string | null,\n    newValue: string | null\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'theme':\n        this._theme = (newValue as Theme) || 'auto';\n        this.applyTheme(this._theme);\n        break;\n      case 'active':\n        this._active = newValue !== null;\n        if (this._active) {\n          this.style.display = 'flex';\n        } else {\n          this.style.display = 'none';\n        }\n        break;\n    }\n  }\n\n  connectedCallback(): void {\n    // Handle pending setup from dynamic creation\n    if ((this as any)._pendingSetup) {\n      const setup = (this as any)._pendingSetup;\n\n      // Set attributes safely now that element is connected\n      if (setup.slot) {\n        this.setAttribute('slot', setup.slot);\n      }\n      if (setup.content) {\n        this.innerHTML = setup.content;\n      }\n      if (setup.theme) {\n        this.applyTheme(setup.theme);\n      }\n\n      // Clean up\n      delete (this as any)._pendingSetup;\n    }\n\n    // Set initial visibility based on active state\n    if (this._active) {\n      this.style.display = 'flex';\n    } else {\n      this.style.display = 'none';\n    }\n\n    // Set default empty message if not provided\n    if (!this.hasAttribute('data-empty-message')) {\n      this.emptyMessage = 'No content available';\n    }\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-tab-panel')) {\n  customElements.define('e2-tab-panel', TabPanel);\n}\n","/**\n * Toolbar Element\n * A horizontal container for toolbar buttons and other controls\n */\n\nimport { EditorElementProperties, Theme } from '../../types';\nimport { applyTheme, generateId, getShadowRoot } from '../../utils';\n\nexport class Toolbar extends HTMLElement implements EditorElementProperties {\n  private _theme: Theme = 'auto';\n\n  static get observedAttributes(): string[] {\n    return ['theme', 'disabled'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: flex;\n          align-items: center;\n          padding: 4px;\n          background: var(--toolbar-bg, #f0f0f0);\n          border-bottom: 1px solid var(--toolbar-border, #ccc);\n          gap: 2px;\n          font-family: var(--font-family, system-ui, sans-serif);\n          font-size: var(--font-size, 14px);\n        }\n\n        :host(.theme-dark) {\n          background: var(--toolbar-bg-dark, #2d2d2d);\n          border-bottom-color: var(--toolbar-border-dark, #555);\n          color: var(--text-color-dark, #fff);\n        }\n\n        :host([disabled]) {\n          opacity: 0.6;\n          pointer-events: none;\n        }\n\n        ::slotted(*) {\n          flex-shrink: 0;\n        }\n      </style>\n      <slot></slot>\n    `;\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('toolbar');\n    }\n    this.applyTheme(this._theme);\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string,\n    newValue: string\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'theme':\n        this.theme = newValue as Theme;\n        break;\n    }\n  }\n\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this._theme = value;\n    this.applyTheme(value);\n  }\n\n  applyTheme(theme: Theme): void {\n    applyTheme(this, theme);\n  }\n\n  /**\n   * Close all toolbar menus except the specified one\n   * @param exceptMenu The menu to keep open (optional)\n   */\n  closeAllMenus(exceptMenu?: HTMLElement): void {\n    const toolbarMenus = this.querySelectorAll('e2-toolbar-menu');\n    toolbarMenus.forEach(menu => {\n      if (menu !== exceptMenu && typeof (menu as any).close === 'function') {\n        (menu as any).close();\n      }\n    });\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-toolbar')) {\n  customElements.define('e2-toolbar', Toolbar);\n}\n","/**\n * Toolbar Button Element\n * A button designed to be used within a toolbar\n */\n\nimport { EditorElementProperties, Theme } from '../../types';\nimport { applyTheme, generateId, getShadowRoot } from '../../utils';\n\nexport class ToolbarButton\n  extends HTMLElement\n  implements EditorElementProperties\n{\n  private _theme: Theme = 'auto';\n\n  static get observedAttributes(): string[] {\n    return ['label', 'icon', 'theme', 'disabled', 'active'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: inline-block;\n        }\n\n        button {\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          gap: 4px;\n          padding: 6px 12px;\n          border: 1px solid transparent;\n          background: transparent;\n          color: var(--text-color, #333);\n          font-family: inherit;\n          font-size: inherit;\n          cursor: pointer;\n          border-radius: 3px;\n          min-height: 24px;\n          transition: all 0.15s ease;\n          text-overflow: ellipsis;\n          overflow: hidden;\n        }\n\n        button:hover {\n          background: var(--button-hover-bg, rgba(0, 0, 0, 0.1));\n        }\n\n        button:active,\n        button.active {\n          background: var(--button-active-bg, rgba(0, 0, 0, 0.2));\n        }\n\n        button:disabled {\n          opacity: 0.6;\n          cursor: not-allowed;\n        }\n\n        :host(.theme-dark) button {\n          color: var(--text-color-dark, #fff);\n        }\n\n        :host(.theme-dark) button:hover {\n          background: var(--button-hover-bg-dark, rgba(255, 255, 255, 0.1));\n        }\n\n        :host(.theme-dark) button:active,\n        :host(.theme-dark) button.active {\n          background: var(--button-active-bg-dark, rgba(255, 255, 255, 0.2));\n        }\n\n        .icon {\n          width: 16px;\n          height: 16px;\n          flex-shrink: 0;\n        }\n\n        .label {\n          white-space: nowrap;\n        }\n      </style>\n      <button>\n        <span class=\"icon\" style=\"display: none;\"></span>\n        <span class=\"label\"></span>\n      </button>\n    `;\n\n    const button = shadowRoot.querySelector('button')!;\n    button.addEventListener('click', this.handleClick.bind(this));\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('toolbar-button');\n    }\n    this.updateContent();\n    this.applyTheme(this._theme);\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string,\n    newValue: string\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'label':\n      case 'icon':\n        this.updateContent();\n        break;\n      case 'theme':\n        this.theme = newValue as Theme;\n        break;\n      case 'disabled':\n        this.updateDisabled();\n        break;\n      case 'active':\n        this.updateActive();\n        break;\n    }\n  }\n\n  private updateContent(): void {\n    const shadowRoot = this.shadowRoot!;\n    const iconSpan = shadowRoot.querySelector('.icon') as HTMLSpanElement;\n    const labelSpan = shadowRoot.querySelector('.label') as HTMLSpanElement;\n\n    const icon = this.getAttribute('icon');\n    const label = this.getAttribute('label') || '';\n\n    if (icon) {\n      iconSpan.textContent = icon;\n      iconSpan.style.display = 'inline-block';\n    } else {\n      iconSpan.style.display = 'none';\n    }\n\n    labelSpan.textContent = label;\n  }\n\n  private updateDisabled(): void {\n    const button = this.shadowRoot!.querySelector('button')!;\n    button.disabled = this.hasAttribute('disabled');\n  }\n\n  private updateActive(): void {\n    const button = this.shadowRoot!.querySelector('button')!;\n    button.classList.toggle('active', this.hasAttribute('active'));\n  }\n\n  private handleClick(event: Event): void {\n    if (this.hasAttribute('disabled')) return;\n\n    const customEvent = new CustomEvent('toolbar-button-click', {\n      detail: {\n        buttonId: this.id,\n        button: this,\n      },\n      bubbles: true,\n      cancelable: true,\n    });\n\n    this.dispatchEvent(customEvent);\n  }\n\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this._theme = value;\n    this.applyTheme(value);\n  }\n\n  applyTheme(theme: Theme): void {\n    applyTheme(this, theme);\n  }\n\n  get label(): string {\n    return this.getAttribute('label') || '';\n  }\n\n  set label(value: string) {\n    this.setAttribute('label', value);\n  }\n\n  get icon(): string {\n    return this.getAttribute('icon') || '';\n  }\n\n  set icon(value: string) {\n    this.setAttribute('icon', value);\n  }\n\n  get active(): boolean {\n    return this.hasAttribute('active');\n  }\n\n  set active(value: boolean) {\n    if (value) {\n      this.setAttribute('active', '');\n    } else {\n      this.removeAttribute('active');\n    }\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-toolbar-button')) {\n  customElements.define('e2-toolbar-button', ToolbarButton);\n}\n","/**\n * Toolbar Menu Element\n * A dropdown menu button designed to be used within a toolbar\n */\n\nimport { EditorElementProperties, Theme } from '../../types';\nimport { applyTheme, generateId, getShadowRoot } from '../../utils';\n\nexport class ToolbarMenu\n  extends HTMLElement\n  implements EditorElementProperties\n{\n  private _theme: Theme = 'auto';\n  private _isOpen: boolean = false;\n  private _justOpened: boolean = false;\n\n  static get observedAttributes(): string[] {\n    return ['label', 'icon', 'theme', 'disabled'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n    this.bindEvents();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: inline-block;\n          position: relative;\n        }\n\n        .button {\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          gap: 4px;\n          padding: 6px 12px;\n          border: 1px solid transparent;\n          background: transparent;\n          color: var(--text-color, #333);\n          font-family: inherit;\n          font-size: inherit;\n          cursor: pointer;\n          border-radius: 3px;\n          min-height: 24px;\n          transition: all 0.15s ease;\n          text-overflow: ellipsis;\n          overflow: hidden;\n        }\n\n        .button:hover {\n          background: var(--button-hover-bg, rgba(0, 0, 0, 0.1));\n        }\n\n        .button:active,\n        .button.open {\n          background: var(--button-active-bg, rgba(0, 0, 0, 0.2));\n        }\n\n        .button:disabled {\n          opacity: 0.6;\n          cursor: not-allowed;\n        }\n\n        :host(.theme-dark) .button {\n          color: var(--text-color-dark, #fff);\n        }\n\n        :host(.theme-dark) .button:hover {\n          background: var(--button-hover-bg-dark, rgba(255, 255, 255, 0.1));\n        }\n\n        :host(.theme-dark) .button:active,\n        :host(.theme-dark) .button.open {\n          background: var(--button-active-bg-dark, rgba(255, 255, 255, 0.2));\n        }\n\n        .icon {\n          width: 16px;\n          height: 16px;\n          flex-shrink: 0;\n        }\n\n        .label {\n          white-space: nowrap;\n        }\n\n        .dropdown-arrow {\n          width: 0;\n          height: 0;\n          border-left: 4px solid transparent;\n          border-right: 4px solid transparent;\n          border-top: 4px solid currentColor;\n          margin-left: 4px;\n          flex-shrink: 0;\n        }\n\n        .dropdown {\n          position: absolute;\n          top: 100%;\n          left: 0;\n          z-index: 9999;\n          display: none;\n          min-width: 180px;\n          background: var(--context-menu-bg, #ffffff);\n          border: 1px solid var(--context-menu-border, #d0d0d0);\n          border-radius: 4px;\n          box-shadow: var(--context-menu-shadow, 0 2px 8px rgba(0, 0, 0, 0.15));\n          padding: 4px 0;\n          font-family: inherit;\n          font-size: 14px;\n          margin-top: 2px;\n        }\n\n        .dropdown.open {\n          display: block;\n        }\n\n        :host(.theme-light) .dropdown {\n          background: var(--context-menu-bg-light, #ffffff);\n          border-color: var(--context-menu-border-light, #d0d0d0);\n          box-shadow: var(--context-menu-shadow-light, 0 2px 8px rgba(0, 0, 0, 0.15));\n        }\n\n        :host(.theme-dark) .dropdown {\n          background: var(--context-menu-bg-dark, #2a2a2a);\n          border-color: var(--context-menu-border-dark, #444444);\n          box-shadow: var(--context-menu-shadow-dark, 0 2px 8px rgba(0, 0, 0, 0.4));\n        }\n\n        @media (prefers-color-scheme: dark) {\n          :host(.theme-auto) .dropdown {\n            background: var(--context-menu-bg-dark, #2a2a2a);\n            border-color: var(--context-menu-border-dark, #444444);\n            box-shadow: var(--context-menu-shadow-dark, 0 2px 8px rgba(0, 0, 0, 0.4));\n          }\n        }\n\n        ::slotted(*) {\n          display: block;\n        }\n      </style>\n      <button class=\"button\">\n        <span class=\"icon\" style=\"display: none;\"></span>\n        <span class=\"label\"></span>\n        <div class=\"dropdown-arrow\"></div>\n      </button>\n      <div class=\"dropdown\">\n        <slot></slot>\n      </div>\n    `;\n\n    const button = shadowRoot.querySelector('.button')!;\n    button.addEventListener('click', this.handleButtonClick.bind(this));\n  }\n\n  private bindEvents(): void {\n    // Close menu when clicking outside\n    document.addEventListener('click', this.handleDocumentClick.bind(this));\n\n    // Close menu on escape key\n    document.addEventListener('keydown', this.handleKeyDown.bind(this));\n\n    // Handle window resize\n    window.addEventListener('resize', this.handleWindowResize.bind(this));\n\n    // Listen for item clicks to close menu\n    this.addEventListener('click', this.handleItemClick.bind(this));\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('toolbar-menu');\n    }\n    this.updateContent();\n    this.applyTheme(this._theme);\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string,\n    newValue: string\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'label':\n      case 'icon':\n        this.updateContent();\n        break;\n      case 'theme':\n        this.theme = newValue as Theme;\n        break;\n      case 'disabled':\n        this.updateDisabled();\n        break;\n    }\n  }\n\n  private updateContent(): void {\n    const shadowRoot = this.shadowRoot!;\n    const iconSpan = shadowRoot.querySelector('.icon') as HTMLSpanElement;\n    const labelSpan = shadowRoot.querySelector('.label') as HTMLSpanElement;\n\n    const icon = this.getAttribute('icon');\n    const label = this.getAttribute('label') || '';\n\n    if (icon) {\n      iconSpan.textContent = icon;\n      iconSpan.style.display = 'inline-block';\n    } else {\n      iconSpan.style.display = 'none';\n    }\n\n    labelSpan.textContent = label;\n  }\n\n  private updateDisabled(): void {\n    const button = this.shadowRoot!.querySelector(\n      '.button'\n    )! as HTMLButtonElement;\n    button.disabled = this.hasAttribute('disabled');\n\n    if (this.hasAttribute('disabled') && this._isOpen) {\n      this.close();\n    }\n  }\n\n  private handleButtonClick(event: Event): void {\n    if (this.hasAttribute('disabled')) return;\n\n    event.stopPropagation();\n\n    if (this._isOpen) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  private handleDocumentClick(event: MouseEvent): void {\n    if (!this._isOpen) return;\n\n    // Ignore the click that just opened the menu\n    if (this._justOpened) {\n      this._justOpened = false;\n      return;\n    }\n\n    const target = event.target as Node;\n    if (!this.contains(target) && !this.shadowRoot?.contains(target)) {\n      this.close();\n    }\n  }\n\n  private handleKeyDown(event: KeyboardEvent): void {\n    if (!this._isOpen) return;\n\n    switch (event.key) {\n      case 'Escape':\n        event.preventDefault();\n        this.close();\n        break;\n      case 'ArrowDown':\n        event.preventDefault();\n        this.focusNextItem();\n        break;\n      case 'ArrowUp':\n        event.preventDefault();\n        this.focusPreviousItem();\n        break;\n      case 'Enter':\n      case ' ':\n        event.preventDefault();\n        this.activateFocusedItem();\n        break;\n    }\n  }\n\n  private handleWindowResize(): void {\n    if (this._isOpen) {\n      this.close();\n    }\n  }\n\n  private handleItemClick(event: Event): void {\n    // Close menu when any item is clicked\n    const target = event.target as HTMLElement;\n    if (\n      target.tagName === 'E2-CONTEXT-MENU-ITEM' ||\n      target.closest('e2-context-menu-item')\n    ) {\n      // Small delay to allow the item click event to be processed first\n      setTimeout(() => this.close(), 0);\n    }\n  }\n\n  private focusNextItem(): void {\n    const items = this.querySelectorAll('e2-context-menu-item:not([disabled])');\n    const currentIndex = Array.from(items).findIndex(\n      item => item === document.activeElement || item.shadowRoot?.activeElement\n    );\n\n    const nextIndex = currentIndex < items.length - 1 ? currentIndex + 1 : 0;\n    (items[nextIndex] as HTMLElement).focus();\n  }\n\n  private focusPreviousItem(): void {\n    const items = this.querySelectorAll('e2-context-menu-item:not([disabled])');\n    const currentIndex = Array.from(items).findIndex(\n      item => item === document.activeElement || item.shadowRoot?.activeElement\n    );\n\n    const prevIndex = currentIndex > 0 ? currentIndex - 1 : items.length - 1;\n    (items[prevIndex] as HTMLElement).focus();\n  }\n\n  private activateFocusedItem(): void {\n    const focused = document.activeElement;\n    if (focused && focused.tagName === 'E2-CONTEXT-MENU-ITEM') {\n      (focused as any).click();\n    }\n  }\n\n  private adjustPosition(): void {\n    const dropdown = this.shadowRoot!.querySelector('.dropdown') as HTMLElement;\n    const rect = this.getBoundingClientRect();\n    const dropdownRect = dropdown.getBoundingClientRect();\n\n    // Check if dropdown would go off the right edge of the viewport\n    if (rect.left + dropdownRect.width > window.innerWidth) {\n      dropdown.style.left = 'auto';\n      dropdown.style.right = '0';\n    } else {\n      dropdown.style.left = '0';\n      dropdown.style.right = 'auto';\n    }\n\n    // Check if dropdown would go off the bottom edge of the viewport\n    if (rect.bottom + dropdownRect.height > window.innerHeight) {\n      dropdown.style.top = 'auto';\n      dropdown.style.bottom = '100%';\n      dropdown.style.marginTop = '0';\n      dropdown.style.marginBottom = '2px';\n    } else {\n      dropdown.style.top = '100%';\n      dropdown.style.bottom = 'auto';\n      dropdown.style.marginTop = '2px';\n      dropdown.style.marginBottom = '0';\n    }\n  }\n\n  // Public API\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this._theme = value;\n    this.applyTheme(value);\n  }\n\n  applyTheme(theme: Theme): void {\n    applyTheme(this, theme);\n\n    // Apply theme to all child context menu items and separators\n    const childItems = this.querySelectorAll(\n      'e2-context-menu-item, e2-context-menu-separator'\n    );\n    childItems.forEach(child => {\n      if (typeof (child as any).applyTheme === 'function') {\n        (child as any).applyTheme(theme);\n      }\n    });\n  }\n\n  get label(): string {\n    return this.getAttribute('label') || '';\n  }\n\n  set label(value: string) {\n    this.setAttribute('label', value);\n  }\n\n  get icon(): string {\n    return this.getAttribute('icon') || '';\n  }\n\n  set icon(value: string) {\n    this.setAttribute('icon', value);\n  }\n\n  get isOpen(): boolean {\n    return this._isOpen;\n  }\n\n  open(): void {\n    if (this.hasAttribute('disabled') || this._isOpen) return;\n\n    // Close other toolbar menus in the same toolbar\n    const parentToolbar = this.closest('e2-toolbar');\n    if (\n      parentToolbar &&\n      typeof (parentToolbar as any).closeAllMenus === 'function'\n    ) {\n      (parentToolbar as any).closeAllMenus(this);\n    }\n\n    this._isOpen = true;\n    const button = this.shadowRoot!.querySelector('.button')!;\n    const dropdown = this.shadowRoot!.querySelector('.dropdown')!;\n\n    button.classList.add('open');\n    dropdown.classList.add('open');\n\n    // Adjust position to stay within viewport\n    this.adjustPosition();\n\n    // Set the flag to prevent immediate closing\n    this._justOpened = true;\n\n    // Ensure all child items have the correct theme\n    this.applyTheme(this._theme);\n\n    // Dispatch show event\n    const showEvent = new CustomEvent('toolbar-menu-show', {\n      detail: {\n        menuId: this.id,\n        menu: this,\n      },\n      bubbles: true,\n      cancelable: true,\n    });\n\n    this.dispatchEvent(showEvent);\n  }\n\n  close(): void {\n    if (!this._isOpen) return;\n\n    this._isOpen = false;\n    const button = this.shadowRoot!.querySelector('.button')!;\n    const dropdown = this.shadowRoot!.querySelector('.dropdown')!;\n\n    button.classList.remove('open');\n    dropdown.classList.remove('open');\n\n    // Dispatch hide event\n    const hideEvent = new CustomEvent('toolbar-menu-hide', {\n      detail: {\n        menuId: this.id,\n        menu: this,\n      },\n      bubbles: true,\n      cancelable: true,\n    });\n\n    this.dispatchEvent(hideEvent);\n  }\n\n  toggle(): void {\n    if (this._isOpen) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-toolbar-menu')) {\n  customElements.define('e2-toolbar-menu', ToolbarMenu);\n}\n","/**\n * Toolbar Separator Element\n * A visual separator for toolbar items\n */\n\nimport { Theme } from '../../types';\nimport { applyTheme, getShadowRoot } from '../../utils';\n\nexport class ToolbarSeparator extends HTMLElement {\n  private _theme: Theme = 'auto';\n\n  static get observedAttributes(): string[] {\n    return ['theme'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: inline-block;\n          width: 1px;\n          height: 24px;\n          background: var(--separator-color, #ccc);\n          margin: 0 4px;\n          flex-shrink: 0;\n        }\n\n        :host(.theme-dark) {\n          background: var(--separator-color-dark, #555);\n        }\n      </style>\n    `;\n  }\n\n  connectedCallback(): void {\n    this.applyTheme(this._theme);\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string,\n    newValue: string\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'theme':\n        this.theme = newValue as Theme;\n        break;\n    }\n  }\n\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this._theme = value;\n    this.applyTheme(value);\n  }\n\n  applyTheme(theme: Theme): void {\n    applyTheme(this, theme);\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-toolbar-separator')) {\n  customElements.define('e2-toolbar-separator', ToolbarSeparator);\n}\n","/**\n * E2 - A collection of custom HTML elements for building editors\n *\n * This library provides a set of reusable UI components designed specifically\n * for creating level editors, sprite editors, and similar desktop-like web applications.\n */\n\n// Import and register all custom elements\nimport './elements/contextmenu/context-menu';\nimport './elements/contextmenu/context-menu-item';\nimport './elements/contextmenu/context-menu-separator';\nimport './elements/dialog/alert';\nimport './elements/dialog/confirm';\nimport './elements/dialog/dialog';\nimport './elements/dialog/prompt';\nimport './elements/panel/collapsible-panel';\nimport './elements/tabs/tab';\nimport './elements/tabs/tab-container';\nimport './elements/tabs/tab-panel';\nimport './elements/toolbar/toolbar';\nimport './elements/toolbar/toolbar-button';\nimport './elements/toolbar/toolbar-menu';\nimport './elements/toolbar/toolbar-separator';\n\n// Export types and interfaces for TypeScript users\nexport * from './types';\n\n// Export utility functions if any\nexport * from './utils';\n\n// Version information\nexport const VERSION = '1.0.0';\n\n// Auto-registration message for development\nif (typeof window !== 'undefined' && process.env.NODE_ENV === 'development') {\n  console.log(\n    `E2 v${VERSION} loaded - Custom elements registered automatically`\n  );\n}\n"],"names":["root","factory","exports","module","define","amd","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","generateId","prefix","Math","random","toString","substring","dispatchCustomEvent","element","eventName","detail","options","event","CustomEvent","bubbles","cancelable","dispatchEvent","addGlobalCSS","css","id","document","getElementById","style","createElement","textContent","head","appendChild","createTemplate","html","template","innerHTML","trim","getShadowRoot","mode","shadowRoot","attachShadow","debounce","func","wait","timeout","args","clearTimeout","window","setTimeout","isElementVisible","rect","getBoundingClientRect","top","left","bottom","innerHeight","documentElement","clientHeight","right","innerWidth","clientWidth","applyTheme","theme","classList","remove","add","ContextMenu","HTMLElement","observedAttributes","constructor","super","_theme","_visible","_justShown","boundContextMenuHandler","handleContextMenu","bind","setupElement","bindEvents","addEventListener","handleDocumentClick","handleKeyDown","handleWindowResize","connectedCallback","setupTargetListeners","disconnectedCallback","removeTargetListeners","attributeChangedCallback","name","oldValue","newValue","hide","targetSelector","getAttribute","querySelectorAll","forEach","target","removeEventListener","disabled","mouseEvent","preventDefault","stopPropagation","trigger","currentTarget","show","clientX","clientY","contains","focusNextItem","focusPreviousItem","activateFocusedItem","items","currentIndex","Array","from","findIndex","item","activeElement","length","focus","focused","tagName","click","setAttribute","hasAttribute","removeAttribute","visible","x","y","adjustPosition","requestAnimationFrame","firstItem","querySelector","menuId","menu","viewportWidth","viewportHeight","parseInt","width","height","child","customElements","ContextMenuItem","button","handleClick","tabIndex","handleFocus","updateContent","updateDisabledState","iconElement","labelElement","shortcutElement","icon","display","label","shortcut","contextMenu","closest","itemId","includes","Event","ContextMenuSeparator","_value","AlertDialogElement","_nativeDialog","_resolvePromise","_rejectPromise","handleClose","handleCancel","close","titleElement","messageElement","buttonElement","getDefaultTitle","type","className","getIconForType","dialogId","dialog","title","message","buttonText","open","Promise","resolve","reject","Error","showModal","ConfirmDialogElement","confirmButton","cancelButton","confirm","cancel","confirmed","confirmText","cancelText","danger","DialogElement","closeButton","updateTitle","updateClosable","updateSize","closable","returnValue","modal","undefined","PromptDialogElement","input","handleInput","handleKeydown","inputElement","multiline","currentType","toLowerCase","textarea","parentNode","replaceChild","setupInputElement","placeholder","defaultValue","pattern","minLength","maxLength","HTMLInputElement","validateInput","shiftKey","errorMessage","isValid","error","required","RegExp","test","toggle","select","CollapsiblePanel","_collapsed","_orientation","handleToggle","collapsed","panelId","panel","orientation","expand","collapse","Tab","_active","_closable","_icon","_label","setupEventListeners","handleCloseClick","tabId","tab","MouseEvent","active","_pendingSetup","setup","slot","TabContainer","_activeTabId","_tabPosition","handleTabClick","handleTabClose","tabSlot","panelSlot","updateTabsAndPanels","tabElement","selectTab","matches","containerId","container","removeTab","panelElement","previousTabId","activeTabId","activePanelId","remainingTabs","nextTab","nextPanelId","tabs","panels","index","correspondingPanel","activeTabElement","selectTabById","addTab","content","finalTabId","finalPanelId","removeTabById","tabPosition","TabPanel","scrollToTop","scrollTop","scrollToBottom","scrollHeight","scrollToElement","scrollIntoView","behavior","block","clearContent","setContent","appendContent","insertAdjacentHTML","prependContent","loading","emptyMessage","Toolbar","closeAllMenus","exceptMenu","ToolbarButton","updateDisabled","updateActive","iconSpan","labelSpan","customEvent","buttonId","ToolbarMenu","_isOpen","_justOpened","handleButtonClick","handleItemClick","dropdown","dropdownRect","marginTop","marginBottom","isOpen","parentToolbar","showEvent","hideEvent","ToolbarSeparator","VERSION"],"sourceRoot":""}