{"version":3,"file":"e2.min.js","mappings":"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","sources":["webpack://E2/webpack/universalModuleDefinition","webpack://E2/webpack/bootstrap","webpack://E2/webpack/runtime/define property getters","webpack://E2/webpack/runtime/hasOwnProperty shorthand","webpack://E2/webpack/runtime/make namespace object","webpack://E2/./src/utils.ts","webpack://E2/./src/elements/app/app.ts","webpack://E2/./src/elements/contextmenu/context-menu.ts","webpack://E2/./src/elements/contextmenu/context-menu-item.ts","webpack://E2/./src/elements/contextmenu/context-menu-separator.ts","webpack://E2/./src/elements/dialog/alert.ts","webpack://E2/./src/elements/dialog/confirm.ts","webpack://E2/./src/elements/dialog/dialog.ts","webpack://E2/./src/elements/dialog/prompt.ts","webpack://E2/./src/elements/listview/list-view.ts","webpack://E2/./src/elements/notification/notification.ts","webpack://E2/./src/elements/notification/notification-container.ts","webpack://E2/./src/elements/panel/collapsible-panel.ts","webpack://E2/./src/elements/panel/split-panel.ts","webpack://E2/./src/elements/panel/split-panel-container.ts","webpack://E2/./src/elements/statusbar/status-bar.ts","webpack://E2/./src/elements/statusbar/status-item.ts","webpack://E2/./src/elements/statusbar/status-section.ts","webpack://E2/./src/elements/tabs/tab.ts","webpack://E2/./src/elements/tabs/tab-container.ts","webpack://E2/./src/elements/tabs/tab-panel.ts","webpack://E2/./src/elements/toolbar/toolbar.ts","webpack://E2/./src/elements/toolbar/toolbar-button.ts","webpack://E2/./src/elements/toolbar/toolbar-menu.ts","webpack://E2/./src/elements/toolbar/toolbar-separator.ts","webpack://E2/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"E2\"] = factory();\n\telse\n\t\troot[\"E2\"] = factory();\n})(this, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Utility functions for editor elements\n */\n\n/**\n * Generate a unique ID for elements\n */\nexport function generateId(prefix = 'element'): string {\n  return `${prefix}-${Math.random().toString(36).substring(2, 9)}`;\n}\n\n/**\n * Dispatch a custom event from an element\n */\nexport function dispatchCustomEvent<T = any>(\n  element: HTMLElement,\n  eventName: string,\n  detail?: T,\n  options: CustomEventInit = {}\n): boolean {\n  const event = new CustomEvent(eventName, {\n    detail,\n    bubbles: true,\n    cancelable: true,\n    ...options,\n  });\n\n  return element.dispatchEvent(event);\n}\n\n/**\n * Add CSS to the document head if it doesn't already exist\n */\nexport function addGlobalCSS(css: string, id?: string): void {\n  if (id && document.getElementById(id)) {\n    return; // CSS already added\n  }\n\n  const style = document.createElement('style');\n  if (id) {\n    style.id = id;\n  }\n  style.textContent = css;\n  document.head.appendChild(style);\n}\n\n/**\n * Create a template element with the given HTML\n */\nexport function createTemplate(html: string): HTMLTemplateElement {\n  const template = document.createElement('template');\n  template.innerHTML = html.trim();\n  return template;\n}\n\n/**\n * Get or create a shadow root for an element\n */\nexport function getShadowRoot(\n  element: HTMLElement,\n  options: ShadowRootInit = { mode: 'open' }\n): ShadowRoot {\n  return element.shadowRoot || element.attachShadow(options);\n}\n\n/**\n * Debounce function to limit how often a function can be called\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: number;\n\n  return function executedFunction(...args: Parameters<T>) {\n    const later = () => {\n      clearTimeout(timeout);\n      func(...args);\n    };\n\n    clearTimeout(timeout);\n    timeout = window.setTimeout(later, wait);\n  };\n}\n\n/**\n * Check if an element is visible in the viewport\n */\nexport function isElementVisible(element: HTMLElement): boolean {\n  const rect = element.getBoundingClientRect();\n  return (\n    rect.top >= 0 &&\n    rect.left >= 0 &&\n    rect.bottom <=\n      (window.innerHeight || document.documentElement.clientHeight) &&\n    rect.right <= (window.innerWidth || document.documentElement.clientWidth)\n  );\n}\n\n/**\n * Find the closest parent e2-app element\n */\nexport function findParentApp(element: HTMLElement): HTMLElement | null {\n  let current = element.parentElement;\n  while (current) {\n    if (current.tagName.toLowerCase() === 'e2-app') {\n      return current;\n    }\n    current = current.parentElement;\n  }\n  return null;\n}\n\n/**\n * Get the effective theme for an element\n * If the element has an explicit theme attribute, use that\n * Otherwise, inherit from the parent e2-app if available\n * Falls back to 'auto' if no parent app found\n */\nexport function getEffectiveTheme(\n  element: HTMLElement\n): 'light' | 'dark' | 'auto' {\n  // Check if element has explicit theme attribute\n  const explicitTheme = element.getAttribute('theme');\n  if (explicitTheme && ['light', 'dark', 'auto'].includes(explicitTheme)) {\n    return explicitTheme as 'light' | 'dark' | 'auto';\n  }\n\n  // Look for parent app theme\n  const parentApp = findParentApp(element);\n  if (parentApp) {\n    const parentTheme = parentApp.getAttribute('theme');\n    if (parentTheme && ['light', 'dark', 'auto'].includes(parentTheme)) {\n      return parentTheme as 'light' | 'dark' | 'auto';\n    }\n  }\n\n  // Default fallback\n  return 'auto';\n}\n\n/**\n * Apply theme class to an element\n */\nexport function applyTheme(\n  element: HTMLElement,\n  theme: 'light' | 'dark' | 'auto'\n): void {\n  element.classList.remove('theme-light', 'theme-dark', 'theme-auto');\n  element.classList.add(`theme-${theme}`);\n}\n\n/**\n * Apply effective theme to an element (with inheritance support)\n */\nexport function applyEffectiveTheme(element: HTMLElement): void {\n  const effectiveTheme = getEffectiveTheme(element);\n  applyTheme(element, effectiveTheme);\n}\n\n/**\n * Setup theme inheritance for an element\n * This should be called in the element's connectedCallback\n */\nexport function setupThemeInheritance(\n  element: HTMLElement,\n  onThemeChange?: (theme: 'light' | 'dark' | 'auto') => void\n): () => void {\n  const handleAppThemeChange = (event: CustomEvent) => {\n    // Only respond if this element doesn't have its own theme attribute\n    if (!element.hasAttribute('theme')) {\n      const newTheme = event.detail.theme;\n      applyTheme(element, newTheme);\n\n      // Call custom handler if provided\n      if (onThemeChange) {\n        onThemeChange(newTheme);\n      }\n    }\n  };\n\n  // Listen for theme changes from parent app\n  document.addEventListener(\n    'e2-app-theme-change',\n    handleAppThemeChange as EventListener\n  );\n\n  // Return cleanup function\n  return () => {\n    document.removeEventListener(\n      'e2-app-theme-change',\n      handleAppThemeChange as EventListener\n    );\n  };\n}\n\n/**\n * Notify all child elements about theme change\n */\nexport function notifyThemeChange(\n  appElement: HTMLElement,\n  theme: 'light' | 'dark' | 'auto'\n): void {\n  // Dispatch a custom event that bubbles up\n  const event = new CustomEvent('e2-app-theme-change', {\n    detail: {\n      theme,\n      appElement,\n    },\n    bubbles: true,\n    cancelable: false,\n  });\n\n  // Dispatch from the app element so it can be captured by child elements\n  appElement.dispatchEvent(event);\n\n  // Also dispatch globally for elements that might not be in the DOM tree yet\n  document.dispatchEvent(event);\n}\n\n/**\n * Initialize theme inheritance for a component\n * This is a helper function that standardizes the theme inheritance pattern\n * Call this in your component's connectedCallback\n */\nexport function initializeThemeInheritance(\n  element: HTMLElement & {\n    applyTheme: (theme: 'light' | 'dark' | 'auto') => void;\n  },\n  currentTheme: 'light' | 'dark' | 'auto'\n): (() => void) | undefined {\n  // Set up theme inheritance if no explicit theme is set\n  if (!element.hasAttribute('theme')) {\n    applyEffectiveTheme(element);\n    return setupThemeInheritance(element);\n  } else {\n    element.applyTheme(currentTheme);\n    return undefined;\n  }\n}\n\n/**\n * Handle theme changes for a component\n * This is a helper function that standardizes theme change handling\n * Call this in your component's theme setter and attributeChangedCallback\n */\nexport function handleThemeChange(\n  element: HTMLElement & {\n    applyTheme: (theme: 'light' | 'dark' | 'auto') => void;\n  },\n  newTheme: 'light' | 'dark' | 'auto' | null,\n  themeCleanupRef: { current?: () => void }\n): void {\n  // Clean up any existing theme inheritance first\n  if (themeCleanupRef.current) {\n    themeCleanupRef.current();\n    themeCleanupRef.current = undefined;\n  }\n\n  if (newTheme) {\n    // Explicit theme set\n    element.applyTheme(newTheme);\n  } else if (element.isConnected) {\n    // Theme attribute removed, switch to inheritance\n    applyEffectiveTheme(element);\n    themeCleanupRef.current = setupThemeInheritance(element);\n  }\n}\n\n/**\n * Create and show a toast notification programmatically\n */\nexport interface CreateToastOptions {\n  title?: string;\n  timeout?: number;\n  dismissible?: boolean;\n  persistent?: boolean;\n  container?: HTMLElement | string;\n}\n\nexport function createToast(\n  type: 'info' | 'success' | 'warning' | 'error',\n  message: string,\n  options: CreateToastOptions = {}\n): Promise<void> {\n  // Create the notification element\n  const notification = document.createElement('e2-notification') as any;\n  notification.type = type;\n  notification.message = message;\n\n  if (options.title) {\n    notification.title = options.title;\n  }\n\n  if (options.timeout !== undefined) {\n    notification.timeout = options.timeout;\n  }\n\n  if (options.dismissible !== undefined) {\n    notification.dismissible = options.dismissible;\n  }\n\n  if (options.persistent !== undefined) {\n    notification.persistent = options.persistent;\n  }\n\n  // Find or create container\n  let container: HTMLElement;\n\n  if (options.container) {\n    if (typeof options.container === 'string') {\n      const found = document.querySelector(options.container);\n      if (found) {\n        container = found as HTMLElement;\n      } else {\n        container = document.body;\n      }\n    } else {\n      container = options.container;\n    }\n  } else {\n    // Look for existing notification container\n    const existingContainer = document.querySelector(\n      'e2-notification-container'\n    );\n    if (existingContainer) {\n      container = existingContainer as HTMLElement;\n    } else {\n      // Create default container\n      const defaultContainer = document.createElement(\n        'e2-notification-container'\n      ) as any;\n      defaultContainer.position = 'top-right';\n      document.body.appendChild(defaultContainer);\n      container = defaultContainer;\n    }\n  }\n\n  // Add notification to container\n  container.appendChild(notification);\n\n  // Show the notification and clean up when done\n  return notification.show().then(() => {\n    // Remove from DOM after hiding animation completes\n    if (notification.parentNode) {\n      notification.parentNode.removeChild(notification);\n    }\n  });\n}\n\n/**\n * Toast API for convenient toast creation\n */\nexport const Toast = {\n  /**\n   * Show an info toast\n   */\n  info: (message: string, options?: CreateToastOptions): Promise<void> =>\n    createToast('info', message, options),\n\n  /**\n   * Show a success toast\n   */\n  success: (message: string, options?: CreateToastOptions): Promise<void> =>\n    createToast('success', message, options),\n\n  /**\n   * Show a warning toast\n   */\n  warning: (message: string, options?: CreateToastOptions): Promise<void> =>\n    createToast('warning', message, options),\n\n  /**\n   * Show an error toast\n   */\n  error: (message: string, options?: CreateToastOptions): Promise<void> =>\n    createToast('error', message, options),\n};\n","/**\n * E2 App Element\n * A wrapper element that provides global CSS styles and theming for E2 applications\n */\n\nimport { EditorElementProperties, Theme } from '../../types';\nimport { applyTheme, generateId, notifyThemeChange } from '../../utils';\n\nexport class E2App extends HTMLElement implements EditorElementProperties {\n  private _theme: Theme = 'auto';\n  private _stylesInitialized: boolean = false;\n\n  static get observedAttributes(): string[] {\n    return ['theme'];\n  }\n\n  constructor() {\n    super();\n    // Don't set up DOM in constructor - defer to connectedCallback\n  }\n\n  private setupElement(): void {\n    // Apply styles directly to the document head (not to the element itself)\n    // This allows global styles to cascade to child elements without interfering with DOM structure\n\n    // Check if styles are already added to avoid conflicts\n    if (!this._stylesInitialized && !document.getElementById('e2-app-styles')) {\n      const styleElement = document.createElement('style');\n      styleElement.id = 'e2-app-styles';\n      styleElement.textContent = `\n        /* CSS Reset and Base Styles */\n        e2-app, e2-app * {\n          box-sizing: border-box;\n        }\n\n        e2-app {\n          /* Layout */\n          --app-width: 100%;\n          --app-height: 100vh;\n          --app-padding: 0;\n          --app-margin: 0;\n\n          /* Typography */\n          --font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', sans-serif;\n          --font-size: 14px;\n          --line-height: 1.4;\n          --font-weight: 400;\n\n          /* Colors - Light Theme */\n          --bg-primary: #ffffff;\n          --bg-secondary: #f8f9fa;\n          --bg-tertiary: #e9ecef;\n          --text-primary: #212529;\n          --text-secondary: #6c757d;\n          --text-muted: #adb5bd;\n          --border-color: #dee2e6;\n          --border-color-hover: #adb5bd;\n          --accent-color: #0d6efd;\n          --accent-color-hover: #0b5ed7;\n          --success-color: #198754;\n          --warning-color: #ffc107;\n          --danger-color: #dc3545;\n\n          /* Form Controls */\n          --input-bg: #ffffff;\n          --input-border: #ced4da;\n          --input-border-focus: #86b7fe;\n          --input-text: #212529;\n          --input-placeholder: #6c757d;\n          --input-padding: 6px 12px;\n          --input-border-radius: 4px;\n          --input-font-size: 14px;\n\n          /* Buttons */\n          --button-bg: #f8f9fa;\n          --button-bg-hover: #e9ecef;\n          --button-border: #ced4da;\n          --button-text: #212529;\n          --button-padding: 6px 12px;\n          --button-border-radius: 4px;\n\n          /* Shadows */\n          --shadow-sm: 0 1px 2px rgba(0, 0, 0, 0.05);\n          --shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n          --shadow-lg: 0 4px 6px rgba(0, 0, 0, 0.1);\n\n          /* Transitions */\n          --transition-fast: 0.15s ease-in-out;\n          --transition-normal: 0.3s ease-in-out;\n\n          /* Apply base layout */\n          display: block;\n          width: var(--app-width);\n          height: var(--app-height);\n          padding: var(--app-padding);\n          margin: var(--app-margin);\n          font-family: var(--font-family);\n          font-size: var(--font-size);\n          line-height: var(--line-height);\n          font-weight: var(--font-weight);\n          color: var(--text-primary);\n          background-color: var(--bg-primary);\n          overflow: hidden;\n        }\n\n        /* Dark Theme */\n        e2-app.theme-dark {\n          --bg-primary: #1a1a1a;\n          --bg-secondary: #2d2d2d;\n          --bg-tertiary: #404040;\n          --text-primary: #ffffff;\n          --text-secondary: #cccccc;\n          --text-muted: #999999;\n          --border-color: #404040;\n          --border-color-hover: #666666;\n          --accent-color: #4dabf7;\n          --accent-color-hover: #339af0;\n          --success-color: #51cf66;\n          --warning-color: #ffd43b;\n          --danger-color: #ff6b6b;\n\n          --input-bg: #2d2d2d;\n          --input-border: #404040;\n          --input-border-focus: #4dabf7;\n          --input-text: #ffffff;\n          --input-placeholder: #999999;\n\n          --button-bg: #2d2d2d;\n          --button-bg-hover: #404040;\n          --button-border: #404040;\n          --button-text: #ffffff;\n\n          --shadow-sm: 0 1px 2px rgba(0, 0, 0, 0.25);\n          --shadow: 0 1px 3px rgba(0, 0, 0, 0.3);\n          --shadow-lg: 0 4px 6px rgba(0, 0, 0, 0.3);\n        }\n\n        /* Auto Theme - uses system preference */\n        e2-app.theme-auto {\n          color-scheme: light dark;\n        }\n\n        @media (prefers-color-scheme: dark) {\n          e2-app.theme-auto {\n            --bg-primary: #1a1a1a;\n            --bg-secondary: #2d2d2d;\n            --bg-tertiary: #404040;\n            --text-primary: #ffffff;\n            --text-secondary: #cccccc;\n            --text-muted: #999999;\n            --border-color: #404040;\n            --border-color-hover: #666666;\n            --accent-color: #4dabf7;\n            --accent-color-hover: #339af0;\n            --success-color: #51cf66;\n            --warning-color: #ffd43b;\n            --danger-color: #ff6b6b;\n\n            --input-bg: #2d2d2d;\n            --input-border: #404040;\n            --input-border-focus: #4dabf7;\n            --input-text: #ffffff;\n            --input-placeholder: #999999;\n\n            --button-bg: #2d2d2d;\n            --button-bg-hover: #404040;\n            --button-border: #404040;\n            --button-text: #ffffff;\n\n            --shadow-sm: 0 1px 2px rgba(0, 0, 0, 0.25);\n            --shadow: 0 1px 3px rgba(0, 0, 0, 0.3);\n            --shadow-lg: 0 4px 6px rgba(0, 0, 0, 0.3);\n          }\n        }\n\n        /* Typography Styles */\n        e2-app h1, e2-app h2, e2-app h3, e2-app h4, e2-app h5, e2-app h6 {\n          margin: 0 0 0.5em 0;\n          font-weight: 600;\n          line-height: 1.2;\n          color: var(--text-primary);\n        }\n\n        e2-app h1 { font-size: 2rem; }\n        e2-app h2 { font-size: 1.5rem; }\n        e2-app h3 { font-size: 1.25rem; }\n        e2-app h4 { font-size: 1.1rem; }\n        e2-app h5 { font-size: 1rem; }\n        e2-app h6 { font-size: 0.9rem; }\n\n        e2-app p {\n          margin: 0 0 1em 0;\n          color: var(--text-primary);\n        }\n\n        e2-app small {\n          font-size: 0.875em;\n          color: var(--text-secondary);\n        }\n\n        e2-app strong {\n          font-weight: 600;\n        }\n\n        e2-app a {\n          color: var(--accent-color);\n          text-decoration: none;\n          transition: color var(--transition-fast);\n        }\n\n        e2-app a:hover {\n          color: var(--accent-color-hover);\n          text-decoration: underline;\n        }\n\n        /* Form Control Styles */\n        e2-app input[type=\"text\"],\n        e2-app input[type=\"email\"],\n        e2-app input[type=\"password\"],\n        e2-app input[type=\"number\"],\n        e2-app input[type=\"search\"],\n        e2-app input[type=\"url\"],\n        e2-app input[type=\"tel\"],\n        e2-app input[type=\"date\"],\n        e2-app input[type=\"time\"],\n        e2-app input[type=\"datetime-local\"],\n        e2-app textarea,\n        e2-app select {\n          display: block;\n          width: 100%;\n          padding: var(--input-padding);\n          font-size: var(--input-font-size);\n          font-family: var(--font-family);\n          line-height: var(--line-height);\n          color: var(--input-text);\n          background-color: var(--input-bg);\n          background-clip: padding-box;\n          border: 1px solid var(--input-border);\n          border-radius: var(--input-border-radius);\n          transition: border-color var(--transition-fast), box-shadow var(--transition-fast);\n        }\n\n        e2-app input[type=\"text\"]:focus,\n        e2-app input[type=\"email\"]:focus,\n        e2-app input[type=\"password\"]:focus,\n        e2-app input[type=\"number\"]:focus,\n        e2-app input[type=\"search\"]:focus,\n        e2-app input[type=\"url\"]:focus,\n        e2-app input[type=\"tel\"]:focus,\n        e2-app input[type=\"date\"]:focus,\n        e2-app input[type=\"time\"]:focus,\n        e2-app input[type=\"datetime-local\"]:focus,\n        e2-app textarea:focus,\n        e2-app select:focus {\n          outline: 0;\n          border-color: var(--input-border-focus);\n          box-shadow: 0 0 0 2px rgba(13, 110, 253, 0.25);\n        }\n\n        e2-app input::placeholder,\n        e2-app textarea::placeholder {\n          color: var(--input-placeholder);\n          opacity: 1;\n        }\n\n        e2-app input:disabled,\n        e2-app textarea:disabled,\n        e2-app select:disabled {\n          background-color: var(--bg-tertiary);\n          opacity: 0.6;\n          cursor: not-allowed;\n        }\n\n        /* Textarea specific */\n        e2-app textarea {\n          resize: vertical;\n          min-height: 80px;\n        }\n\n        /* Select specific */\n        e2-app select {\n          cursor: pointer;\n        }\n\n        /* Checkbox and Radio Styles */\n        e2-app input[type=\"checkbox\"],\n        e2-app input[type=\"radio\"] {\n          width: 16px;\n          height: 16px;\n          margin: 0 8px 0 0;\n          vertical-align: middle;\n          cursor: pointer;\n          accent-color: var(--accent-color);\n        }\n\n        e2-app input[type=\"checkbox\"]:disabled,\n        e2-app input[type=\"radio\"]:disabled {\n          cursor: not-allowed;\n          opacity: 0.6;\n        }\n\n        /* Range Input */\n        e2-app input[type=\"range\"] {\n          width: 100%;\n          height: 6px;\n          background: var(--bg-tertiary);\n          border-radius: 3px;\n          outline: none;\n          cursor: pointer;\n          accent-color: var(--accent-color);\n        }\n\n        /* File Input */\n        e2-app input[type=\"file\"] {\n          display: block;\n          width: 100%;\n          padding: var(--input-padding);\n          font-size: var(--input-font-size);\n          font-family: var(--font-family);\n          color: var(--input-text);\n          background-color: var(--input-bg);\n          border: 1px solid var(--input-border);\n          border-radius: var(--input-border-radius);\n          cursor: pointer;\n        }\n\n        /* Button Styles */\n        e2-app button,\n        e2-app input[type=\"button\"],\n        e2-app input[type=\"submit\"],\n        e2-app input[type=\"reset\"] {\n          display: inline-block;\n          padding: var(--button-padding);\n          font-size: var(--input-font-size);\n          font-family: var(--font-family);\n          font-weight: 500;\n          line-height: var(--line-height);\n          color: var(--button-text);\n          text-align: center;\n          text-decoration: none;\n          vertical-align: middle;\n          cursor: pointer;\n          background-color: var(--button-bg);\n          border: 1px solid var(--button-border);\n          border-radius: var(--button-border-radius);\n          transition: all var(--transition-fast);\n          user-select: none;\n        }\n\n        e2-app button:hover,\n        e2-app input[type=\"button\"]:hover,\n        e2-app input[type=\"submit\"]:hover,\n        e2-app input[type=\"reset\"]:hover {\n          background-color: var(--button-bg-hover);\n          border-color: var(--border-color-hover);\n        }\n\n        e2-app button:focus,\n        e2-app input[type=\"button\"]:focus,\n        e2-app input[type=\"submit\"]:focus,\n        e2-app input[type=\"reset\"]:focus {\n          outline: 0;\n          box-shadow: 0 0 0 2px rgba(13, 110, 253, 0.25);\n        }\n\n        e2-app button:disabled,\n        e2-app input[type=\"button\"]:disabled,\n        e2-app input[type=\"submit\"]:disabled,\n        e2-app input[type=\"reset\"]:disabled {\n          opacity: 0.6;\n          cursor: not-allowed;\n          pointer-events: none;\n        }\n\n        /* Primary Button Variant */\n        e2-app button.primary,\n        e2-app input[type=\"submit\"] {\n          color: white;\n          background-color: var(--accent-color);\n          border-color: var(--accent-color);\n        }\n\n        e2-app button.primary:hover,\n        e2-app input[type=\"submit\"]:hover {\n          background-color: var(--accent-color-hover);\n          border-color: var(--accent-color-hover);\n        }\n\n        /* Label Styles */\n        e2-app label {\n          display: inline-block;\n          margin-bottom: 4px;\n          font-weight: 500;\n          color: var(--text-primary);\n          cursor: pointer;\n        }\n\n        /* Fieldset and Legend */\n        e2-app fieldset {\n          padding: 16px;\n          margin: 0 0 16px 0;\n          border: 1px solid var(--border-color);\n          border-radius: var(--input-border-radius);\n        }\n\n        e2-app legend {\n          padding: 0 8px;\n          font-weight: 600;\n          color: var(--text-primary);\n        }\n\n        /* Form Groups */\n        e2-app .form-group {\n          margin-bottom: 16px;\n        }\n\n        e2-app .form-group label {\n          display: block;\n          margin-bottom: 4px;\n        }\n\n        /* Utility Classes */\n        e2-app .text-muted {\n          color: var(--text-muted) !important;\n        }\n\n        e2-app .text-primary {\n          color: var(--text-primary) !important;\n        }\n\n        e2-app .text-secondary {\n          color: var(--text-secondary) !important;\n        }\n\n        e2-app .bg-primary {\n          background-color: var(--bg-primary) !important;\n        }\n\n        e2-app .bg-secondary {\n          background-color: var(--bg-secondary) !important;\n        }\n\n        e2-app .border {\n          border: 1px solid var(--border-color) !important;\n        }\n\n        e2-app .rounded {\n          border-radius: var(--input-border-radius) !important;\n        }\n\n        e2-app .shadow {\n          box-shadow: var(--shadow) !important;\n        }\n\n        e2-app .shadow-sm {\n          box-shadow: var(--shadow-sm) !important;\n        }\n\n        e2-app .shadow-lg {\n          box-shadow: var(--shadow-lg) !important;\n        }\n      `;\n\n      // Add style element to document head instead of modifying the App element's DOM\n      // This prevents interference with child custom element initialization\n      document.head.appendChild(styleElement);\n      this._stylesInitialized = true;\n    }\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('e2-app');\n    }\n\n    // Set up element after it's connected to DOM\n    this.setupElement();\n\n    this.applyTheme(this._theme);\n\n    // Set up system theme detection for auto mode\n    if (this._theme === 'auto') {\n      this.setupAutoTheme();\n    }\n\n    // Notify child elements about initial theme\n    // Use setTimeout to ensure child elements are connected first\n    setTimeout(() => {\n      notifyThemeChange(this, this._theme);\n    }, 0);\n  }\n\n  disconnectedCallback(): void {\n    // Clean up theme listeners if any\n    if (this.mediaQueryList) {\n      this.mediaQueryList.removeEventListener('change', this.handleThemeChange);\n    }\n  }\n\n  private mediaQueryList?: MediaQueryList;\n  private handleThemeChange = () => {\n    if (this._theme === 'auto') {\n      this.applyTheme('auto');\n      // Notify child elements about system theme change\n      notifyThemeChange(this, 'auto');\n    }\n  };\n\n  private setupAutoTheme(): void {\n    if (typeof window !== 'undefined' && window.matchMedia) {\n      this.mediaQueryList = window.matchMedia('(prefers-color-scheme: dark)');\n      this.mediaQueryList.addEventListener('change', this.handleThemeChange);\n    }\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string,\n    newValue: string\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'theme':\n        this.theme = newValue as Theme;\n        break;\n    }\n  }\n\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    const oldTheme = this._theme;\n    this._theme = value;\n    this.applyTheme(value);\n\n    if (value === 'auto') {\n      this.setupAutoTheme();\n    } else if (this.mediaQueryList) {\n      this.mediaQueryList.removeEventListener('change', this.handleThemeChange);\n      this.mediaQueryList = undefined;\n    }\n\n    // Notify child elements about theme change\n    if (oldTheme !== value) {\n      notifyThemeChange(this, value);\n    }\n  }\n\n  applyTheme(theme: Theme): void {\n    applyTheme(this, theme);\n  }\n\n  /**\n   * Set a custom CSS property value\n   */\n  setCSSVariable(property: string, value: string): void {\n    this.style.setProperty(`--${property}`, value);\n  }\n\n  /**\n   * Get a custom CSS property value\n   */\n  getCSSVariable(property: string): string {\n    return getComputedStyle(this).getPropertyValue(`--${property}`).trim();\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-app')) {\n  customElements.define('e2-app', E2App);\n}\n","/**\n * Context Menu Element\n * A popup menu that appears on right-click or programmatic trigger\n */\n\nimport {\n  ContextMenuHideEvent,\n  ContextMenuShowEvent,\n  EditorElementProperties,\n  Theme,\n} from '../../types';\nimport {\n  applyEffectiveTheme,\n  applyTheme,\n  dispatchCustomEvent,\n  generateId,\n  getShadowRoot,\n  setupThemeInheritance,\n} from '../../utils';\n\nexport class ContextMenu\n  extends HTMLElement\n  implements EditorElementProperties\n{\n  private _theme: Theme = 'auto';\n  private _visible: boolean = false;\n  private _justShown: boolean = false;\n  private _themeCleanup?: () => void;\n\n  static get observedAttributes(): string[] {\n    return ['theme', 'disabled', 'target'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n    this.bindEvents();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          position: fixed;\n          z-index: 9999;\n          display: none;\n          min-width: 180px;\n          background: var(--context-menu-bg, #ffffff);\n          border: 1px solid var(--context-menu-border, #d0d0d0);\n          border-radius: 4px;\n          box-shadow: var(--context-menu-shadow, 0 2px 8px rgba(0, 0, 0, 0.15));\n          padding: 4px 0;\n          font-family: inherit;\n          font-size: 14px;\n        }\n\n        :host([visible]) {\n          display: block;\n        }\n\n        :host([disabled]) {\n          opacity: 0.6;\n          pointer-events: none;\n        }\n\n        /* Light theme */\n        :host(.theme-light) {\n          background: var(--context-menu-bg-light, #ffffff);\n          border-color: var(--context-menu-border-light, #d0d0d0);\n          box-shadow: var(--context-menu-shadow-light, 0 2px 8px rgba(0, 0, 0, 0.15));\n        }\n\n        /* Dark theme */\n        :host(.theme-dark) {\n          background: var(--context-menu-bg-dark, #2a2a2a);\n          border-color: var(--context-menu-border-dark, #444444);\n          box-shadow: var(--context-menu-shadow-dark, 0 2px 8px rgba(0, 0, 0, 0.4));\n        }\n\n        /* Auto theme - follows system preference */\n        @media (prefers-color-scheme: dark) {\n          :host(.theme-auto) {\n            background: var(--context-menu-bg-dark, #2a2a2a);\n            border-color: var(--context-menu-border-dark, #444444);\n            box-shadow: var(--context-menu-shadow-dark, 0 2px 8px rgba(0, 0, 0, 0.4));\n          }\n        }\n\n        ::slotted(*) {\n          display: block;\n        }\n      </style>\n      <slot></slot>\n    `;\n  }\n\n  private bindEvents(): void {\n    // Close menu when clicking outside\n    document.addEventListener('click', this.handleDocumentClick.bind(this));\n\n    // Close menu on escape key\n    document.addEventListener('keydown', this.handleKeyDown.bind(this));\n\n    // Handle window resize\n    window.addEventListener('resize', this.handleWindowResize.bind(this));\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('context-menu');\n    }\n\n    // Set up theme inheritance if no explicit theme is set\n    if (!this.hasAttribute('theme')) {\n      applyEffectiveTheme(this);\n      this._themeCleanup = setupThemeInheritance(this);\n    } else {\n      this.applyTheme(this._theme);\n    }\n\n    this.setupTargetListeners();\n  }\n\n  disconnectedCallback(): void {\n    this.removeTargetListeners();\n\n    // Clean up theme inheritance listener\n    if (this._themeCleanup) {\n      this._themeCleanup();\n      this._themeCleanup = undefined;\n    }\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string,\n    newValue: string\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'theme':\n        // If theme attribute is being set, use explicit theme\n        // If theme attribute is being removed, switch to inheritance\n        if (newValue) {\n          this._theme = newValue as Theme;\n          // Clean up any existing theme inheritance\n          if (this._themeCleanup) {\n            this._themeCleanup();\n            this._themeCleanup = undefined;\n          }\n          this.applyTheme(this._theme);\n        } else if (this.isConnected) {\n          // Attribute was removed, switch to inheritance\n          this._theme = 'auto';\n          applyEffectiveTheme(this);\n          this._themeCleanup = setupThemeInheritance(this);\n        }\n        break;\n      case 'target':\n        this.removeTargetListeners();\n        this.setupTargetListeners();\n        break;\n      case 'disabled':\n        if (newValue !== null && this._visible) {\n          this.hide();\n        }\n        break;\n    }\n  }\n\n  private boundContextMenuHandler = this.handleContextMenu.bind(this);\n\n  private setupTargetListeners(): void {\n    const targetSelector = this.getAttribute('target');\n    if (!targetSelector) return;\n\n    const targets = document.querySelectorAll(targetSelector);\n    targets.forEach(target => {\n      target.addEventListener('contextmenu', this.boundContextMenuHandler);\n    });\n  }\n\n  private removeTargetListeners(): void {\n    const targetSelector = this.getAttribute('target');\n    if (!targetSelector) return;\n\n    const targets = document.querySelectorAll(targetSelector);\n    targets.forEach(target => {\n      target.removeEventListener('contextmenu', this.boundContextMenuHandler);\n    });\n  }\n\n  private handleContextMenu(event: Event): void {\n    if (this.disabled) return;\n\n    const mouseEvent = event as MouseEvent;\n    mouseEvent.preventDefault();\n    mouseEvent.stopPropagation();\n\n    const trigger = mouseEvent.currentTarget as HTMLElement;\n    this.show(mouseEvent.clientX, mouseEvent.clientY, trigger);\n  }\n\n  private handleDocumentClick(event: MouseEvent): void {\n    if (!this._visible) return;\n\n    // Ignore the click that just triggered the menu to show\n    if (this._justShown) {\n      this._justShown = false;\n      return;\n    }\n\n    const target = event.target as Node;\n    if (!this.contains(target) && !this.shadowRoot?.contains(target)) {\n      this.hide();\n    }\n  }\n\n  private handleKeyDown(event: KeyboardEvent): void {\n    if (!this._visible) return;\n\n    switch (event.key) {\n      case 'Escape':\n        event.preventDefault();\n        this.hide();\n        break;\n      case 'ArrowDown':\n        event.preventDefault();\n        this.focusNextItem();\n        break;\n      case 'ArrowUp':\n        event.preventDefault();\n        this.focusPreviousItem();\n        break;\n      case 'Enter':\n      case ' ':\n        event.preventDefault();\n        this.activateFocusedItem();\n        break;\n    }\n  }\n\n  private handleWindowResize(): void {\n    if (this._visible) {\n      this.hide();\n    }\n  }\n\n  private focusNextItem(): void {\n    const items = this.querySelectorAll('e2-context-menu-item:not([disabled])');\n    const currentIndex = Array.from(items).findIndex(\n      item => item === document.activeElement || item.shadowRoot?.activeElement\n    );\n\n    const nextIndex = currentIndex < items.length - 1 ? currentIndex + 1 : 0;\n    (items[nextIndex] as HTMLElement).focus();\n  }\n\n  private focusPreviousItem(): void {\n    const items = this.querySelectorAll('e2-context-menu-item:not([disabled])');\n    const currentIndex = Array.from(items).findIndex(\n      item => item === document.activeElement || item.shadowRoot?.activeElement\n    );\n\n    const prevIndex = currentIndex > 0 ? currentIndex - 1 : items.length - 1;\n    (items[prevIndex] as HTMLElement).focus();\n  }\n\n  private activateFocusedItem(): void {\n    const focused = document.activeElement;\n    if (focused && focused.tagName === 'e2-context-menu-ITEM') {\n      (focused as any).click();\n    }\n  }\n\n  // Public API\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this._theme = value;\n    this.setAttribute('theme', value);\n\n    // Clean up any existing theme inheritance\n    if (this._themeCleanup) {\n      this._themeCleanup();\n      this._themeCleanup = undefined;\n    }\n  }\n\n  get disabled(): boolean {\n    return this.hasAttribute('disabled');\n  }\n\n  set disabled(value: boolean) {\n    if (value) {\n      this.setAttribute('disabled', '');\n    } else {\n      this.removeAttribute('disabled');\n    }\n  }\n\n  get visible(): boolean {\n    return this._visible;\n  }\n\n  get target(): string | null {\n    return this.getAttribute('target');\n  }\n\n  set target(value: string | null) {\n    if (value) {\n      this.setAttribute('target', value);\n    } else {\n      this.removeAttribute('target');\n    }\n  }\n\n  show(x: number, y: number, trigger?: HTMLElement): void {\n    if (this.disabled) return;\n\n    this._visible = true;\n    this.setAttribute('visible', '');\n\n    // Position the menu\n    this.style.left = `${x}px`;\n    this.style.top = `${y}px`;\n\n    // Ensure menu stays within viewport\n    this.adjustPosition();\n\n    // Set the flag to prevent immediate hiding, reset it after a short delay\n    this._justShown = true;\n    setTimeout(() => {\n      this._justShown = false;\n    }, 50);\n\n    // Ensure all child items have the correct theme\n    this.applyTheme(this._theme);\n\n    // Focus first item\n    requestAnimationFrame(() => {\n      const firstItem = this.querySelector(\n        'e2-context-menu-item:not([disabled])'\n      ) as HTMLElement;\n      if (firstItem) {\n        firstItem.focus();\n      }\n    });\n\n    // Dispatch show event\n    dispatchCustomEvent<ContextMenuShowEvent['detail']>(\n      this,\n      'context-menu-show',\n      {\n        menuId: this.id,\n        menu: this,\n        x,\n        y,\n        trigger: trigger || this,\n      }\n    );\n  }\n\n  hide(): void {\n    if (!this._visible) return;\n\n    this._visible = false;\n    this.removeAttribute('visible');\n\n    // Dispatch hide event\n    dispatchCustomEvent<ContextMenuHideEvent['detail']>(\n      this,\n      'context-menu-hide',\n      {\n        menuId: this.id,\n        menu: this,\n      }\n    );\n  }\n\n  private adjustPosition(): void {\n    const rect = this.getBoundingClientRect();\n    const viewportWidth = window.innerWidth;\n    const viewportHeight = window.innerHeight;\n\n    let left = parseInt(this.style.left);\n    let top = parseInt(this.style.top);\n\n    // Adjust horizontal position\n    if (left + rect.width > viewportWidth) {\n      left = viewportWidth - rect.width - 10;\n    }\n    if (left < 10) {\n      left = 10;\n    }\n\n    // Adjust vertical position\n    if (top + rect.height > viewportHeight) {\n      top = viewportHeight - rect.height - 10;\n    }\n    if (top < 10) {\n      top = 10;\n    }\n\n    this.style.left = `${left}px`;\n    this.style.top = `${top}px`;\n  }\n\n  applyTheme(theme: Theme): void {\n    this._theme = theme;\n    applyTheme(this, theme);\n\n    // Apply theme to all child context menu items and separators\n    const childItems = this.querySelectorAll(\n      'e2-context-menu-item, e2-context-menu-separator'\n    );\n    childItems.forEach(child => {\n      if (typeof (child as any).applyTheme === 'function') {\n        (child as any).applyTheme(theme);\n      }\n    });\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-context-menu')) {\n  customElements.define('e2-context-menu', ContextMenu);\n}\n","/**\n * Context Menu Item Element\n * A clickable item within a context menu\n */\n\nimport {\n  ContextMenuItemClickEvent,\n  EditorElementProperties,\n  Theme,\n} from '../../types';\nimport {\n  applyEffectiveTheme,\n  applyTheme,\n  dispatchCustomEvent,\n  generateId,\n  getShadowRoot,\n  setupThemeInheritance,\n} from '../../utils';\n\nexport class ContextMenuItem\n  extends HTMLElement\n  implements EditorElementProperties\n{\n  private _theme: Theme = 'auto';\n  private _themeCleanup?: () => void;\n\n  static get observedAttributes(): string[] {\n    return ['label', 'icon', 'theme', 'disabled', 'value', 'shortcut'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: block;\n        }\n\n        .item {\n          display: flex;\n          align-items: center;\n          padding: 8px 16px;\n          cursor: pointer;\n          color: var(--context-menu-item-color, #333);\n          background: transparent;\n          border: none;\n          width: 100%;\n          text-align: left;\n          font-family: inherit;\n          font-size: inherit;\n          line-height: 1.4;\n          transition: background-color 0.15s ease;\n          outline: none;\n        }\n\n        .item:hover,\n        .item:focus {\n          background: var(--context-menu-item-hover-bg, rgba(0, 0, 0, 0.1));\n        }\n\n        .item:disabled {\n          opacity: 0.6;\n          cursor: not-allowed;\n        }\n\n        .item:disabled:hover {\n          background: transparent;\n        }\n\n        .icon {\n          width: 16px;\n          height: 16px;\n          margin-right: 8px;\n          flex-shrink: 0;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n        }\n\n        .icon:empty {\n          margin-right: 0;\n          width: 0;\n        }\n\n        .content {\n          flex: 1;\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          min-width: 0;\n        }\n\n        .label {\n          flex: 1;\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n        }\n\n        .shortcut {\n          color: var(--context-menu-item-shortcut-color, #666);\n          font-size: 0.85em;\n          margin-left: 12px;\n          flex-shrink: 0;\n        }\n\n        /* Light theme */\n        :host(.theme-light) .item {\n          color: var(--context-menu-item-color-light, #333);\n        }\n\n        :host(.theme-light) .item:hover,\n        :host(.theme-light) .item:focus {\n          background: var(--context-menu-item-hover-bg-light, rgba(0, 0, 0, 0.1));\n        }\n\n        :host(.theme-light) .shortcut {\n          color: var(--context-menu-item-shortcut-color-light, #666);\n        }\n\n        /* Dark theme */\n        :host(.theme-dark) .item {\n          color: var(--context-menu-item-color-dark, #fff);\n        }\n\n        :host(.theme-dark) .item:hover,\n        :host(.theme-dark) .item:focus {\n          background: var(--context-menu-item-hover-bg-dark, rgba(255, 255, 255, 0.1));\n        }\n\n        :host(.theme-dark) .shortcut {\n          color: var(--context-menu-item-shortcut-color-dark, #aaa);\n        }\n\n        /* Auto theme - follows system preference */\n        @media (prefers-color-scheme: dark) {\n          :host(.theme-auto) .item {\n            color: var(--context-menu-item-color-dark, #fff);\n          }\n\n          :host(.theme-auto) .item:hover,\n          :host(.theme-auto) .item:focus {\n            background: var(--context-menu-item-hover-bg-dark, rgba(255, 255, 255, 0.1));\n          }\n\n          :host(.theme-auto) .shortcut {\n            color: var(--context-menu-item-shortcut-color-dark, #aaa);\n          }\n        }\n      </style>\n      <button class=\"item\" type=\"button\">\n        <span class=\"icon\"></span>\n        <div class=\"content\">\n          <span class=\"label\"></span>\n          <span class=\"shortcut\"></span>\n        </div>\n      </button>\n    `;\n\n    const button = shadowRoot.querySelector('.item')!;\n    button.addEventListener('click', this.handleClick.bind(this));\n    button.addEventListener('keydown', (event: Event) =>\n      this.handleKeyDown(event as KeyboardEvent)\n    );\n\n    // Make the element focusable\n    this.tabIndex = 0;\n    this.addEventListener('focus', this.handleFocus.bind(this));\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('context-menu-item');\n    }\n\n    // Set up theme inheritance if no explicit theme is set\n    if (!this.hasAttribute('theme')) {\n      applyEffectiveTheme(this);\n      this._themeCleanup = setupThemeInheritance(this);\n    } else {\n      this.applyTheme(this._theme);\n    }\n\n    this.updateContent();\n  }\n\n  disconnectedCallback(): void {\n    // Clean up theme inheritance listener\n    if (this._themeCleanup) {\n      this._themeCleanup();\n      this._themeCleanup = undefined;\n    }\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string,\n    newValue: string\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'theme':\n        // If theme attribute is being set, use explicit theme\n        // If theme attribute is being removed, switch to inheritance\n        if (newValue) {\n          this._theme = newValue as Theme;\n          // Clean up any existing theme inheritance\n          if (this._themeCleanup) {\n            this._themeCleanup();\n            this._themeCleanup = undefined;\n          }\n          this.applyTheme(this._theme);\n        } else if (this.isConnected) {\n          // Attribute was removed, switch to inheritance\n          this._theme = 'auto';\n          applyEffectiveTheme(this);\n          this._themeCleanup = setupThemeInheritance(this);\n        }\n        break;\n      case 'label':\n      case 'icon':\n      case 'shortcut':\n        this.updateContent();\n        break;\n      case 'disabled':\n        this.updateDisabledState();\n        break;\n    }\n  }\n\n  private updateContent(): void {\n    if (!this.shadowRoot) return;\n\n    const iconElement = this.shadowRoot.querySelector('.icon') as HTMLElement;\n    const labelElement = this.shadowRoot.querySelector('.label') as HTMLElement;\n    const shortcutElement = this.shadowRoot.querySelector(\n      '.shortcut'\n    ) as HTMLElement;\n\n    // Update icon\n    const icon = this.getAttribute('icon');\n    if (icon) {\n      iconElement.textContent = icon;\n      iconElement.style.display = 'flex';\n    } else {\n      iconElement.textContent = '';\n      iconElement.style.display = 'none';\n    }\n\n    // Update label\n    const label = this.getAttribute('label') || this.textContent?.trim() || '';\n    labelElement.textContent = label;\n\n    // Update shortcut\n    const shortcut = this.getAttribute('shortcut');\n    if (shortcut) {\n      shortcutElement.textContent = shortcut;\n      shortcutElement.style.display = 'block';\n    } else {\n      shortcutElement.textContent = '';\n      shortcutElement.style.display = 'none';\n    }\n  }\n\n  private updateDisabledState(): void {\n    if (!this.shadowRoot) return;\n\n    const button = this.shadowRoot.querySelector('.item') as HTMLButtonElement;\n    button.disabled = this.disabled;\n  }\n\n  private handleClick(event: Event): void {\n    if (this.disabled) return;\n\n    event.stopPropagation();\n\n    // Find the parent context menu\n    const contextMenu = this.closest('e2-context-menu');\n\n    // Dispatch item click event\n    dispatchCustomEvent<ContextMenuItemClickEvent['detail']>(\n      this,\n      'context-menu-item-click',\n      {\n        itemId: this.id,\n        item: this,\n        menuId: contextMenu?.id || '',\n        menu: contextMenu as HTMLElement,\n        value: this.value,\n      }\n    );\n\n    // Hide the context menu\n    if (contextMenu && typeof (contextMenu as any).hide === 'function') {\n      (contextMenu as any).hide();\n    }\n  }\n\n  private handleKeyDown(event: KeyboardEvent): void {\n    if (this.disabled) return;\n\n    // Let the parent context menu handle navigation keys\n    if (['ArrowDown', 'ArrowUp', 'Escape'].includes(event.key)) {\n      return;\n    }\n\n    if (event.key === 'Enter' || event.key === ' ') {\n      event.preventDefault();\n      this.handleClick(event);\n    }\n  }\n\n  private handleFocus(): void {\n    if (!this.shadowRoot) return;\n\n    const button = this.shadowRoot.querySelector('.item') as HTMLButtonElement;\n    button.focus();\n  }\n\n  // Public API\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this._theme = value;\n    this.setAttribute('theme', value);\n\n    // Clean up any existing theme inheritance\n    if (this._themeCleanup) {\n      this._themeCleanup();\n      this._themeCleanup = undefined;\n    }\n  }\n\n  get disabled(): boolean {\n    return this.hasAttribute('disabled');\n  }\n\n  set disabled(value: boolean) {\n    if (value) {\n      this.setAttribute('disabled', '');\n    } else {\n      this.removeAttribute('disabled');\n    }\n  }\n\n  get label(): string {\n    return this.getAttribute('label') || '';\n  }\n\n  set label(value: string) {\n    this.setAttribute('label', value);\n  }\n\n  get icon(): string {\n    return this.getAttribute('icon') || '';\n  }\n\n  set icon(value: string) {\n    if (value) {\n      this.setAttribute('icon', value);\n    } else {\n      this.removeAttribute('icon');\n    }\n  }\n\n  get value(): string {\n    return this.getAttribute('value') || this.label;\n  }\n\n  set value(value: string) {\n    this.setAttribute('value', value);\n  }\n\n  get shortcut(): string {\n    return this.getAttribute('shortcut') || '';\n  }\n\n  set shortcut(value: string) {\n    if (value) {\n      this.setAttribute('shortcut', value);\n    } else {\n      this.removeAttribute('shortcut');\n    }\n  }\n\n  click(): void {\n    if (!this.disabled) {\n      this.handleClick(new Event('click'));\n    }\n  }\n\n  focus(): void {\n    super.focus();\n    this.handleFocus();\n  }\n\n  applyTheme(theme: Theme): void {\n    this._theme = theme;\n    applyTheme(this, theme);\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-context-menu-item')) {\n  customElements.define('e2-context-menu-item', ContextMenuItem);\n}\n","/**\n * Context Menu Separator Element\n * A visual separator line between context menu items\n */\n\nimport { EditorElementProperties, Theme } from '../../types';\nimport {\n  applyEffectiveTheme,\n  applyTheme,\n  getShadowRoot,\n  setupThemeInheritance,\n} from '../../utils';\n\nexport class ContextMenuSeparator\n  extends HTMLElement\n  implements EditorElementProperties\n{\n  private _theme: Theme = 'auto';\n  private _themeCleanup?: () => void;\n\n  static get observedAttributes(): string[] {\n    return ['theme'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: block;\n          margin: 4px 0;\n        }\n\n        .separator {\n          height: 1px;\n          background: var(--context-menu-separator-color, #e0e0e0);\n          margin: 0 8px;\n        }\n\n        /* Light theme */\n        :host(.theme-light) .separator {\n          background: var(--context-menu-separator-color-light, #e0e0e0);\n        }\n\n        /* Dark theme */\n        :host(.theme-dark) .separator {\n          background: var(--context-menu-separator-color-dark, #555);\n        }\n\n        /* Auto theme - follows system preference */\n        @media (prefers-color-scheme: dark) {\n          :host(.theme-auto) .separator {\n            background: var(--context-menu-separator-color-dark, #555);\n          }\n        }\n      </style>\n      <div class=\"separator\"></div>\n    `;\n  }\n\n  connectedCallback(): void {\n    // Set up theme inheritance if no explicit theme is set\n    if (!this.hasAttribute('theme')) {\n      applyEffectiveTheme(this);\n      this._themeCleanup = setupThemeInheritance(this);\n    } else {\n      this.applyTheme(this._theme);\n    }\n  }\n\n  disconnectedCallback(): void {\n    // Clean up theme inheritance listener\n    if (this._themeCleanup) {\n      this._themeCleanup();\n      this._themeCleanup = undefined;\n    }\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string,\n    newValue: string\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'theme':\n        // If theme attribute is being set, use explicit theme\n        // If theme attribute is being removed, switch to inheritance\n        if (newValue) {\n          this._theme = newValue as Theme;\n          // Clean up any existing theme inheritance\n          if (this._themeCleanup) {\n            this._themeCleanup();\n            this._themeCleanup = undefined;\n          }\n          this.applyTheme(this._theme);\n        } else if (this.isConnected) {\n          // Attribute was removed, switch to inheritance\n          this._theme = 'auto';\n          applyEffectiveTheme(this);\n          this._themeCleanup = setupThemeInheritance(this);\n        }\n        break;\n    }\n  }\n\n  // Public API\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this._theme = value;\n    this.setAttribute('theme', value);\n\n    // Clean up any existing theme inheritance\n    if (this._themeCleanup) {\n      this._themeCleanup();\n      this._themeCleanup = undefined;\n    }\n  }\n\n  get disabled(): boolean {\n    return false; // Separators cannot be disabled\n  }\n\n  set disabled(_value: boolean) {\n    // Separators cannot be disabled\n  }\n\n  applyTheme(theme: Theme): void {\n    this._theme = theme;\n    applyTheme(this, theme);\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-context-menu-separator')) {\n  customElements.define('e2-context-menu-separator', ContextMenuSeparator);\n}\n","/**\n * Alert Dialog Element\n * A specialized dialog for displaying messages and notifications\n */\n\nimport { AlertType, EditorElementProperties, Theme } from '../../types';\nimport {\n  applyEffectiveTheme,\n  applyTheme,\n  dispatchCustomEvent,\n  generateId,\n  getShadowRoot,\n  setupThemeInheritance,\n} from '../../utils';\n\nexport class AlertDialogElement\n  extends HTMLElement\n  implements EditorElementProperties\n{\n  private _theme: Theme = 'auto';\n  private _nativeDialog: HTMLDialogElement | null = null;\n  private _resolvePromise: ((value: void) => void) | null = null;\n  private _rejectPromise: ((reason?: any) => void) | null = null;\n  private _themeCleanup?: () => void;\n\n  static get observedAttributes(): string[] {\n    return ['title', 'message', 'button-text', 'theme', 'type'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          --dialog-bg: #ffffff;\n          --dialog-border: #e0e0e0;\n          --dialog-shadow: rgba(0, 0, 0, 0.25);\n          --dialog-backdrop: rgba(0, 0, 0, 0.5);\n          --text-color: #333333;\n          --text-secondary: #666666;\n          --button-bg: #007bff;\n          --button-hover: #0056b3;\n          --button-active: #004085;\n          --icon-info: #17a2b8;\n          --icon-success: #28a745;\n          --icon-warning: #ffc107;\n          --icon-error: #dc3545;\n\n          display: block;\n        }\n\n        :host(.theme-dark) {\n          --dialog-bg: #2d2d2d;\n          --dialog-border: #555555;\n          --dialog-shadow: rgba(0, 0, 0, 0.5);\n          --dialog-backdrop: rgba(0, 0, 0, 0.7);\n          --text-color: #ffffff;\n          --text-secondary: #cccccc;\n          --button-bg: #0d6efd;\n          --button-hover: #0b5ed7;\n          --button-active: #0a58ca;\n          --icon-info: #0dcaf0;\n          --icon-success: #198754;\n          --icon-warning: #fd7e14;\n          --icon-error: #dc3545;\n        }\n\n        dialog {\n          border: 1px solid var(--dialog-border);\n          border-radius: 8px;\n          padding: 0;\n          background: var(--dialog-bg);\n          color: var(--text-color);\n          font-family: var(--font-family, system-ui, sans-serif);\n          font-size: var(--font-size, 14px);\n          box-shadow: 0 8px 24px var(--dialog-shadow);\n          min-width: 320px;\n          max-width: 500px;\n          animation: dialog-fade-in 0.2s ease-out;\n        }\n\n        dialog::backdrop {\n          background: var(--dialog-backdrop);\n          animation: backdrop-fade-in 0.2s ease-out;\n        }\n\n        @keyframes dialog-fade-in {\n          from {\n            opacity: 0;\n            transform: scale(0.9) translateY(-20px);\n          }\n          to {\n            opacity: 1;\n            transform: scale(1) translateY(0);\n          }\n        }\n\n        @keyframes backdrop-fade-in {\n          from { opacity: 0; }\n          to { opacity: 1; }\n        }\n\n        .dialog-content {\n          padding: 24px;\n        }\n\n        .dialog-header {\n          display: flex;\n          align-items: flex-start;\n          gap: 12px;\n          margin-bottom: 16px;\n        }\n\n        .dialog-icon {\n          flex-shrink: 0;\n          width: 24px;\n          height: 24px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          font-size: 20px;\n          margin-top: 2px;\n        }\n\n        .dialog-icon.type-info {\n          color: var(--icon-info);\n        }\n\n        .dialog-icon.type-success {\n          color: var(--icon-success);\n        }\n\n        .dialog-icon.type-warning {\n          color: var(--icon-warning);\n        }\n\n        .dialog-icon.type-error {\n          color: var(--icon-error);\n        }\n\n        .dialog-text {\n          flex: 1;\n        }\n\n        .dialog-title {\n          font-size: 18px;\n          font-weight: 600;\n          margin: 0 0 8px 0;\n          color: var(--text-color);\n        }\n\n        .dialog-message {\n          color: var(--text-secondary);\n          line-height: 1.5;\n          margin: 0;\n          white-space: pre-wrap;\n        }\n\n        .dialog-buttons {\n          display: flex;\n          justify-content: center;\n          margin-top: 24px;\n        }\n\n        .dialog-button {\n          padding: 10px 24px;\n          border: none;\n          border-radius: 4px;\n          background: var(--button-bg);\n          color: white;\n          font-family: inherit;\n          font-size: 14px;\n          font-weight: 500;\n          cursor: pointer;\n          transition: all 0.15s ease;\n          min-width: 100px;\n        }\n\n        .dialog-button:hover {\n          background: var(--button-hover);\n        }\n\n        .dialog-button:active {\n          background: var(--button-active);\n        }\n\n        .dialog-button:focus {\n          outline: 2px solid var(--button-bg);\n          outline-offset: 2px;\n        }\n\n        :host([hidden]) {\n          display: none !important;\n        }\n      </style>\n\n      <dialog part=\"dialog\">\n        <div class=\"dialog-content\" part=\"content\">\n          <div class=\"dialog-header\" part=\"header\">\n            <div class=\"dialog-icon type-info\" part=\"icon\">ℹ️</div>\n            <div class=\"dialog-text\" part=\"text\">\n              <h3 class=\"dialog-title\" part=\"title\">Information</h3>\n              <p class=\"dialog-message\" part=\"message\">This is an alert message.</p>\n            </div>\n          </div>\n\n          <div class=\"dialog-buttons\" part=\"buttons\">\n            <button class=\"dialog-button\" part=\"button\" type=\"button\">\n              OK\n            </button>\n          </div>\n        </div>\n      </dialog>\n    `;\n\n    this._nativeDialog = shadowRoot.querySelector('dialog');\n    const button = shadowRoot.querySelector('.dialog-button');\n\n    // Set up event listeners\n    if (this._nativeDialog) {\n      this._nativeDialog.addEventListener('close', this.handleClose.bind(this));\n      this._nativeDialog.addEventListener(\n        'cancel',\n        this.handleCancel.bind(this)\n      );\n    }\n\n    if (button) {\n      button.addEventListener('click', () => this.close());\n    }\n\n    // Apply initial theme\n    this.applyTheme(this._theme);\n    this.updateContent();\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('alert-dialog');\n    }\n\n    // Set up theme inheritance if no explicit theme is set\n    if (!this.hasAttribute('theme')) {\n      applyEffectiveTheme(this);\n      this._themeCleanup = setupThemeInheritance(this);\n    } else {\n      this.applyTheme(this._theme);\n    }\n  }\n\n  disconnectedCallback(): void {\n    // Clean up theme inheritance listener\n    if (this._themeCleanup) {\n      this._themeCleanup();\n      this._themeCleanup = undefined;\n    }\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string | null,\n    newValue: string | null\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'title':\n      case 'message':\n      case 'button-text':\n      case 'type':\n        this.updateContent();\n        break;\n      case 'theme':\n        // If theme attribute is being set, use explicit theme\n        // If theme attribute is being removed, switch to inheritance\n        if (newValue) {\n          this._theme = newValue as Theme;\n          // Clean up any existing theme inheritance\n          if (this._themeCleanup) {\n            this._themeCleanup();\n            this._themeCleanup = undefined;\n          }\n          this.applyTheme(this._theme);\n        } else if (this.isConnected) {\n          // Attribute was removed, switch to inheritance\n          this._theme = 'auto';\n          applyEffectiveTheme(this);\n          this._themeCleanup = setupThemeInheritance(this);\n        }\n        break;\n    }\n  }\n\n  private updateContent(): void {\n    const titleElement = this.shadowRoot?.querySelector('.dialog-title');\n    const messageElement = this.shadowRoot?.querySelector('.dialog-message');\n    const buttonElement = this.shadowRoot?.querySelector('.dialog-button');\n    const iconElement = this.shadowRoot?.querySelector('.dialog-icon');\n\n    if (titleElement) {\n      titleElement.textContent =\n        this.getAttribute('title') || this.getDefaultTitle();\n    }\n\n    if (messageElement) {\n      messageElement.textContent =\n        this.getAttribute('message') || 'This is an alert message.';\n    }\n\n    if (buttonElement) {\n      buttonElement.textContent = this.getAttribute('button-text') || 'OK';\n    }\n\n    if (iconElement) {\n      const type = this.getAttribute('type') || 'info';\n      iconElement.className = `dialog-icon type-${type}`;\n      iconElement.textContent = this.getIconForType(type);\n    }\n  }\n\n  private getDefaultTitle(): string {\n    const type = this.getAttribute('type') || 'info';\n    switch (type) {\n      case 'success':\n        return 'Success';\n      case 'warning':\n        return 'Warning';\n      case 'error':\n        return 'Error';\n      default:\n        return 'Information';\n    }\n  }\n\n  private getIconForType(type: string): string {\n    switch (type) {\n      case 'success':\n        return '✅';\n      case 'warning':\n        return '⚠️';\n      case 'error':\n        return '❌';\n      default:\n        return 'ℹ️';\n    }\n  }\n\n  private handleClose(): void {\n    if (this._resolvePromise) {\n      this._resolvePromise();\n      this._resolvePromise = null;\n      this._rejectPromise = null;\n    }\n\n    dispatchCustomEvent(this, 'alert-dialog-close', {\n      dialogId: this.id,\n      dialog: this,\n    });\n  }\n\n  private handleCancel(event: Event): void {\n    const cancelable = dispatchCustomEvent(this, 'alert-dialog-cancel', {\n      dialogId: this.id,\n      dialog: this,\n    });\n\n    if (!cancelable) {\n      event.preventDefault();\n    } else {\n      this.close();\n    }\n  }\n\n  private close(): void {\n    if (this._resolvePromise) {\n      this._resolvePromise();\n      this._resolvePromise = null;\n      this._rejectPromise = null;\n    }\n\n    dispatchCustomEvent(this, 'alert-dialog-dismiss', {\n      dialogId: this.id,\n      dialog: this,\n    });\n\n    this._nativeDialog?.close();\n  }\n\n  // Public API\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this.setAttribute('theme', value);\n\n    // Clean up any existing theme inheritance\n    if (this._themeCleanup) {\n      this._themeCleanup();\n      this._themeCleanup = undefined;\n    }\n  }\n\n  get title(): string {\n    return this.getAttribute('title') || this.getDefaultTitle();\n  }\n\n  set title(value: string) {\n    this.setAttribute('title', value);\n  }\n\n  get message(): string {\n    return this.getAttribute('message') || 'This is an alert message.';\n  }\n\n  set message(value: string) {\n    this.setAttribute('message', value);\n  }\n\n  get buttonText(): string {\n    return this.getAttribute('button-text') || 'OK';\n  }\n\n  set buttonText(value: string) {\n    this.setAttribute('button-text', value);\n  }\n\n  get type(): AlertType {\n    return (this.getAttribute('type') || 'info') as AlertType;\n  }\n\n  set type(value: AlertType) {\n    this.setAttribute('type', value);\n  }\n\n  get open(): boolean {\n    return this._nativeDialog?.open || false;\n  }\n\n  /**\n   * Show the alert dialog and return a promise that resolves when dismissed\n   */\n  public show(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (this._resolvePromise) {\n        // Already showing, reject the previous promise\n        this._rejectPromise?.(\n          new Error('Dialog was replaced by another show() call')\n        );\n      }\n\n      this._resolvePromise = resolve;\n      this._rejectPromise = reject;\n\n      dispatchCustomEvent(this, 'alert-dialog-show', {\n        dialogId: this.id,\n        dialog: this,\n      });\n\n      this._nativeDialog?.showModal();\n    });\n  }\n\n  public applyTheme(theme: Theme): void {\n    this._theme = theme;\n    applyTheme(this, theme);\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-alert')) {\n  customElements.define('e2-alert', AlertDialogElement);\n}\n","/**\n * Confirm Dialog Element\n * A specialized dialog for yes/no confirmations with promise-based API\n */\n\nimport { EditorElementProperties, Theme } from '../../types';\nimport {\n  applyEffectiveTheme,\n  applyTheme,\n  dispatchCustomEvent,\n  generateId,\n  getShadowRoot,\n  setupThemeInheritance,\n} from '../../utils';\n\nexport class ConfirmDialogElement\n  extends HTMLElement\n  implements EditorElementProperties\n{\n  private _theme: Theme = 'auto';\n  private _nativeDialog: HTMLDialogElement | null = null;\n  private _resolvePromise: ((value: boolean) => void) | null = null;\n  private _rejectPromise: ((reason?: any) => void) | null = null;\n  private _themeCleanup?: () => void;\n\n  static get observedAttributes(): string[] {\n    return [\n      'title',\n      'message',\n      'confirm-text',\n      'cancel-text',\n      'theme',\n      'danger',\n    ];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          --dialog-bg: #ffffff;\n          --dialog-border: #e0e0e0;\n          --dialog-shadow: rgba(0, 0, 0, 0.25);\n          --dialog-backdrop: rgba(0, 0, 0, 0.5);\n          --text-color: #333333;\n          --text-secondary: #666666;\n          --button-bg: #f8f9fa;\n          --button-border: #e0e0e0;\n          --button-hover: #e9ecef;\n          --button-active: #dee2e6;\n          --confirm-bg: #007bff;\n          --confirm-hover: #0056b3;\n          --confirm-active: #004085;\n          --danger-bg: #dc3545;\n          --danger-hover: #c82333;\n          --danger-active: #bd2130;\n\n          display: block;\n        }\n\n        :host(.theme-dark) {\n          --dialog-bg: #2d2d2d;\n          --dialog-border: #555555;\n          --dialog-shadow: rgba(0, 0, 0, 0.5);\n          --dialog-backdrop: rgba(0, 0, 0, 0.7);\n          --text-color: #ffffff;\n          --text-secondary: #cccccc;\n          --button-bg: #404040;\n          --button-border: #555555;\n          --button-hover: #4a4a4a;\n          --button-active: #555555;\n          --confirm-bg: #0d6efd;\n          --confirm-hover: #0b5ed7;\n          --confirm-active: #0a58ca;\n          --danger-bg: #dc3545;\n          --danger-hover: #bb2d3b;\n          --danger-active: #b02a37;\n        }\n\n        dialog {\n          border: 1px solid var(--dialog-border);\n          border-radius: 8px;\n          padding: 0;\n          background: var(--dialog-bg);\n          color: var(--text-color);\n          font-family: var(--font-family, system-ui, sans-serif);\n          font-size: var(--font-size, 14px);\n          box-shadow: 0 8px 24px var(--dialog-shadow);\n          min-width: 320px;\n          max-width: 500px;\n          animation: dialog-fade-in 0.2s ease-out;\n        }\n\n        dialog::backdrop {\n          background: var(--dialog-backdrop);\n          animation: backdrop-fade-in 0.2s ease-out;\n        }\n\n        @keyframes dialog-fade-in {\n          from {\n            opacity: 0;\n            transform: scale(0.9) translateY(-20px);\n          }\n          to {\n            opacity: 1;\n            transform: scale(1) translateY(0);\n          }\n        }\n\n        @keyframes backdrop-fade-in {\n          from { opacity: 0; }\n          to { opacity: 1; }\n        }\n\n        .dialog-content {\n          padding: 24px;\n        }\n\n        .dialog-title {\n          font-size: 18px;\n          font-weight: 600;\n          margin: 0 0 16px 0;\n          color: var(--text-color);\n        }\n\n        .dialog-message {\n          color: var(--text-secondary);\n          line-height: 1.5;\n          margin: 0 0 24px 0;\n        }\n\n        .dialog-buttons {\n          display: flex;\n          justify-content: flex-end;\n          gap: 12px;\n        }\n\n        .dialog-button {\n          padding: 8px 16px;\n          border: 1px solid var(--button-border);\n          border-radius: 4px;\n          background: var(--button-bg);\n          color: var(--text-color);\n          font-family: inherit;\n          font-size: 14px;\n          cursor: pointer;\n          transition: all 0.15s ease;\n          min-width: 80px;\n        }\n\n        .dialog-button:hover {\n          background: var(--button-hover);\n        }\n\n        .dialog-button:active {\n          background: var(--button-active);\n        }\n\n        .dialog-button:focus {\n          outline: 2px solid var(--confirm-bg);\n          outline-offset: 2px;\n        }\n\n        .confirm-button {\n          background: var(--confirm-bg);\n          color: white;\n          border-color: var(--confirm-bg);\n        }\n\n        .confirm-button:hover {\n          background: var(--confirm-hover);\n          border-color: var(--confirm-hover);\n        }\n\n        .confirm-button:active {\n          background: var(--confirm-active);\n          border-color: var(--confirm-active);\n        }\n\n        :host([danger]) .confirm-button {\n          background: var(--danger-bg);\n          border-color: var(--danger-bg);\n        }\n\n        :host([danger]) .confirm-button:hover {\n          background: var(--danger-hover);\n          border-color: var(--danger-hover);\n        }\n\n        :host([danger]) .confirm-button:active {\n          background: var(--danger-active);\n          border-color: var(--danger-active);\n        }\n\n        :host([danger]) .confirm-button:focus {\n          outline-color: var(--danger-bg);\n        }\n\n        :host([hidden]) {\n          display: none !important;\n        }\n      </style>\n\n      <dialog part=\"dialog\">\n        <div class=\"dialog-content\" part=\"content\">\n          <h3 class=\"dialog-title\" part=\"title\">Confirm</h3>\n          <p class=\"dialog-message\" part=\"message\">Are you sure?</p>\n\n          <div class=\"dialog-buttons\" part=\"buttons\">\n            <button class=\"dialog-button cancel-button\" part=\"cancel-button\" type=\"button\">\n              Cancel\n            </button>\n            <button class=\"dialog-button confirm-button\" part=\"confirm-button\" type=\"button\">\n              OK\n            </button>\n          </div>\n        </div>\n      </dialog>\n    `;\n\n    this._nativeDialog = shadowRoot.querySelector('dialog');\n    const confirmButton = shadowRoot.querySelector('.confirm-button');\n    const cancelButton = shadowRoot.querySelector('.cancel-button');\n\n    // Set up event listeners\n    if (this._nativeDialog) {\n      this._nativeDialog.addEventListener('close', this.handleClose.bind(this));\n      this._nativeDialog.addEventListener(\n        'cancel',\n        this.handleCancel.bind(this)\n      );\n    }\n\n    if (confirmButton) {\n      confirmButton.addEventListener('click', () => this.confirm());\n    }\n\n    if (cancelButton) {\n      cancelButton.addEventListener('click', () => this.cancel());\n    }\n\n    // Apply initial theme\n    this.applyTheme(this._theme);\n    this.updateContent();\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('confirm-dialog');\n    }\n\n    // Set up theme inheritance if no explicit theme is set\n    if (!this.hasAttribute('theme')) {\n      applyEffectiveTheme(this);\n      this._themeCleanup = setupThemeInheritance(this);\n    } else {\n      this.applyTheme(this._theme);\n    }\n  }\n\n  disconnectedCallback(): void {\n    // Clean up theme inheritance listener\n    if (this._themeCleanup) {\n      this._themeCleanup();\n      this._themeCleanup = undefined;\n    }\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string | null,\n    newValue: string | null\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'title':\n      case 'message':\n      case 'confirm-text':\n      case 'cancel-text':\n        this.updateContent();\n        break;\n      case 'theme':\n        // If theme attribute is being set, use explicit theme\n        // If theme attribute is being removed, switch to inheritance\n        if (newValue) {\n          this._theme = newValue as Theme;\n          // Clean up any existing theme inheritance\n          if (this._themeCleanup) {\n            this._themeCleanup();\n            this._themeCleanup = undefined;\n          }\n          this.applyTheme(this._theme);\n        } else if (this.isConnected) {\n          // Attribute was removed, switch to inheritance\n          this._theme = 'auto';\n          applyEffectiveTheme(this);\n          this._themeCleanup = setupThemeInheritance(this);\n        }\n        break;\n      case 'danger':\n        // Styling handled by CSS attribute selector\n        break;\n    }\n  }\n\n  private updateContent(): void {\n    const titleElement = this.shadowRoot?.querySelector('.dialog-title');\n    const messageElement = this.shadowRoot?.querySelector('.dialog-message');\n    const confirmButton = this.shadowRoot?.querySelector('.confirm-button');\n    const cancelButton = this.shadowRoot?.querySelector('.cancel-button');\n\n    if (titleElement) {\n      titleElement.textContent = this.getAttribute('title') || 'Confirm';\n    }\n\n    if (messageElement) {\n      messageElement.textContent =\n        this.getAttribute('message') || 'Are you sure?';\n    }\n\n    if (confirmButton) {\n      confirmButton.textContent = this.getAttribute('confirm-text') || 'OK';\n    }\n\n    if (cancelButton) {\n      cancelButton.textContent = this.getAttribute('cancel-text') || 'Cancel';\n    }\n  }\n\n  private handleClose(): void {\n    // If dialog was closed without explicit confirm/cancel, treat as cancel\n    if (this._resolvePromise) {\n      this._resolvePromise(false);\n      this._resolvePromise = null;\n      this._rejectPromise = null;\n    }\n\n    dispatchCustomEvent(this, 'confirm-dialog-close', {\n      dialogId: this.id,\n      dialog: this,\n      confirmed: false,\n    });\n  }\n\n  private handleCancel(event: Event): void {\n    const cancelable = dispatchCustomEvent(this, 'confirm-dialog-cancel', {\n      dialogId: this.id,\n      dialog: this,\n    });\n\n    if (!cancelable) {\n      event.preventDefault();\n    } else {\n      this.cancel();\n    }\n  }\n\n  private confirm(): void {\n    if (this._resolvePromise) {\n      this._resolvePromise(true);\n      this._resolvePromise = null;\n      this._rejectPromise = null;\n    }\n\n    dispatchCustomEvent(this, 'confirm-dialog-confirm', {\n      dialogId: this.id,\n      dialog: this,\n      confirmed: true,\n    });\n\n    this._nativeDialog?.close('confirmed');\n  }\n\n  private cancel(): void {\n    if (this._resolvePromise) {\n      this._resolvePromise(false);\n      this._resolvePromise = null;\n      this._rejectPromise = null;\n    }\n\n    dispatchCustomEvent(this, 'confirm-dialog-cancel', {\n      dialogId: this.id,\n      dialog: this,\n      confirmed: false,\n    });\n\n    this._nativeDialog?.close('cancelled');\n  }\n\n  // Public API\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this.setAttribute('theme', value);\n\n    // Clean up any existing theme inheritance\n    if (this._themeCleanup) {\n      this._themeCleanup();\n      this._themeCleanup = undefined;\n    }\n  }\n\n  get title(): string {\n    return this.getAttribute('title') || 'Confirm';\n  }\n\n  set title(value: string) {\n    this.setAttribute('title', value);\n  }\n\n  get message(): string {\n    return this.getAttribute('message') || 'Are you sure?';\n  }\n\n  set message(value: string) {\n    this.setAttribute('message', value);\n  }\n\n  get confirmText(): string {\n    return this.getAttribute('confirm-text') || 'OK';\n  }\n\n  set confirmText(value: string) {\n    this.setAttribute('confirm-text', value);\n  }\n\n  get cancelText(): string {\n    return this.getAttribute('cancel-text') || 'Cancel';\n  }\n\n  set cancelText(value: string) {\n    this.setAttribute('cancel-text', value);\n  }\n\n  get danger(): boolean {\n    return this.hasAttribute('danger');\n  }\n\n  set danger(value: boolean) {\n    if (value) {\n      this.setAttribute('danger', '');\n    } else {\n      this.removeAttribute('danger');\n    }\n  }\n\n  get open(): boolean {\n    return this._nativeDialog?.open || false;\n  }\n\n  /**\n   * Show the confirmation dialog and return a promise that resolves to true/false\n   */\n  public show(): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      if (this._resolvePromise) {\n        // Already showing, reject the previous promise\n        this._rejectPromise?.(\n          new Error('Dialog was replaced by another show() call')\n        );\n      }\n\n      this._resolvePromise = resolve;\n      this._rejectPromise = reject;\n\n      dispatchCustomEvent(this, 'confirm-dialog-show', {\n        dialogId: this.id,\n        dialog: this,\n      });\n\n      this._nativeDialog?.showModal();\n    });\n  }\n\n  public applyTheme(theme: Theme): void {\n    this._theme = theme;\n    applyTheme(this, theme);\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-confirm')) {\n  customElements.define('e2-confirm', ConfirmDialogElement);\n}\n","/**\n * Dialog Element\n * A wrapper around the native <dialog> element with theming and enhanced functionality\n */\n\nimport { EditorElementProperties, Theme } from '../../types';\nimport {\n  applyEffectiveTheme,\n  applyTheme,\n  dispatchCustomEvent,\n  generateId,\n  getShadowRoot,\n  setupThemeInheritance,\n} from '../../utils';\n\nexport class DialogElement\n  extends HTMLElement\n  implements EditorElementProperties\n{\n  private _theme: Theme = 'auto';\n  private _nativeDialog: HTMLDialogElement | null = null;\n  private _themeCleanup?: () => void;\n\n  static get observedAttributes(): string[] {\n    return ['title', 'theme', 'modal', 'closable', 'width', 'height'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          --dialog-bg: #ffffff;\n          --dialog-border: #e0e0e0;\n          --dialog-shadow: rgba(0, 0, 0, 0.25);\n          --dialog-backdrop: rgba(0, 0, 0, 0.5);\n          --dialog-header-bg: #f8f9fa;\n          --dialog-header-border: #e0e0e0;\n          --text-color: #333333;\n          --close-button-hover: #f0f0f0;\n          --close-button-active: #e0e0e0;\n\n          display: block;\n        }\n\n        :host(.theme-dark) {\n          --dialog-bg: #2d2d2d;\n          --dialog-border: #555555;\n          --dialog-shadow: rgba(0, 0, 0, 0.5);\n          --dialog-backdrop: rgba(0, 0, 0, 0.7);\n          --dialog-header-bg: #404040;\n          --dialog-header-border: #555555;\n          --text-color: #ffffff;\n          --close-button-hover: #404040;\n          --close-button-active: #555555;\n        }\n\n        dialog {\n          border: 1px solid var(--dialog-border);\n          border-radius: 8px;\n          padding: 0;\n          background: var(--dialog-bg);\n          color: var(--text-color);\n          font-family: var(--font-family, system-ui, sans-serif);\n          font-size: var(--font-size, 14px);\n          box-shadow: 0 8px 24px var(--dialog-shadow);\n          min-width: 300px;\n          max-width: calc(100vw - 32px);\n          max-height: calc(100vh - 32px);\n          overflow: hidden;\n          animation: dialog-fade-in 0.2s ease-out;\n        }\n\n        dialog::backdrop {\n          background: var(--dialog-backdrop);\n          animation: backdrop-fade-in 0.2s ease-out;\n        }\n\n        @keyframes dialog-fade-in {\n          from {\n            opacity: 0;\n            transform: scale(0.9) translateY(-20px);\n          }\n          to {\n            opacity: 1;\n            transform: scale(1) translateY(0);\n          }\n        }\n\n        @keyframes backdrop-fade-in {\n          from { opacity: 0; }\n          to { opacity: 1; }\n        }\n\n        .dialog-header {\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          padding: 16px 20px;\n          background: var(--dialog-header-bg);\n          border-bottom: 1px solid var(--dialog-header-border);\n          min-height: 24px;\n        }\n\n        .dialog-title {\n          font-weight: 600;\n          font-size: 16px;\n          margin: 0;\n        }\n\n        .close-button {\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          width: 28px;\n          height: 28px;\n          border: none;\n          background: transparent;\n          border-radius: 4px;\n          cursor: pointer;\n          color: var(--text-color);\n          font-size: 18px;\n          transition: background-color 0.15s ease;\n        }\n\n        .close-button:hover {\n          background: var(--close-button-hover);\n        }\n\n        .close-button:active {\n          background: var(--close-button-active);\n        }\n\n        .close-button:disabled {\n          opacity: 0.5;\n          cursor: not-allowed;\n        }\n\n        .dialog-content {\n          padding: 20px;\n          overflow-y: auto;\n        }\n\n        .dialog-footer {\n          padding: 16px 20px;\n          border-top: 1px solid var(--dialog-header-border);\n          background: var(--dialog-header-bg);\n          display: flex;\n          justify-content: flex-end;\n          gap: 12px;\n        }\n\n        .dialog-footer:empty {\n          display: none;\n        }\n\n        :host([hidden]) {\n          display: none !important;\n        }\n      </style>\n\n      <dialog part=\"dialog\">\n        <div class=\"dialog-header\" part=\"header\">\n          <h3 class=\"dialog-title\" part=\"title\"></h3>\n          <button class=\"close-button\" part=\"close-button\" type=\"button\" aria-label=\"Close dialog\">\n            ×\n          </button>\n        </div>\n\n        <div class=\"dialog-content\" part=\"content\">\n          <slot></slot>\n        </div>\n\n        <div class=\"dialog-footer\" part=\"footer\">\n          <slot name=\"footer\"></slot>\n        </div>\n      </dialog>\n    `;\n\n    this._nativeDialog = shadowRoot.querySelector('dialog');\n    const closeButton = shadowRoot.querySelector('.close-button');\n\n    // Set up event listeners\n    if (this._nativeDialog) {\n      this._nativeDialog.addEventListener('close', this.handleClose.bind(this));\n      this._nativeDialog.addEventListener(\n        'cancel',\n        this.handleCancel.bind(this)\n      );\n    }\n\n    if (closeButton) {\n      closeButton.addEventListener('click', () => this.close());\n    }\n\n    // Apply initial theme\n    this.applyTheme(this._theme);\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('dialog');\n    }\n\n    // Set up theme inheritance if no explicit theme is set\n    if (!this.hasAttribute('theme')) {\n      applyEffectiveTheme(this);\n      this._themeCleanup = setupThemeInheritance(this);\n    } else {\n      this.applyTheme(this._theme);\n    }\n  }\n\n  disconnectedCallback(): void {\n    // Clean up theme inheritance listener\n    if (this._themeCleanup) {\n      this._themeCleanup();\n      this._themeCleanup = undefined;\n    }\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string | null,\n    newValue: string | null\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'title':\n        this.updateTitle();\n        break;\n      case 'theme':\n        // If theme attribute is being set, use explicit theme\n        // If theme attribute is being removed, switch to inheritance\n        if (newValue) {\n          this._theme = newValue as Theme;\n          // Clean up any existing theme inheritance\n          if (this._themeCleanup) {\n            this._themeCleanup();\n            this._themeCleanup = undefined;\n          }\n          this.applyTheme(this._theme);\n        } else if (this.isConnected) {\n          // Attribute was removed, switch to inheritance\n          this._theme = 'auto';\n          applyEffectiveTheme(this);\n          this._themeCleanup = setupThemeInheritance(this);\n        }\n        break;\n      case 'modal':\n        // Modal state affects how dialog opens\n        break;\n      case 'closable':\n        this.updateClosable();\n        break;\n      case 'width':\n        this.updateSize();\n        break;\n      case 'height':\n        this.updateSize();\n        break;\n    }\n  }\n\n  private updateTitle(): void {\n    const titleElement = this.shadowRoot?.querySelector('.dialog-title');\n    if (titleElement) {\n      titleElement.textContent = this.getAttribute('title') || '';\n    }\n  }\n\n  private updateClosable(): void {\n    const closeButton = this.shadowRoot?.querySelector(\n      '.close-button'\n    ) as HTMLButtonElement;\n    if (closeButton) {\n      const closable = this.getAttribute('closable') !== 'false';\n      closeButton.disabled = !closable;\n      closeButton.style.display = closable ? 'flex' : 'none';\n    }\n  }\n\n  private updateSize(): void {\n    if (this._nativeDialog) {\n      const width = this.getAttribute('width');\n      const height = this.getAttribute('height');\n\n      if (width) {\n        this._nativeDialog.style.width =\n          width.includes('px') || width.includes('%') || width.includes('em')\n            ? width\n            : `${width}px`;\n      }\n\n      if (height) {\n        this._nativeDialog.style.height =\n          height.includes('px') || height.includes('%') || height.includes('em')\n            ? height\n            : `${height}px`;\n      }\n    }\n  }\n\n  private handleClose(): void {\n    dispatchCustomEvent(this, 'dialog-close', {\n      dialogId: this.id,\n      dialog: this,\n      returnValue: this._nativeDialog?.returnValue,\n    });\n  }\n\n  private handleCancel(event: Event): void {\n    const cancelable = dispatchCustomEvent(this, 'dialog-cancel', {\n      dialogId: this.id,\n      dialog: this,\n    });\n\n    if (!cancelable) {\n      event.preventDefault();\n    }\n  }\n\n  // Public API\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this.setAttribute('theme', value);\n\n    // Clean up any existing theme inheritance\n    if (this._themeCleanup) {\n      this._themeCleanup();\n      this._themeCleanup = undefined;\n    }\n  }\n\n  get title(): string {\n    return this.getAttribute('title') || '';\n  }\n\n  set title(value: string) {\n    this.setAttribute('title', value);\n  }\n\n  get modal(): boolean {\n    return this.hasAttribute('modal');\n  }\n\n  set modal(value: boolean) {\n    if (value) {\n      this.setAttribute('modal', '');\n    } else {\n      this.removeAttribute('modal');\n    }\n  }\n\n  get closable(): boolean {\n    return this.getAttribute('closable') !== 'false';\n  }\n\n  set closable(value: boolean) {\n    this.setAttribute('closable', value.toString());\n  }\n\n  get open(): boolean {\n    return this._nativeDialog?.open || false;\n  }\n\n  get returnValue(): string {\n    return this._nativeDialog?.returnValue || '';\n  }\n\n  set returnValue(value: string) {\n    if (this._nativeDialog) {\n      this._nativeDialog.returnValue = value;\n    }\n  }\n\n  public show(): void {\n    if (!this._nativeDialog) return;\n\n    dispatchCustomEvent(this, 'dialog-show', {\n      dialogId: this.id,\n      dialog: this,\n    });\n\n    this._nativeDialog.show();\n  }\n\n  public showModal(): void {\n    if (!this._nativeDialog) return;\n\n    dispatchCustomEvent(this, 'dialog-show', {\n      dialogId: this.id,\n      dialog: this,\n      modal: true,\n    });\n\n    this._nativeDialog.showModal();\n  }\n\n  public close(returnValue?: string): void {\n    if (!this._nativeDialog) return;\n\n    if (returnValue !== undefined) {\n      this._nativeDialog.returnValue = returnValue;\n    }\n\n    this._nativeDialog.close();\n  }\n\n  public applyTheme(theme: Theme): void {\n    this._theme = theme;\n    applyTheme(this, theme);\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-dialog')) {\n  customElements.define('e2-dialog', DialogElement);\n}\n","/**\n * Prompt Dialog Element\n * A specialized dialog for text input with validation\n */\n\nimport { EditorElementProperties, Theme } from '../../types';\nimport {\n  applyEffectiveTheme,\n  applyTheme,\n  dispatchCustomEvent,\n  generateId,\n  getShadowRoot,\n  setupThemeInheritance,\n} from '../../utils';\n\nexport class PromptDialogElement\n  extends HTMLElement\n  implements EditorElementProperties\n{\n  private _theme: Theme = 'auto';\n  private _nativeDialog: HTMLDialogElement | null = null;\n  private _resolvePromise: ((value: string | null) => void) | null = null;\n  private _rejectPromise: ((reason?: any) => void) | null = null;\n  private _themeCleanup?: () => void;\n\n  static get observedAttributes(): string[] {\n    return [\n      'title',\n      'message',\n      'placeholder',\n      'default-value',\n      'confirm-text',\n      'cancel-text',\n      'theme',\n      'required',\n      'multiline',\n      'pattern',\n      'min-length',\n      'max-length',\n    ];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          --dialog-bg: #ffffff;\n          --dialog-border: #e0e0e0;\n          --dialog-shadow: rgba(0, 0, 0, 0.25);\n          --dialog-backdrop: rgba(0, 0, 0, 0.5);\n          --text-color: #333333;\n          --text-secondary: #666666;\n          --input-bg: #ffffff;\n          --input-border: #d0d7de;\n          --input-border-focus: #0969da;\n          --input-border-error: #d1242f;\n          --button-bg: #f8f9fa;\n          --button-border: #e0e0e0;\n          --button-hover: #e9ecef;\n          --button-active: #dee2e6;\n          --confirm-bg: #007bff;\n          --confirm-hover: #0056b3;\n          --confirm-active: #004085;\n          --error-color: #d1242f;\n\n          display: block;\n        }\n\n        :host(.theme-dark) {\n          --dialog-bg: #2d2d2d;\n          --dialog-border: #555555;\n          --dialog-shadow: rgba(0, 0, 0, 0.5);\n          --dialog-backdrop: rgba(0, 0, 0, 0.7);\n          --text-color: #ffffff;\n          --text-secondary: #cccccc;\n          --input-bg: #21262d;\n          --input-border: #30363d;\n          --input-border-focus: #0969da;\n          --input-border-error: #f85149;\n          --button-bg: #404040;\n          --button-border: #555555;\n          --button-hover: #4a4a4a;\n          --button-active: #555555;\n          --confirm-bg: #0d6efd;\n          --confirm-hover: #0b5ed7;\n          --confirm-active: #0a58ca;\n          --error-color: #f85149;\n        }\n\n        dialog {\n          border: 1px solid var(--dialog-border);\n          border-radius: 8px;\n          padding: 0;\n          background: var(--dialog-bg);\n          color: var(--text-color);\n          font-family: var(--font-family, system-ui, sans-serif);\n          font-size: var(--font-size, 14px);\n          box-shadow: 0 8px 24px var(--dialog-shadow);\n          min-width: 400px;\n          max-width: 600px;\n          animation: dialog-fade-in 0.2s ease-out;\n        }\n\n        dialog::backdrop {\n          background: var(--dialog-backdrop);\n          animation: backdrop-fade-in 0.2s ease-out;\n        }\n\n        @keyframes dialog-fade-in {\n          from {\n            opacity: 0;\n            transform: scale(0.9) translateY(-20px);\n          }\n          to {\n            opacity: 1;\n            transform: scale(1) translateY(0);\n          }\n        }\n\n        @keyframes backdrop-fade-in {\n          from { opacity: 0; }\n          to { opacity: 1; }\n        }\n\n        .dialog-content {\n          padding: 24px;\n        }\n\n        .dialog-title {\n          font-size: 18px;\n          font-weight: 600;\n          margin: 0 0 8px 0;\n          color: var(--text-color);\n        }\n\n        .dialog-message {\n          color: var(--text-secondary);\n          line-height: 1.5;\n          margin: 0 0 16px 0;\n        }\n\n        .dialog-message:empty {\n          display: none;\n        }\n\n        .input-group {\n          margin-bottom: 20px;\n        }\n\n        .dialog-input {\n          width: 100%;\n          padding: 8px 12px;\n          border: 1px solid var(--input-border);\n          border-radius: 4px;\n          background: var(--input-bg);\n          color: var(--text-color);\n          font-family: inherit;\n          font-size: 14px;\n          transition: border-color 0.15s ease;\n          box-sizing: border-box;\n        }\n\n        .dialog-input:focus {\n          outline: none;\n          border-color: var(--input-border-focus);\n          box-shadow: 0 0 0 2px rgba(9, 105, 218, 0.3);\n        }\n\n        .dialog-input.error {\n          border-color: var(--input-border-error);\n        }\n\n        .dialog-input.error:focus {\n          box-shadow: 0 0 0 2px rgba(209, 36, 47, 0.3);\n        }\n\n        .dialog-textarea {\n          min-height: 80px;\n          resize: vertical;\n          font-family: inherit;\n        }\n\n        .error-message {\n          color: var(--error-color);\n          font-size: 12px;\n          margin-top: 4px;\n          display: none;\n        }\n\n        .error-message.visible {\n          display: block;\n        }\n\n        .dialog-buttons {\n          display: flex;\n          justify-content: flex-end;\n          gap: 12px;\n        }\n\n        .dialog-button {\n          padding: 8px 16px;\n          border: 1px solid var(--button-border);\n          border-radius: 4px;\n          background: var(--button-bg);\n          color: var(--text-color);\n          font-family: inherit;\n          font-size: 14px;\n          cursor: pointer;\n          transition: all 0.15s ease;\n          min-width: 80px;\n        }\n\n        .dialog-button:hover {\n          background: var(--button-hover);\n        }\n\n        .dialog-button:active {\n          background: var(--button-active);\n        }\n\n        .dialog-button:focus {\n          outline: 2px solid var(--confirm-bg);\n          outline-offset: 2px;\n        }\n\n        .dialog-button:disabled {\n          opacity: 0.6;\n          cursor: not-allowed;\n        }\n\n        .confirm-button {\n          background: var(--confirm-bg);\n          color: white;\n          border-color: var(--confirm-bg);\n        }\n\n        .confirm-button:hover:not(:disabled) {\n          background: var(--confirm-hover);\n          border-color: var(--confirm-hover);\n        }\n\n        .confirm-button:active:not(:disabled) {\n          background: var(--confirm-active);\n          border-color: var(--confirm-active);\n        }\n\n        :host([hidden]) {\n          display: none !important;\n        }\n      </style>\n\n      <dialog part=\"dialog\">\n        <div class=\"dialog-content\" part=\"content\">\n          <h3 class=\"dialog-title\" part=\"title\">Input Required</h3>\n          <p class=\"dialog-message\" part=\"message\"></p>\n\n          <div class=\"input-group\" part=\"input-group\">\n            <input class=\"dialog-input\" part=\"input\" type=\"text\" />\n            <div class=\"error-message\" part=\"error-message\"></div>\n          </div>\n\n          <div class=\"dialog-buttons\" part=\"buttons\">\n            <button class=\"dialog-button cancel-button\" part=\"cancel-button\" type=\"button\">\n              Cancel\n            </button>\n            <button class=\"dialog-button confirm-button\" part=\"confirm-button\" type=\"button\">\n              OK\n            </button>\n          </div>\n        </div>\n      </dialog>\n    `;\n\n    this._nativeDialog = shadowRoot.querySelector('dialog');\n    const confirmButton = shadowRoot.querySelector('.confirm-button');\n    const cancelButton = shadowRoot.querySelector('.cancel-button');\n    const input = shadowRoot.querySelector('.dialog-input') as HTMLInputElement;\n\n    // Set up event listeners\n    if (this._nativeDialog) {\n      this._nativeDialog.addEventListener('close', this.handleClose.bind(this));\n      this._nativeDialog.addEventListener(\n        'cancel',\n        this.handleCancel.bind(this)\n      );\n    }\n\n    if (confirmButton) {\n      confirmButton.addEventListener('click', () => this.confirm());\n    }\n\n    if (cancelButton) {\n      cancelButton.addEventListener('click', () => this.cancel());\n    }\n\n    if (input) {\n      input.addEventListener('input', this.handleInput.bind(this));\n      input.addEventListener('keydown', this.handleKeydown.bind(this));\n    }\n\n    // Apply initial theme\n    this.applyTheme(this._theme);\n    this.updateContent();\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('prompt-dialog');\n    }\n\n    // Set up theme inheritance if no explicit theme is set\n    if (!this.hasAttribute('theme')) {\n      applyEffectiveTheme(this);\n      this._themeCleanup = setupThemeInheritance(this);\n    } else {\n      this.applyTheme(this._theme);\n    }\n  }\n\n  disconnectedCallback(): void {\n    // Clean up theme inheritance listener\n    if (this._themeCleanup) {\n      this._themeCleanup();\n      this._themeCleanup = undefined;\n    }\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string | null,\n    newValue: string | null\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'title':\n      case 'message':\n      case 'placeholder':\n      case 'default-value':\n      case 'confirm-text':\n      case 'cancel-text':\n      case 'required':\n      case 'multiline':\n      case 'pattern':\n      case 'min-length':\n      case 'max-length':\n        this.updateContent();\n        break;\n      case 'theme':\n        // If theme attribute is being set, use explicit theme\n        // If theme attribute is being removed, switch to inheritance\n        if (newValue) {\n          this._theme = newValue as Theme;\n          // Clean up any existing theme inheritance\n          if (this._themeCleanup) {\n            this._themeCleanup();\n            this._themeCleanup = undefined;\n          }\n          this.applyTheme(this._theme);\n        } else if (this.isConnected) {\n          // Attribute was removed, switch to inheritance\n          this._theme = 'auto';\n          applyEffectiveTheme(this);\n          this._themeCleanup = setupThemeInheritance(this);\n        }\n        break;\n    }\n  }\n\n  private updateContent(): void {\n    const titleElement = this.shadowRoot?.querySelector('.dialog-title');\n    const messageElement = this.shadowRoot?.querySelector('.dialog-message');\n    const confirmButton = this.shadowRoot?.querySelector('.confirm-button');\n    const cancelButton = this.shadowRoot?.querySelector('.cancel-button');\n    const inputElement = this.shadowRoot?.querySelector(\n      '.dialog-input'\n    ) as HTMLInputElement;\n\n    if (titleElement) {\n      titleElement.textContent = this.getAttribute('title') || 'Input Required';\n    }\n\n    if (messageElement) {\n      const message = this.getAttribute('message') || '';\n      messageElement.textContent = message;\n    }\n\n    if (confirmButton) {\n      confirmButton.textContent = this.getAttribute('confirm-text') || 'OK';\n    }\n\n    if (cancelButton) {\n      cancelButton.textContent = this.getAttribute('cancel-text') || 'Cancel';\n    }\n\n    if (inputElement) {\n      // Handle multiline\n      const multiline = this.hasAttribute('multiline');\n      const currentType = inputElement.tagName.toLowerCase();\n\n      if (multiline && currentType === 'input') {\n        // Replace input with textarea\n        const textarea = document.createElement('textarea');\n        textarea.className = 'dialog-input dialog-textarea';\n        textarea.setAttribute('part', 'input');\n        inputElement.parentNode?.replaceChild(textarea, inputElement);\n        this.setupInputElement(textarea);\n      } else if (!multiline && currentType === 'textarea') {\n        // Replace textarea with input\n        const input = document.createElement('input');\n        input.className = 'dialog-input';\n        input.setAttribute('part', 'input');\n        input.type = 'text';\n        inputElement.parentNode?.replaceChild(input, inputElement);\n        this.setupInputElement(input);\n      } else {\n        this.setupInputElement(inputElement);\n      }\n    }\n  }\n\n  private setupInputElement(\n    element: HTMLInputElement | HTMLTextAreaElement\n  ): void {\n    const placeholder = this.getAttribute('placeholder') || '';\n    const defaultValue = this.getAttribute('default-value') || '';\n    const pattern = this.getAttribute('pattern');\n    const minLength = this.getAttribute('min-length');\n    const maxLength = this.getAttribute('max-length');\n\n    element.placeholder = placeholder;\n    element.value = defaultValue;\n\n    if (pattern && element instanceof HTMLInputElement) {\n      element.pattern = pattern;\n    }\n\n    if (minLength) {\n      element.minLength = parseInt(minLength, 10);\n    }\n\n    if (maxLength) {\n      element.maxLength = parseInt(maxLength, 10);\n    }\n\n    // Re-attach event listeners\n    element.addEventListener('input', this.handleInput.bind(this));\n    element.addEventListener('keydown', (event: Event) =>\n      this.handleKeydown(event as KeyboardEvent)\n    );\n  }\n\n  private handleInput(): void {\n    this.validateInput();\n  }\n\n  private handleKeydown(event: KeyboardEvent): void {\n    if (\n      event.key === 'Enter' &&\n      !event.shiftKey &&\n      !this.hasAttribute('multiline')\n    ) {\n      event.preventDefault();\n      this.confirm();\n    } else if (event.key === 'Escape') {\n      event.preventDefault();\n      this.cancel();\n    }\n  }\n\n  private validateInput(): boolean {\n    const input = this.shadowRoot?.querySelector('.dialog-input') as\n      | HTMLInputElement\n      | HTMLTextAreaElement;\n    const errorMessage = this.shadowRoot?.querySelector('.error-message');\n    const confirmButton = this.shadowRoot?.querySelector(\n      '.confirm-button'\n    ) as HTMLButtonElement;\n\n    if (!input || !errorMessage || !confirmButton) return false;\n\n    let isValid = true;\n    let error = '';\n\n    const value = input.value;\n    const required = this.hasAttribute('required');\n    const pattern = this.getAttribute('pattern');\n    const minLength = this.getAttribute('min-length');\n    const maxLength = this.getAttribute('max-length');\n\n    // Required validation\n    if (required && !value.trim()) {\n      isValid = false;\n      error = 'This field is required';\n    }\n\n    // Pattern validation\n    if (isValid && pattern && value && !new RegExp(pattern).test(value)) {\n      isValid = false;\n      error = 'Invalid format';\n    }\n\n    // Length validation\n    if (isValid && minLength && value.length < parseInt(minLength, 10)) {\n      isValid = false;\n      error = `Minimum length is ${minLength} characters`;\n    }\n\n    if (isValid && maxLength && value.length > parseInt(maxLength, 10)) {\n      isValid = false;\n      error = `Maximum length is ${maxLength} characters`;\n    }\n\n    // Update UI\n    input.classList.toggle('error', !isValid);\n    errorMessage.textContent = error;\n    errorMessage.classList.toggle('visible', !isValid);\n    confirmButton.disabled = !isValid;\n\n    return isValid;\n  }\n\n  private handleClose(): void {\n    if (this._resolvePromise) {\n      this._resolvePromise(null);\n      this._resolvePromise = null;\n      this._rejectPromise = null;\n    }\n\n    dispatchCustomEvent(this, 'prompt-dialog-close', {\n      dialogId: this.id,\n      dialog: this,\n      value: null,\n    });\n  }\n\n  private handleCancel(event: Event): void {\n    const cancelable = dispatchCustomEvent(this, 'prompt-dialog-cancel', {\n      dialogId: this.id,\n      dialog: this,\n    });\n\n    if (!cancelable) {\n      event.preventDefault();\n    } else {\n      this.cancel();\n    }\n  }\n\n  private confirm(): void {\n    if (!this.validateInput()) return;\n\n    const input = this.shadowRoot?.querySelector('.dialog-input') as\n      | HTMLInputElement\n      | HTMLTextAreaElement;\n    const value = input?.value || '';\n\n    if (this._resolvePromise) {\n      this._resolvePromise(value);\n      this._resolvePromise = null;\n      this._rejectPromise = null;\n    }\n\n    dispatchCustomEvent(this, 'prompt-dialog-confirm', {\n      dialogId: this.id,\n      dialog: this,\n      value,\n    });\n\n    this._nativeDialog?.close(value);\n  }\n\n  private cancel(): void {\n    if (this._resolvePromise) {\n      this._resolvePromise(null);\n      this._resolvePromise = null;\n      this._rejectPromise = null;\n    }\n\n    dispatchCustomEvent(this, 'prompt-dialog-cancel', {\n      dialogId: this.id,\n      dialog: this,\n      value: null,\n    });\n\n    this._nativeDialog?.close();\n  }\n\n  // Public API\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this.setAttribute('theme', value);\n\n    // Clean up any existing theme inheritance\n    if (this._themeCleanup) {\n      this._themeCleanup();\n      this._themeCleanup = undefined;\n    }\n  }\n\n  get title(): string {\n    return this.getAttribute('title') || 'Input Required';\n  }\n\n  set title(value: string) {\n    this.setAttribute('title', value);\n  }\n\n  get message(): string {\n    return this.getAttribute('message') || '';\n  }\n\n  set message(value: string) {\n    this.setAttribute('message', value);\n  }\n\n  get placeholder(): string {\n    return this.getAttribute('placeholder') || '';\n  }\n\n  set placeholder(value: string) {\n    this.setAttribute('placeholder', value);\n  }\n\n  get defaultValue(): string {\n    return this.getAttribute('default-value') || '';\n  }\n\n  set defaultValue(value: string) {\n    this.setAttribute('default-value', value);\n  }\n\n  get confirmText(): string {\n    return this.getAttribute('confirm-text') || 'OK';\n  }\n\n  set confirmText(value: string) {\n    this.setAttribute('confirm-text', value);\n  }\n\n  get cancelText(): string {\n    return this.getAttribute('cancel-text') || 'Cancel';\n  }\n\n  set cancelText(value: string) {\n    this.setAttribute('cancel-text', value);\n  }\n\n  get required(): boolean {\n    return this.hasAttribute('required');\n  }\n\n  set required(value: boolean) {\n    if (value) {\n      this.setAttribute('required', '');\n    } else {\n      this.removeAttribute('required');\n    }\n  }\n\n  get multiline(): boolean {\n    return this.hasAttribute('multiline');\n  }\n\n  set multiline(value: boolean) {\n    if (value) {\n      this.setAttribute('multiline', '');\n    } else {\n      this.removeAttribute('multiline');\n    }\n  }\n\n  get value(): string {\n    const input = this.shadowRoot?.querySelector('.dialog-input') as\n      | HTMLInputElement\n      | HTMLTextAreaElement;\n    return input?.value || '';\n  }\n\n  set value(value: string) {\n    const input = this.shadowRoot?.querySelector('.dialog-input') as\n      | HTMLInputElement\n      | HTMLTextAreaElement;\n    if (input) {\n      input.value = value;\n      this.validateInput();\n    }\n  }\n\n  get open(): boolean {\n    return this._nativeDialog?.open || false;\n  }\n\n  /**\n   * Show the prompt dialog and return a promise that resolves to the input value or null if cancelled\n   */\n  public show(): Promise<string | null> {\n    return new Promise((resolve, reject) => {\n      if (this._resolvePromise) {\n        // Already showing, reject the previous promise\n        this._rejectPromise?.(\n          new Error('Dialog was replaced by another show() call')\n        );\n      }\n\n      this._resolvePromise = resolve;\n      this._rejectPromise = reject;\n\n      dispatchCustomEvent(this, 'prompt-dialog-show', {\n        dialogId: this.id,\n        dialog: this,\n      });\n\n      this._nativeDialog?.showModal();\n\n      // Focus the input after showing\n      setTimeout(() => {\n        const input = this.shadowRoot?.querySelector('.dialog-input') as\n          | HTMLInputElement\n          | HTMLTextAreaElement;\n        input?.focus();\n        input?.select();\n      }, 100);\n    });\n  }\n\n  public applyTheme(theme: Theme): void {\n    this._theme = theme;\n    applyTheme(this, theme);\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-prompt')) {\n  customElements.define('e2-prompt', PromptDialogElement);\n}\n","/**\n * ListView Element\n * A versatile list component supporting multiple view modes (list, details, icons)\n * with selection management and multi-select capabilities\n */\n\nimport {\n  EditorElementProperties,\n  ListViewColumn,\n  ListViewItem,\n  ListViewItemClickEvent,\n  ListViewItemDoubleClickEvent,\n  ListViewMode,\n  ListViewSelectionChangeEvent,\n  Theme,\n} from '../../types';\nimport {\n  applyEffectiveTheme,\n  applyTheme,\n  dispatchCustomEvent,\n  generateId,\n  getShadowRoot,\n  setupThemeInheritance,\n} from '../../utils';\n\nexport class ListView extends HTMLElement implements EditorElementProperties {\n  private _theme: Theme = 'auto';\n  private _themeCleanup?: () => void;\n  private _items: ListViewItem[] = [];\n  private _columns: ListViewColumn[] = [];\n  private _viewMode: ListViewMode = 'list';\n  private _multiSelect: boolean = false;\n  private _selectedItems: Set<string> = new Set();\n  private _lastSelectedIndex: number = -1;\n\n  static get observedAttributes(): string[] {\n    return ['theme', 'disabled', 'view-mode', 'multi-select'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: block;\n          border: 1px solid var(--listview-border, #ccc);\n          background: var(--listview-bg, #fff);\n          font-family: var(--font-family, system-ui, sans-serif);\n          font-size: var(--font-size, 14px);\n          overflow: hidden;\n          min-height: 100px;\n        }\n\n        :host(.theme-dark) {\n          background: var(--listview-bg-dark, #1e1e1e);\n          border-color: var(--listview-border-dark, #555);\n          color: var(--text-color-dark, #fff);\n        }\n\n        :host([disabled]) {\n          opacity: 0.6;\n          pointer-events: none;\n        }\n\n        .listview-container {\n          width: 100%;\n          height: 100%;\n        }\n\n        .listview-header {\n          display: none;\n          font-weight: bold;\n          padding: 0;\n          flex-shrink: 0;\n        }\n\n        .listview-header-row {\n          display: flex;\n          align-items: center;\n        }\n\n        .listview-header-cell {\n          padding: 8px 12px;\n          background: var(--listview-header-bg, #f5f5f5);\n          border-bottom: 1px solid var(--listview-border, #ccc);\n          border-right: 1px solid var(--listview-border, #ccc);\n          flex: 1;\n          min-width: 0;\n          cursor: pointer;\n          user-select: none;\n        }\n\n        :host(.theme-dark) .listview-header-cell {\n          background: var(--listview-header-bg-dark, #2d2d2d);\n          border-bottom-color: var(--listview-border-dark, #555);\n          border-right-color: var(--listview-border-dark, #555);\n        }\n\n        .listview-header-cell:hover {\n          background: var(--listview-header-hover-bg, #e5e5e5);\n        }\n\n        :host(.theme-dark) .listview-header-cell:hover {\n          background: var(--listview-header-hover-bg-dark, #3d3d3d);\n        }\n\n        .listview-header-cell:last-child {\n          border-right: none;\n        }\n\n        .listview-content {\n          overflow: auto;\n          flex: 1;\n        }\n\n        .listview-item {\n          padding: 4px 8px;\n          cursor: pointer;\n          user-select: none;\n          border-bottom: 1px solid transparent;\n          display: flex;\n          align-items: center;\n          min-height: 24px;\n        }\n\n        :host(:not([view-mode=\"details\"])) .listview-item:hover {\n          background: var(--listview-item-hover-bg, #f0f0f0);\n        }\n        :host([view-mode=\"details\"]) .listview-item:hover .listview-item-cell {\n          background: var(--listview-item-hover-bg, #f0f0f0);\n        }\n\n        :host(.theme-dark:not([view-mode=\"details\"])) .listview-item:hover {\n          background: var(--listview-item-hover-bg-dark, #2d2d2d);\n        }\n        :host(.theme-dark[view-mode=\"details\"]) .listview-item:hover .listview-item-cell {\n          background: var(--listview-item-hover-bg-dark, #2d2d2d);\n        }\n\n        :host(:not([view-mode=\"details\"])) .listview-item.selected {\n          background: var(--listview-item-selected-bg, #0078d4);\n          color: var(--listview-item-selected-text, #fff);\n        }\n        :host([view-mode=\"details\"]) .listview-item.selected .listview-item-cell {\n          background: var(--listview-item-selected-bg, #0078d4);\n          color: var(--listview-item-selected-text, #fff);\n        }\n\n        :host(.theme-dark:not([view-mode=\"details\"])) .listview-item.selected {\n          background: var(--listview-item-selected-bg-dark, #0078d4);\n          color: var(--listview-item-selected-text-dark, #fff);\n        }\n        :host(.theme-dark[view-mode=\"details\"]) .listview-item.selected .listview-item-cell {\n          background: var(--listview-item-selected-bg-dark, #0078d4);\n          color: var(--listview-item-selected-text-dark, #fff);\n        }\n\n        .listview-item.disabled {\n          opacity: 0.6;\n          cursor: default;\n          pointer-events: none;\n        }\n\n        .listview-item-icon {\n          margin-right: 8px;\n          flex-shrink: 0;\n          font-size: 16px;\n          width: 16px;\n          text-align: center;\n        }\n\n        .listview-item-label {\n          flex: 1;\n          min-width: 0;\n          text-overflow: ellipsis;\n          white-space: nowrap;\n        }\n\n        .listview-item-cell {\n          flex: 1;\n          min-width: 0;\n          padding: 0 4px;\n          text-overflow: ellipsis;\n          white-space: nowrap;\n        }\n\n        /* Details view specific styles */\n        :host([view-mode=\"details\"]) .listview-container {\n          display: flex;\n          flex-direction: column;\n        }\n\n        :host([view-mode=\"details\"]) .listview-content {\n          min-height: 0;\n        }\n\n        :host([view-mode=\"details\"]) .listview-header {\n          display: block;\n        }\n\n        :host([view-mode=\"details\"]) .listview-item {\n          padding: 0;\n        }\n\n        :host([view-mode=\"details\"]) .listview-item-cell {\n          height: 100%;\n          padding: 8px 12px;\n          border-right: 1px solid var(--listview-border, #ccc);\n        }\n\n        :host(.theme-dark[view-mode=\"details\"]) .listview-item-cell {\n          border-right-color: var(--listview-border-dark, #555);\n        }\n\n        :host([view-mode=\"details\"]) .listview-item-cell:last-child {\n          border-right: none;\n        }\n\n        /* Icons view specific styles */\n        :host([view-mode=\"icons\"]) .listview-items {\n          display: flex;\n          flex-wrap: wrap;\n          padding: 8px;\n          gap: 8px;\n          align-content: flex-start;\n        }\n\n        :host([view-mode=\"icons\"]) .listview-item {\n          flex-direction: column;\n          width: 80px;\n          height: 80px;\n          padding: 8px;\n          text-align: center;\n          border: 1px solid transparent;\n          border-radius: 4px;\n        }\n\n        :host([view-mode=\"icons\"]) .listview-item-icon {\n          margin: 0 0 4px 0;\n          font-size: 32px;\n          width: auto;\n        }\n\n        :host([view-mode=\"icons\"]) .listview-item-label {\n          font-size: 12px;\n          line-height: 1.2;\n          white-space: normal;\n          overflow: hidden;\n          display: -webkit-box;\n          -webkit-line-clamp: 2;\n          -webkit-box-orient: vertical;\n        }\n\n        .empty-state {\n          padding: 32px;\n          text-align: center;\n          color: var(--text-color-muted, #666);\n          font-style: italic;\n        }\n\n        :host(.theme-dark) .empty-state {\n          color: var(--text-color-muted-dark, #999);\n        }\n      </style>\n      <div class=\"listview-container\">\n        <div class=\"listview-content\">\n          <div class=\"listview-header\">\n            <div class=\"listview-header-row\"></div>\n          </div>\n          <div class=\"listview-items\"></div>\n        </div>\n      </div>\n    `;\n\n    this.setupEventHandlers();\n  }\n\n  private setupEventHandlers(): void {\n    const items = this.shadowRoot?.querySelector('.listview-items');\n    if (!items) return;\n\n    items.addEventListener('click', this.handleItemClick.bind(this));\n    items.addEventListener('dblclick', this.handleItemDoubleClick.bind(this));\n  }\n\n  private handleItemClick(event: Event): void {\n    const target = event.target as HTMLElement;\n    const itemElement = target.closest('.listview-item') as HTMLElement;\n\n    if (!itemElement || itemElement.classList.contains('disabled')) {\n      return;\n    }\n\n    const itemId = itemElement.dataset.itemId;\n    if (!itemId) return;\n\n    const item = this._items.find(i => i.id === itemId);\n    if (!item) return;\n\n    const mouseEvent = event as MouseEvent;\n    const { ctrlKey, shiftKey, altKey } = mouseEvent;\n\n    // Handle selection\n    this.handleItemSelection(itemId, ctrlKey, shiftKey);\n\n    // Dispatch click event\n    dispatchCustomEvent<ListViewItemClickEvent['detail']>(\n      this,\n      'listview-item-click',\n      {\n        listViewId: this.id,\n        listView: this,\n        item,\n        itemId,\n        ctrlKey,\n        shiftKey,\n        altKey,\n      }\n    );\n  }\n\n  private handleItemDoubleClick(event: Event): void {\n    const target = event.target as HTMLElement;\n    const itemElement = target.closest('.listview-item') as HTMLElement;\n\n    if (!itemElement || itemElement.classList.contains('disabled')) {\n      return;\n    }\n\n    const itemId = itemElement.dataset.itemId;\n    if (!itemId) return;\n\n    const item = this._items.find(i => i.id === itemId);\n    if (!item) return;\n\n    // Dispatch double-click event\n    dispatchCustomEvent<ListViewItemDoubleClickEvent['detail']>(\n      this,\n      'listview-item-double-click',\n      {\n        listViewId: this.id,\n        listView: this,\n        item,\n        itemId,\n      }\n    );\n  }\n\n  private handleItemSelection(\n    itemId: string,\n    ctrlKey: boolean,\n    shiftKey: boolean\n  ): void {\n    const itemIndex = this._items.findIndex(i => i.id === itemId);\n    if (itemIndex === -1) return;\n\n    const previousSelection = new Set(this._selectedItems);\n\n    if (this._multiSelect && shiftKey && this._lastSelectedIndex !== -1) {\n      // Range selection\n      const start = Math.min(this._lastSelectedIndex, itemIndex);\n      const end = Math.max(this._lastSelectedIndex, itemIndex);\n\n      if (!ctrlKey) {\n        this._selectedItems.clear();\n      }\n\n      for (let i = start; i <= end; i++) {\n        this._selectedItems.add(this._items[i].id);\n      }\n    } else if (this._multiSelect && ctrlKey) {\n      // Toggle selection\n      if (this._selectedItems.has(itemId)) {\n        this._selectedItems.delete(itemId);\n      } else {\n        this._selectedItems.add(itemId);\n      }\n    } else {\n      // Single selection\n      this._selectedItems.clear();\n      this._selectedItems.add(itemId);\n    }\n\n    this._lastSelectedIndex = itemIndex;\n    this.updateItemElements();\n    this.dispatchSelectionChange(previousSelection);\n  }\n\n  private dispatchSelectionChange(previousSelection: Set<string>): void {\n    const selectedItems = this._items.filter(item =>\n      this._selectedItems.has(item.id)\n    );\n    const addedItems = this._items.filter(\n      item =>\n        this._selectedItems.has(item.id) && !previousSelection.has(item.id)\n    );\n    const removedItems = this._items.filter(\n      item =>\n        !this._selectedItems.has(item.id) && previousSelection.has(item.id)\n    );\n\n    dispatchCustomEvent<ListViewSelectionChangeEvent['detail']>(\n      this,\n      'listview-selection-change',\n      {\n        listViewId: this.id,\n        listView: this,\n        selectedItems,\n        selectedIds: Array.from(this._selectedItems),\n        addedItems,\n        removedItems,\n      }\n    );\n  }\n\n  private render(): void {\n    if (!this.shadowRoot) return;\n\n    this.renderHeader();\n    this.renderContent();\n  }\n\n  private renderHeader(): void {\n    if (this._viewMode !== 'details' || this._columns.length === 0) {\n      return;\n    }\n\n    const headerRow = this.shadowRoot?.querySelector('.listview-header-row');\n    if (!headerRow) return;\n\n    headerRow.innerHTML = '';\n\n    this._columns.forEach(column => {\n      const cell = document.createElement('div');\n      cell.className = 'listview-header-cell';\n      cell.textContent = column.label;\n      cell.dataset.columnId = column.id;\n\n      if (column.width) {\n        if (typeof column.width === 'number') {\n          cell.style.flex = `0 0 ${column.width}px`;\n        } else {\n          cell.style.flex = `0 0 ${column.width}`;\n        }\n      }\n\n      headerRow.appendChild(cell);\n    });\n  }\n\n  private renderContent(): void {\n    const itemsContainer = this.shadowRoot?.querySelector('.listview-items');\n    if (!itemsContainer) return;\n\n    itemsContainer.innerHTML = '';\n\n    if (this._items.length === 0) {\n      const emptyState = document.createElement('div');\n      emptyState.className = 'empty-state';\n      emptyState.textContent = 'No items to display';\n      itemsContainer.appendChild(emptyState);\n      return;\n    }\n\n    this._items.forEach(item => {\n      const itemElement = this.createItemElement(item);\n      itemsContainer.appendChild(itemElement);\n    });\n  }\n\n  private createItemElement(item: ListViewItem): HTMLElement {\n    const itemElement = document.createElement('div');\n    itemElement.className = 'listview-item';\n    itemElement.dataset.itemId = item.id;\n\n    if (item.disabled) {\n      itemElement.classList.add('disabled');\n    }\n\n    if (this._selectedItems.has(item.id)) {\n      itemElement.classList.add('selected');\n    }\n\n    if (this._viewMode === 'details' && this._columns.length > 0) {\n      this._columns.forEach(column => {\n        const cell = document.createElement('div');\n        cell.className = 'listview-item-cell';\n\n        if (column.width) {\n          if (typeof column.width === 'number') {\n            cell.style.flex = `0 0 ${column.width}px`;\n          } else {\n            cell.style.flex = `0 0 ${column.width}`;\n          }\n        }\n\n        let value = '';\n        if (column.id === 'label') {\n          value = item.label;\n        } else if (column.id === 'icon') {\n          value = item.icon || '';\n        } else if (item.data && item.data[column.id] !== undefined) {\n          value = item.data[column.id];\n        }\n\n        if (column.renderer) {\n          cell.innerHTML = column.renderer(item, value);\n        } else {\n          cell.textContent = String(value);\n        }\n\n        itemElement.appendChild(cell);\n      });\n    } else {\n      // List or Icons view\n      if (item.icon) {\n        const iconElement = document.createElement('span');\n        iconElement.className = 'listview-item-icon';\n        iconElement.textContent = item.icon;\n        itemElement.appendChild(iconElement);\n      }\n\n      const labelElement = document.createElement('span');\n      labelElement.className = 'listview-item-label';\n      labelElement.textContent = item.label;\n      itemElement.appendChild(labelElement);\n    }\n\n    return itemElement;\n  }\n\n  private updateItemElements(): void {\n    if (!this.shadowRoot) return;\n\n    const itemElements = this.shadowRoot.querySelectorAll('.listview-item');\n    itemElements.forEach(element => {\n      const itemId = (element as HTMLElement).dataset.itemId;\n      if (itemId) {\n        element.classList.toggle('selected', this._selectedItems.has(itemId));\n      }\n    });\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('listview');\n    }\n\n    // Set up theme inheritance if no explicit theme is set\n    if (!this.hasAttribute('theme')) {\n      applyEffectiveTheme(this);\n      this._themeCleanup = setupThemeInheritance(this);\n    } else {\n      this.applyTheme(this._theme);\n    }\n\n    this.render();\n  }\n\n  disconnectedCallback(): void {\n    // Clean up theme inheritance listener\n    if (this._themeCleanup) {\n      this._themeCleanup();\n      this._themeCleanup = undefined;\n    }\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string,\n    newValue: string\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'theme':\n        if (newValue) {\n          this.theme = newValue as Theme;\n        } else if (this.isConnected) {\n          applyEffectiveTheme(this);\n          this._themeCleanup = setupThemeInheritance(this);\n        }\n        break;\n      case 'view-mode':\n        this.viewMode = (newValue as ListViewMode) || 'list';\n        break;\n      case 'multi-select':\n        this.multiSelect = newValue !== null;\n        break;\n    }\n  }\n\n  // Properties\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this._theme = value;\n    if (this._themeCleanup) {\n      this._themeCleanup();\n      this._themeCleanup = undefined;\n    }\n    this.applyTheme(value);\n  }\n\n  get items(): ListViewItem[] {\n    return [...this._items];\n  }\n\n  set items(value: ListViewItem[]) {\n    this._items = [...value];\n    this._selectedItems.clear();\n    this._lastSelectedIndex = -1;\n    if (this.isConnected) {\n      this.render();\n    }\n  }\n\n  get columns(): ListViewColumn[] {\n    return [...this._columns];\n  }\n\n  set columns(value: ListViewColumn[]) {\n    this._columns = [...value];\n    if (this.isConnected) {\n      this.render();\n    }\n  }\n\n  get viewMode(): ListViewMode {\n    return this._viewMode;\n  }\n\n  set viewMode(value: ListViewMode) {\n    this._viewMode = value;\n    this.setAttribute('view-mode', value);\n    if (this.isConnected) {\n      this.render();\n    }\n  }\n\n  get multiSelect(): boolean {\n    return this._multiSelect;\n  }\n\n  set multiSelect(value: boolean) {\n    this._multiSelect = value;\n    if (value) {\n      this.setAttribute('multi-select', '');\n    } else {\n      this.removeAttribute('multi-select');\n    }\n  }\n\n  get selectedItems(): ListViewItem[] {\n    return this._items.filter(item => this._selectedItems.has(item.id));\n  }\n\n  get selectedIds(): string[] {\n    return Array.from(this._selectedItems);\n  }\n\n  // Methods\n  applyTheme(theme: Theme): void {\n    applyTheme(this, theme);\n  }\n\n  selectItem(itemId: string): void {\n    if (!this._multiSelect) {\n      this._selectedItems.clear();\n    }\n    this._selectedItems.add(itemId);\n    this.updateItemElements();\n  }\n\n  deselectItem(itemId: string): void {\n    this._selectedItems.delete(itemId);\n    this.updateItemElements();\n  }\n\n  selectAll(): void {\n    if (!this._multiSelect) return;\n\n    this._items.forEach(item => {\n      if (!item.disabled) {\n        this._selectedItems.add(item.id);\n      }\n    });\n    this.updateItemElements();\n  }\n\n  deselectAll(): void {\n    this._selectedItems.clear();\n    this.updateItemElements();\n  }\n\n  toggleItemSelection(itemId: string): void {\n    if (this._selectedItems.has(itemId)) {\n      this.deselectItem(itemId);\n    } else {\n      this.selectItem(itemId);\n    }\n  }\n\n  setSelectedItems(itemIds: string[]): void {\n    const previousSelection = new Set(this._selectedItems);\n    this._selectedItems.clear();\n\n    itemIds.forEach(id => {\n      if (this._items.find(item => item.id === id)) {\n        this._selectedItems.add(id);\n      }\n    });\n\n    this.updateItemElements();\n    this.dispatchSelectionChange(previousSelection);\n  }\n\n  scrollToItem(itemId: string): void {\n    const itemElement = this.shadowRoot?.querySelector(\n      `[data-item-id=\"${itemId}\"]`\n    );\n    if (itemElement) {\n      itemElement.scrollIntoView({ behavior: 'smooth', block: 'nearest' });\n    }\n  }\n\n  getItem(itemId: string): ListViewItem | undefined {\n    return this._items.find(item => item.id === itemId);\n  }\n\n  addItem(item: ListViewItem): void {\n    this._items.push(item);\n    if (this.isConnected) {\n      this.render();\n    }\n  }\n\n  removeItem(itemId: string): boolean {\n    const index = this._items.findIndex(item => item.id === itemId);\n    if (index !== -1) {\n      this._items.splice(index, 1);\n      this._selectedItems.delete(itemId);\n      if (this.isConnected) {\n        this.render();\n      }\n      return true;\n    }\n    return false;\n  }\n\n  updateItem(itemId: string, updates: Partial<ListViewItem>): boolean {\n    const item = this._items.find(i => i.id === itemId);\n    if (item) {\n      Object.assign(item, updates);\n      if (this.isConnected) {\n        this.render();\n      }\n      return true;\n    }\n    return false;\n  }\n\n  refresh(): void {\n    this.render();\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-list-view')) {\n  customElements.define('e2-list-view', ListView);\n}\n","/**\n * Notification Element\n * A toast notification component with theming and animation support\n */\n\nimport { EditorElementProperties, NotificationType, Theme } from '../../types';\nimport {\n  applyEffectiveTheme,\n  applyTheme,\n  dispatchCustomEvent,\n  generateId,\n  getShadowRoot,\n  setupThemeInheritance,\n} from '../../utils';\n\nexport class NotificationElement\n  extends HTMLElement\n  implements EditorElementProperties\n{\n  private _theme: Theme = 'auto';\n  private _timeoutId: number | null = null;\n  private _visible: boolean = false;\n  private _resolvePromise: (() => void) | null = null;\n  private _rejectPromise: ((reason?: any) => void) | null = null;\n  private _themeCleanup?: () => void;\n\n  static get observedAttributes(): string[] {\n    return [\n      'type',\n      'title',\n      'message',\n      'timeout',\n      'dismissible',\n      'persistent',\n      'theme',\n    ];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          --notification-bg: #ffffff;\n          --notification-border: #e0e0e0;\n          --notification-shadow: rgba(0, 0, 0, 0.1);\n          --notification-text: #333333;\n          --notification-title: #1a1a1a;\n          --notification-close-hover: #f0f0f0;\n          --notification-close-active: #e0e0e0;\n          --notification-icon-info: #3b82f6;\n          --notification-icon-success: #10b981;\n          --notification-icon-warning: #f59e0b;\n          --notification-icon-error: #ef4444;\n\n          display: block;\n          position: fixed;\n          z-index: 10000;\n          font-family: var(--font-family, system-ui, sans-serif);\n          font-size: var(--font-size, 14px);\n\n          /* Default positioning - can be overridden by container */\n          top: 20px;\n          right: 20px;\n\n          /* Animation states */\n          opacity: 0;\n          transform: translateX(100%);\n          transition: all 0.3s cubic-bezier(0.4, 0.0, 0.2, 1);\n          pointer-events: none;\n        }\n\n        :host(.visible) {\n          opacity: 1;\n          transform: translateX(0);\n          pointer-events: auto;\n        }\n\n        :host(.theme-dark) {\n          --notification-bg: #374151;\n          --notification-border: #4b5563;\n          --notification-text: #e5e7eb;\n          --notification-title: #f9fafb;\n          --notification-close-hover: #4b5563;\n          --notification-close-active: #6b7280;\n        }\n\n        .notification {\n          background: var(--notification-bg);\n          border: 1px solid var(--notification-border);\n          border-radius: 8px;\n          box-shadow: 0 4px 12px var(--notification-shadow);\n          padding: 16px;\n          min-width: 320px;\n          max-width: 480px;\n          display: flex;\n          align-items: flex-start;\n          gap: 12px;\n          position: relative;\n        }\n\n        .notification-icon {\n          flex-shrink: 0;\n          width: 20px;\n          height: 20px;\n          margin-top: 2px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          font-size: 16px;\n        }\n\n        .notification-icon.type-info {\n          color: var(--notification-icon-info);\n        }\n\n        .notification-icon.type-success {\n          color: var(--notification-icon-success);\n        }\n\n        .notification-icon.type-warning {\n          color: var(--notification-icon-warning);\n        }\n\n        .notification-icon.type-error {\n          color: var(--notification-icon-error);\n        }\n\n        .notification-content {\n          flex: 1;\n          min-width: 0;\n        }\n\n        .notification-title {\n          color: var(--notification-title);\n          font-weight: 600;\n          margin: 0 0 4px 0;\n          font-size: 14px;\n          line-height: 1.4;\n        }\n\n        .notification-message {\n          color: var(--notification-text);\n          margin: 0;\n          font-size: 14px;\n          line-height: 1.4;\n          word-wrap: break-word;\n        }\n\n        .notification-close {\n          flex-shrink: 0;\n          background: none;\n          border: none;\n          color: var(--notification-text);\n          cursor: pointer;\n          padding: 4px;\n          border-radius: 4px;\n          width: 24px;\n          height: 24px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          font-size: 16px;\n          line-height: 1;\n          margin-top: -2px;\n          margin-right: -2px;\n        }\n\n        .notification-close:hover {\n          background: var(--notification-close-hover);\n        }\n\n        .notification-close:active {\n          background: var(--notification-close-active);\n        }\n\n        .notification-close:focus {\n          outline: 2px solid var(--notification-icon-info);\n          outline-offset: 1px;\n        }\n\n        :host([dismissible=\"false\"]) .notification-close {\n          display: none;\n        }\n\n        /* Progress bar for timed notifications */\n        .notification-progress {\n          position: absolute;\n          bottom: 0;\n          left: 0;\n          height: 3px;\n          background: var(--notification-icon-info);\n          border-radius: 0 0 8px 8px;\n          transition: width linear;\n          opacity: 0.6;\n        }\n\n        :host([type=\"success\"]) .notification-progress {\n          background: var(--notification-icon-success);\n        }\n\n        :host([type=\"warning\"]) .notification-progress {\n          background: var(--notification-icon-warning);\n        }\n\n        :host([type=\"error\"]) .notification-progress {\n          background: var(--notification-icon-error);\n        }\n\n        :host([timeout=\"0\"]) .notification-progress,\n        :host([persistent]) .notification-progress {\n          display: none;\n        }\n      </style>\n\n      <div class=\"notification\" part=\"notification\">\n        <div class=\"notification-icon\" part=\"icon\"></div>\n        <div class=\"notification-content\" part=\"content\">\n          <div class=\"notification-title\" part=\"title\"></div>\n          <div class=\"notification-message\" part=\"message\"></div>\n        </div>\n        <button class=\"notification-close\" part=\"close-button\" type=\"button\" aria-label=\"Close notification\">\n          ×\n        </button>\n        <div class=\"notification-progress\" part=\"progress\"></div>\n      </div>\n    `;\n\n    this.setupEventListeners();\n    this.updateContent();\n  }\n\n  private setupEventListeners(): void {\n    const closeButton = this.shadowRoot?.querySelector('.notification-close');\n    const notification = this.shadowRoot?.querySelector('.notification');\n\n    if (closeButton) {\n      closeButton.addEventListener('click', this.handleCloseClick.bind(this));\n    }\n\n    if (notification) {\n      notification.addEventListener(\n        'click',\n        this.handleNotificationClick.bind(this)\n      );\n    }\n  }\n\n  private handleCloseClick(event: Event): void {\n    event.stopPropagation();\n    this.dismiss();\n  }\n\n  private handleNotificationClick(): void {\n    dispatchCustomEvent(this, 'notification-click', {\n      notificationId: this.id,\n      notification: this,\n      type: this.type,\n    });\n  }\n\n  private updateContent(): void {\n    const shadowRoot = this.shadowRoot;\n    if (!shadowRoot) return;\n\n    const iconElement = shadowRoot.querySelector('.notification-icon');\n    const titleElement = shadowRoot.querySelector('.notification-title');\n    const messageElement = shadowRoot.querySelector('.notification-message');\n\n    if (iconElement) {\n      iconElement.className = `notification-icon type-${this.type}`;\n      iconElement.textContent = this.getIconForType(this.type);\n    }\n\n    if (titleElement) {\n      const title = this.title;\n      if (title) {\n        titleElement.textContent = title;\n        (titleElement as HTMLElement).style.display = 'block';\n      } else {\n        (titleElement as HTMLElement).style.display = 'none';\n      }\n    }\n\n    if (messageElement) {\n      messageElement.textContent = this.message;\n    }\n  }\n\n  private getIconForType(type: NotificationType): string {\n    switch (type) {\n      case 'success':\n        return '✓';\n      case 'warning':\n        return '⚠';\n      case 'error':\n        return '✕';\n      case 'info':\n      default:\n        return 'ℹ';\n    }\n  }\n\n  private startTimeout(): void {\n    this.clearTimeout();\n\n    const timeout = this.timeout;\n    if (timeout <= 0 || this.persistent) return;\n\n    const progressBar = this.shadowRoot?.querySelector(\n      '.notification-progress'\n    ) as HTMLElement;\n    if (progressBar) {\n      progressBar.style.width = '100%';\n      progressBar.style.transitionDuration = `${timeout}ms`;\n\n      // Animate progress bar\n      requestAnimationFrame(() => {\n        progressBar.style.width = '0%';\n      });\n    }\n\n    this._timeoutId = window.setTimeout(() => {\n      this.hide();\n    }, timeout);\n  }\n\n  private clearTimeout(): void {\n    if (this._timeoutId !== null) {\n      window.clearTimeout(this._timeoutId);\n      this._timeoutId = null;\n    }\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('notification');\n    }\n\n    // Set up theme inheritance if no explicit theme is set\n    if (!this.hasAttribute('theme')) {\n      applyEffectiveTheme(this);\n      this._themeCleanup = setupThemeInheritance(this);\n    } else {\n      this.applyTheme(this._theme);\n    }\n  }\n\n  disconnectedCallback(): void {\n    this.clearTimeout();\n\n    // Clean up theme inheritance listener\n    if (this._themeCleanup) {\n      this._themeCleanup();\n      this._themeCleanup = undefined;\n    }\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string | null,\n    newValue: string | null\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'type':\n      case 'title':\n      case 'message':\n        this.updateContent();\n        break;\n      case 'theme':\n        // If theme attribute is being set, use explicit theme\n        // If theme attribute is being removed, switch to inheritance\n        if (newValue) {\n          this._theme = newValue as Theme;\n          // Clean up any existing theme inheritance\n          if (this._themeCleanup) {\n            this._themeCleanup();\n            this._themeCleanup = undefined;\n          }\n          this.applyTheme(this._theme);\n        } else if (this.isConnected) {\n          // Attribute was removed, switch to inheritance\n          this._theme = 'auto';\n          applyEffectiveTheme(this);\n          this._themeCleanup = setupThemeInheritance(this);\n        }\n        break;\n      case 'timeout':\n      case 'persistent':\n        if (this._visible) {\n          this.startTimeout();\n        }\n        break;\n    }\n  }\n\n  // Public API\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this.setAttribute('theme', value);\n\n    // Clean up any existing theme inheritance\n    if (this._themeCleanup) {\n      this._themeCleanup();\n      this._themeCleanup = undefined;\n    }\n  }\n\n  get type(): NotificationType {\n    return (this.getAttribute('type') as NotificationType) || 'info';\n  }\n\n  set type(value: NotificationType) {\n    this.setAttribute('type', value);\n  }\n\n  get title(): string {\n    return this.getAttribute('title') || '';\n  }\n\n  set title(value: string) {\n    this.setAttribute('title', value);\n  }\n\n  get message(): string {\n    return this.getAttribute('message') || 'This is a notification message.';\n  }\n\n  set message(value: string) {\n    this.setAttribute('message', value);\n  }\n\n  get timeout(): number {\n    return parseInt(this.getAttribute('timeout') || '5000', 10);\n  }\n\n  set timeout(value: number) {\n    this.setAttribute('timeout', value.toString());\n  }\n\n  get dismissible(): boolean {\n    return this.getAttribute('dismissible') !== 'false';\n  }\n\n  set dismissible(value: boolean) {\n    this.setAttribute('dismissible', value.toString());\n  }\n\n  get persistent(): boolean {\n    return this.hasAttribute('persistent');\n  }\n\n  set persistent(value: boolean) {\n    if (value) {\n      this.setAttribute('persistent', '');\n    } else {\n      this.removeAttribute('persistent');\n    }\n  }\n\n  get visible(): boolean {\n    return this._visible;\n  }\n\n  /**\n   * Show the notification and return a promise that resolves when hidden\n   */\n  public show(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (this._resolvePromise) {\n        // Already showing, reject the previous promise\n        this._rejectPromise?.(\n          new Error('Notification was replaced by another show() call')\n        );\n      }\n\n      this._resolvePromise = resolve;\n      this._rejectPromise = reject;\n\n      this._visible = true;\n      this.classList.add('visible');\n\n      dispatchCustomEvent(this, 'notification-show', {\n        notificationId: this.id,\n        notification: this,\n        type: this.type,\n      });\n\n      this.startTimeout();\n    });\n  }\n\n  /**\n   * Hide the notification with animation\n   */\n  public hide(): void {\n    if (!this._visible) return;\n\n    this._visible = false;\n    this.classList.remove('visible');\n    this.clearTimeout();\n\n    dispatchCustomEvent(this, 'notification-hide', {\n      notificationId: this.id,\n      notification: this,\n      type: this.type,\n    });\n\n    // Resolve the promise after animation completes\n    setTimeout(() => {\n      if (this._resolvePromise) {\n        this._resolvePromise();\n        this._resolvePromise = null;\n        this._rejectPromise = null;\n      }\n    }, 300); // Match CSS transition duration\n  }\n\n  /**\n   * Dismiss the notification (hide and remove from DOM if appropriate)\n   */\n  public dismiss(): void {\n    dispatchCustomEvent(this, 'notification-dismiss', {\n      notificationId: this.id,\n      notification: this,\n      type: this.type,\n    });\n\n    this.hide();\n  }\n\n  public applyTheme(theme: Theme): void {\n    this._theme = theme;\n    applyTheme(this, theme);\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-notification')) {\n  customElements.define('e2-notification', NotificationElement);\n}\n","/**\n * Notification Container Element\n * A container that manages positioning and lifecycle of notification toasts\n */\n\nimport { EditorElementProperties, Theme } from '../../types';\nimport {\n  applyEffectiveTheme,\n  applyTheme,\n  dispatchCustomEvent,\n  generateId,\n  getShadowRoot,\n  setupThemeInheritance,\n} from '../../utils';\n\nexport type NotificationPosition =\n  | 'top-left'\n  | 'top-right'\n  | 'top-center'\n  | 'bottom-left'\n  | 'bottom-right'\n  | 'bottom-center';\n\nexport type StackDirection = 'up' | 'down';\n\nexport class NotificationContainerElement\n  extends HTMLElement\n  implements EditorElementProperties\n{\n  private _theme: Theme = 'auto';\n  private _observer: MutationObserver | null = null;\n  private _themeCleanup?: () => void;\n\n  static get observedAttributes(): string[] {\n    return [\n      'position',\n      'max-notifications',\n      'stack-direction',\n      'spacing',\n      'theme',\n    ];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          --container-spacing: 16px;\n          --notification-gap: 8px;\n\n          position: fixed;\n          z-index: 10000;\n          pointer-events: none;\n          display: flex;\n          flex-direction: column;\n          gap: var(--notification-gap);\n          max-width: calc(100vw - 40px);\n          max-height: calc(100vh - 40px);\n          overflow: hidden;\n        }\n\n        /* Position variants */\n        :host([position=\"top-left\"]) {\n          top: var(--container-spacing);\n          left: var(--container-spacing);\n          align-items: flex-start;\n        }\n\n        :host([position=\"top-right\"]) {\n          top: var(--container-spacing);\n          right: var(--container-spacing);\n          align-items: flex-end;\n        }\n\n        :host([position=\"top-center\"]) {\n          top: var(--container-spacing);\n          left: 50%;\n          transform: translateX(-50%);\n          align-items: center;\n        }\n\n        :host([position=\"bottom-left\"]) {\n          bottom: var(--container-spacing);\n          left: var(--container-spacing);\n          align-items: flex-start;\n          flex-direction: column-reverse;\n        }\n\n        :host([position=\"bottom-right\"]) {\n          bottom: var(--container-spacing);\n          right: var(--container-spacing);\n          align-items: flex-end;\n          flex-direction: column-reverse;\n        }\n\n        :host([position=\"bottom-center\"]) {\n          bottom: var(--container-spacing);\n          left: 50%;\n          transform: translateX(-50%);\n          align-items: center;\n          flex-direction: column-reverse;\n        }\n\n        /* Stack direction overrides */\n        :host([stack-direction=\"up\"]) {\n          flex-direction: column-reverse;\n        }\n\n        :host([stack-direction=\"down\"]) {\n          flex-direction: column;\n        }\n\n        /* Spacing control */\n        :host([spacing=\"small\"]) {\n          --notification-gap: 4px;\n        }\n\n        :host([spacing=\"medium\"]) {\n          --notification-gap: 8px;\n        }\n\n        :host([spacing=\"large\"]) {\n          --notification-gap: 16px;\n        }\n\n        ::slotted(e2-notification) {\n          pointer-events: auto;\n          position: static !important;\n          transform: none !important;\n          margin: 0;\n        }\n\n        /* Animation for notifications */\n        ::slotted(e2-notification:not(.visible)) {\n          opacity: 0;\n          transform: scale(0.9);\n          transition: all 0.3s cubic-bezier(0.4, 0.0, 0.2, 1);\n        }\n\n        ::slotted(e2-notification.visible) {\n          opacity: 1;\n          transform: scale(1);\n        }\n\n        /* Stacking animations for top positions */\n        :host([position^=\"top\"]) ::slotted(e2-notification) {\n          animation: slideInFromTop 0.3s cubic-bezier(0.4, 0.0, 0.2, 1);\n        }\n\n        /* Stacking animations for bottom positions */\n        :host([position^=\"bottom\"]) ::slotted(e2-notification) {\n          animation: slideInFromBottom 0.3s cubic-bezier(0.4, 0.0, 0.2, 1);\n        }\n\n        @keyframes slideInFromTop {\n          from {\n            opacity: 0;\n            transform: translateY(-20px) scale(0.9);\n          }\n          to {\n            opacity: 1;\n            transform: translateY(0) scale(1);\n          }\n        }\n\n        @keyframes slideInFromBottom {\n          from {\n            opacity: 0;\n            transform: translateY(20px) scale(0.9);\n          }\n          to {\n            opacity: 1;\n            transform: translateY(0) scale(1);\n          }\n        }\n\n        /* Responsive adjustments */\n        @media (max-width: 640px) {\n          :host {\n            --container-spacing: 12px;\n            max-width: calc(100vw - 24px);\n          }\n\n          ::slotted(e2-notification) {\n            min-width: 280px;\n            max-width: calc(100vw - 24px);\n          }\n        }\n      </style>\n\n      <slot></slot>\n    `;\n\n    this.setupMutationObserver();\n  }\n\n  private setupMutationObserver(): void {\n    this._observer = new MutationObserver(mutations => {\n      mutations.forEach(mutation => {\n        if (mutation.type === 'childList') {\n          this.manageNotifications();\n          this.updateNotificationPositions();\n        }\n      });\n    });\n\n    this._observer.observe(this, {\n      childList: true,\n      subtree: false,\n    });\n  }\n\n  private manageNotifications(): void {\n    const notifications = this.querySelectorAll('e2-notification');\n    const maxNotifications = this.maxNotifications;\n\n    if (maxNotifications > 0 && notifications.length > maxNotifications) {\n      // Remove oldest notifications that exceed the limit\n      const excess = notifications.length - maxNotifications;\n      for (let i = 0; i < excess; i++) {\n        const notification = notifications[i] as any;\n        if (typeof notification.dismiss === 'function') {\n          notification.dismiss();\n        } else {\n          notification.remove();\n        }\n      }\n    }\n\n    // Dispatch container update event\n    dispatchCustomEvent(this, 'notification-container-update', {\n      containerId: this.id,\n      container: this,\n      position: this.position,\n      count: notifications.length,\n    });\n  }\n\n  private updateNotificationPositions(): void {\n    const notifications = this.querySelectorAll('e2-notification');\n\n    notifications.forEach((notification, index) => {\n      // Apply theme to notification if it matches container theme\n      if (\n        this._theme !== 'auto' &&\n        typeof (notification as any).applyTheme === 'function'\n      ) {\n        (notification as any).theme = this._theme;\n      }\n\n      // Apply z-index to ensure proper stacking\n      (notification as HTMLElement).style.zIndex = (\n        10000 +\n        notifications.length -\n        index\n      ).toString();\n    });\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('notification-container');\n    }\n\n    // Set up theme inheritance if no explicit theme is set\n    if (!this.hasAttribute('theme')) {\n      applyEffectiveTheme(this);\n      this._themeCleanup = setupThemeInheritance(this);\n    } else {\n      this.applyTheme(this._theme);\n    }\n\n    this.updateNotificationPositions();\n  }\n\n  disconnectedCallback(): void {\n    if (this._observer) {\n      this._observer.disconnect();\n      this._observer = null;\n    }\n\n    // Clean up theme inheritance listener\n    if (this._themeCleanup) {\n      this._themeCleanup();\n      this._themeCleanup = undefined;\n    }\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string | null,\n    newValue: string | null\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'position':\n      case 'stack-direction':\n      case 'spacing':\n        // Handled by CSS attribute selectors\n        break;\n      case 'max-notifications':\n        this.manageNotifications();\n        break;\n      case 'theme':\n        // If theme attribute is being set, use explicit theme\n        // If theme attribute is being removed, switch to inheritance\n        if (newValue) {\n          this._theme = newValue as Theme;\n          // Clean up any existing theme inheritance\n          if (this._themeCleanup) {\n            this._themeCleanup();\n            this._themeCleanup = undefined;\n          }\n          this.applyTheme(this._theme);\n        } else if (this.isConnected) {\n          // Attribute was removed, switch to inheritance\n          this._theme = 'auto';\n          applyEffectiveTheme(this);\n          this._themeCleanup = setupThemeInheritance(this);\n        }\n        this.updateNotificationPositions();\n        break;\n    }\n  }\n\n  // Public API\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this.setAttribute('theme', value);\n\n    // Clean up any existing theme inheritance\n    if (this._themeCleanup) {\n      this._themeCleanup();\n      this._themeCleanup = undefined;\n    }\n  }\n\n  get position(): NotificationPosition {\n    return (\n      (this.getAttribute('position') as NotificationPosition) || 'top-right'\n    );\n  }\n\n  set position(value: NotificationPosition) {\n    this.setAttribute('position', value);\n  }\n\n  get maxNotifications(): number {\n    return parseInt(this.getAttribute('max-notifications') || '5', 10);\n  }\n\n  set maxNotifications(value: number) {\n    this.setAttribute('max-notifications', value.toString());\n  }\n\n  get stackDirection(): StackDirection {\n    return (this.getAttribute('stack-direction') as StackDirection) || 'down';\n  }\n\n  set stackDirection(value: StackDirection) {\n    this.setAttribute('stack-direction', value);\n  }\n\n  get spacing(): 'small' | 'medium' | 'large' {\n    return (\n      (this.getAttribute('spacing') as 'small' | 'medium' | 'large') || 'medium'\n    );\n  }\n\n  set spacing(value: 'small' | 'medium' | 'large') {\n    this.setAttribute('spacing', value);\n  }\n\n  /**\n   * Add a notification to this container\n   */\n  public addNotification(notification: HTMLElement): void {\n    this.appendChild(notification);\n  }\n\n  /**\n   * Remove a notification from this container\n   */\n  public removeNotification(notification: HTMLElement): void {\n    if (this.contains(notification)) {\n      this.removeChild(notification);\n    }\n  }\n\n  /**\n   * Clear all notifications from this container\n   */\n  public clear(): void {\n    const notifications = this.querySelectorAll('e2-notification');\n    notifications.forEach(notification => {\n      const notificationElement = notification as any;\n      if (typeof notificationElement.dismiss === 'function') {\n        notificationElement.dismiss();\n      } else {\n        notification.remove();\n      }\n    });\n  }\n\n  /**\n   * Get count of visible notifications\n   */\n  public getNotificationCount(): number {\n    return this.querySelectorAll('e2-notification').length;\n  }\n\n  public applyTheme(theme: Theme): void {\n    this._theme = theme;\n    applyTheme(this, theme);\n    this.updateNotificationPositions();\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-notification-container')) {\n  customElements.define(\n    'e2-notification-container',\n    NotificationContainerElement\n  );\n}\n","/**\n * Collapsible Panel Element\n * A panel that can be collapsed to a thin bar with an expand button\n * or expanded to show its full content\n */\n\nimport { EditorElementProperties, Theme } from '../../types';\nimport {\n  applyEffectiveTheme,\n  applyTheme,\n  dispatchCustomEvent,\n  generateId,\n  getShadowRoot,\n  setupThemeInheritance,\n} from '../../utils';\n\nexport type PanelOrientation = 'horizontal' | 'vertical';\n\nexport class CollapsiblePanel\n  extends HTMLElement\n  implements EditorElementProperties\n{\n  private _theme: Theme = 'auto';\n  private _collapsed: boolean = false;\n  private _orientation: PanelOrientation = 'vertical';\n  private _themeCleanup?: () => void;\n\n  static get observedAttributes(): string[] {\n    return ['theme', 'disabled', 'collapsed', 'orientation'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: block;\n          position: relative;\n          background: var(--panel-bg, #ffffff);\n          border: 1px solid var(--panel-border, #ccc);\n          font-family: var(--font-family, system-ui, sans-serif);\n          font-size: var(--font-size, 14px);\n          transition: all 0.3s ease;\n        }\n\n        :host(.theme-dark) {\n          background: var(--panel-bg-dark, #2d2d2d);\n          border-color: var(--panel-border-dark, #555);\n          color: var(--text-color-dark, #fff);\n        }\n\n        :host([disabled]) {\n          opacity: 0.6;\n          pointer-events: none;\n        }\n\n        /* Vertical orientation (default) */\n        :host([orientation=\"vertical\"]) {\n          min-height: 200px;\n        }\n\n        :host([orientation=\"vertical\"][collapsed]) {\n          min-height: 32px;\n          height: 32px;\n          overflow: hidden;\n        }\n\n        /* Horizontal orientation */\n        :host([orientation=\"horizontal\"]) {\n          min-width: 200px;\n          display: inline-block;\n          vertical-align: top;\n        }\n\n        :host([orientation=\"horizontal\"][collapsed]) {\n          min-width: 32px;\n          width: 32px;\n          overflow: hidden;\n        }\n\n        .panel-header {\n          display: flex;\n          align-items: center;\n          padding: 8px;\n          background: var(--panel-header-bg, #f8f8f8);\n          border-bottom: 1px solid var(--panel-border, #ccc);\n          min-height: 16px;\n          cursor: pointer;\n          user-select: none;\n        }\n\n        :host(.theme-dark) .panel-header {\n          background: var(--panel-header-bg-dark, #3a3a3a);\n          border-bottom-color: var(--panel-border-dark, #555);\n        }\n\n        .panel-header:hover {\n          background: var(--panel-header-hover-bg, #e8e8e8);\n        }\n\n        :host(.theme-dark) .panel-header:hover {\n          background: var(--panel-header-hover-bg-dark, #404040);\n        }\n\n        .toggle-button {\n          width: 16px;\n          height: 16px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          font-size: 12px;\n          margin-right: 8px;\n          flex-shrink: 0;\n        }\n\n        /* Vertical orientation icons */\n        :host([orientation=\"vertical\"]) .toggle-button .burger-icon {\n          display: none;\n        }\n\n        :host([orientation=\"vertical\"]) .toggle-button .close-icon {\n          display: block;\n        }\n\n        :host([orientation=\"vertical\"][collapsed]) .toggle-button .burger-icon {\n          display: block;\n        }\n\n        :host([orientation=\"vertical\"][collapsed]) .toggle-button .close-icon {\n          display: none;\n        }\n\n        /* Horizontal orientation icons */\n        :host([orientation=\"horizontal\"]) .toggle-button .burger-icon {\n          display: none;\n        }\n\n        :host([orientation=\"horizontal\"]) .toggle-button .close-icon {\n          display: block;\n        }\n\n        :host([orientation=\"horizontal\"][collapsed]) .toggle-button .burger-icon {\n          display: block;\n        }\n\n        :host([orientation=\"horizontal\"][collapsed]) .toggle-button .close-icon {\n          display: none;\n        }\n\n        /* Rotate icons for horizontal orientation */\n        :host([orientation=\"horizontal\"]) .toggle-button {\n          transform: rotate(90deg);\n        }\n\n        .panel-title {\n          flex-grow: 1;\n          font-weight: 500;\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n        }\n\n        /* Hide title when collapsed */\n        :host([collapsed]) .panel-title {\n          display: none;\n        }\n\n        .panel-content {\n          padding: 12px;\n          overflow: auto;\n        }\n\n        :host([collapsed]) .panel-content {\n          display: none;\n        }\n\n        /* Content slot styling */\n        ::slotted(*) {\n          display: block;\n        }\n      </style>\n\n      <div class=\"panel-header\">\n        <div class=\"toggle-button\">\n          <span class=\"burger-icon\">☰</span>\n          <span class=\"close-icon\">✕</span>\n        </div>\n        <div class=\"panel-title\">\n          <slot name=\"title\">Panel</slot>\n        </div>\n      </div>\n\n      <div class=\"panel-content\">\n        <slot></slot>\n      </div>\n    `;\n\n    // Add click handler for the header\n    const header = shadowRoot.querySelector('.panel-header') as HTMLElement;\n    header.addEventListener('click', this.handleToggle.bind(this));\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('collapsible-panel');\n    }\n\n    // Set up theme inheritance if no explicit theme is set\n    if (!this.hasAttribute('theme')) {\n      applyEffectiveTheme(this);\n      this._themeCleanup = setupThemeInheritance(this);\n    } else {\n      this.applyTheme(this._theme);\n    }\n  }\n\n  disconnectedCallback(): void {\n    // Clean up theme inheritance listener\n    if (this._themeCleanup) {\n      this._themeCleanup();\n      this._themeCleanup = undefined;\n    }\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string,\n    newValue: string\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'theme':\n        // If theme attribute is being set, use explicit theme\n        // If theme attribute is being removed, switch to inheritance\n        if (newValue) {\n          this.theme = newValue as Theme;\n        } else if (this.isConnected) {\n          // Attribute was removed, switch to inheritance\n          applyEffectiveTheme(this);\n          this._themeCleanup = setupThemeInheritance(this);\n        }\n        break;\n      case 'collapsed':\n        this._collapsed = newValue !== null;\n        break;\n      case 'orientation':\n        this._orientation = (newValue as PanelOrientation) || 'vertical';\n        break;\n    }\n  }\n\n  private handleToggle(): void {\n    this.collapsed = !this.collapsed;\n\n    // Dispatch toggle event\n    dispatchCustomEvent(this, 'collapsible-panel-toggle', {\n      panelId: this.id,\n      panel: this,\n      collapsed: this.collapsed,\n      orientation: this.orientation,\n    });\n  }\n\n  // Public API\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this._theme = value;\n\n    // Clean up any existing theme inheritance\n    if (this._themeCleanup) {\n      this._themeCleanup();\n      this._themeCleanup = undefined;\n    }\n\n    this.applyTheme(value);\n  }\n\n  get collapsed(): boolean {\n    return this._collapsed;\n  }\n\n  set collapsed(value: boolean) {\n    this._collapsed = value;\n    if (value) {\n      this.setAttribute('collapsed', '');\n    } else {\n      this.removeAttribute('collapsed');\n    }\n  }\n\n  get orientation(): PanelOrientation {\n    return this._orientation;\n  }\n\n  set orientation(value: PanelOrientation) {\n    this._orientation = value;\n    this.setAttribute('orientation', value);\n  }\n\n  toggle(): void {\n    this.collapsed = !this.collapsed;\n  }\n\n  expand(): void {\n    this.collapsed = false;\n  }\n\n  collapse(): void {\n    this.collapsed = true;\n  }\n\n  applyTheme(theme: Theme): void {\n    applyTheme(this, theme);\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-collapsible-panel')) {\n  customElements.define('e2-collapsible-panel', CollapsiblePanel);\n}\n","/**\n * Split Panel Element\n * A single panel within a split panel container that can be resized\n */\n\nimport { EditorElementProperties, Theme } from '../../types';\nimport {\n  applyEffectiveTheme,\n  applyTheme,\n  generateId,\n  getShadowRoot,\n  notifyThemeChange,\n  setupThemeInheritance,\n} from '../../utils';\n\nexport class SplitPanel extends HTMLElement implements EditorElementProperties {\n  private _theme: Theme = 'auto';\n  private _size: number = 50; // percentage\n  private _minSize: number = 10; // percentage\n  private _maxSize: number = 90; // percentage\n  private _resizable: boolean = true;\n  private _themeCleanup?: () => void;\n\n  static get observedAttributes(): string[] {\n    return ['theme', 'disabled', 'size', 'min-size', 'max-size', 'resizable'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: block;\n          position: relative;\n          background: var(--panel-bg, #ffffff);\n          border: 1px solid var(--panel-border, #e0e0e0);\n          font-family: var(--font-family, system-ui, sans-serif);\n          font-size: var(--font-size, 14px);\n          overflow: hidden;\n          box-sizing: border-box;\n        }\n\n        :host(.theme-dark) {\n          background: var(--panel-bg-dark, #2d2d2d);\n          border-color: var(--panel-border-dark, #555);\n          color: var(--text-color-dark, #fff);\n        }\n\n        :host([disabled]) {\n          opacity: 0.6;\n          pointer-events: none;\n        }\n\n        .panel-content {\n          width: 100%;\n          height: 100%;\n          overflow: auto;\n          box-sizing: border-box;\n          padding: var(--panel-padding, 8px);\n        }\n\n        /* Content slot styling */\n        ::slotted(*) {\n          display: block;\n        }\n      </style>\n\n      <div class=\"panel-content\">\n        <slot></slot>\n      </div>\n    `;\n\n    // Set up event listeners\n    this.addEventListener('resize', this.handleResize.bind(this));\n  }\n\n  connectedCallback(): void {\n    // Generate ID if not provided\n    if (!this.id) {\n      this.id = generateId('split-panel');\n    }\n\n    // Set up theme inheritance if no explicit theme is set\n    if (!this.hasAttribute('theme')) {\n      applyEffectiveTheme(this);\n      this._themeCleanup = setupThemeInheritance(this);\n    } else {\n      this.applyTheme(this._theme);\n    }\n  }\n\n  disconnectedCallback(): void {\n    // Clean up theme inheritance listener\n    if (this._themeCleanup) {\n      this._themeCleanup();\n      this._themeCleanup = undefined;\n    }\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string | null,\n    newValue: string | null\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'theme':\n        // Clean up existing theme inheritance when explicit theme is set\n        if (this._themeCleanup) {\n          this._themeCleanup();\n          this._themeCleanup = undefined;\n        }\n        this._theme = (newValue as Theme) || 'auto';\n        this.applyTheme(this._theme);\n        break;\n      case 'size':\n        this._size = parseFloat(newValue || '50');\n        this.updateSize();\n        break;\n      case 'min-size':\n        this._minSize = parseFloat(newValue || '10');\n        break;\n      case 'max-size':\n        this._maxSize = parseFloat(newValue || '90');\n        break;\n      case 'resizable':\n        this._resizable = newValue !== 'false';\n        break;\n      case 'disabled':\n        this.toggleAttribute('disabled', newValue !== null);\n        break;\n    }\n  }\n\n  private handleResize(): void {\n    // Handle resize events from the container\n    this.updateSize();\n  }\n\n  private updateSize(): void {\n    // The container will handle the actual sizing via CSS\n    // This method can be used for cleanup or notifications\n  }\n\n  // Public API\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this.setAttribute('theme', value);\n    // Notify child elements of theme change\n    notifyThemeChange(this, value);\n  }\n\n  get size(): number {\n    return this._size;\n  }\n\n  set size(value: number) {\n    this.setAttribute('size', value.toString());\n  }\n\n  get minSize(): number {\n    return this._minSize;\n  }\n\n  set minSize(value: number) {\n    this.setAttribute('min-size', value.toString());\n  }\n\n  get maxSize(): number {\n    return this._maxSize;\n  }\n\n  set maxSize(value: number) {\n    this.setAttribute('max-size', value.toString());\n  }\n\n  get resizable(): boolean {\n    return this._resizable;\n  }\n\n  set resizable(value: boolean) {\n    this.setAttribute('resizable', value.toString());\n  }\n\n  get disabled(): boolean {\n    return this.hasAttribute('disabled');\n  }\n\n  set disabled(value: boolean) {\n    this.toggleAttribute('disabled', value);\n  }\n\n  applyTheme(theme: Theme): void {\n    applyTheme(this, theme);\n  }\n\n  // Utility method to get the current computed size\n  getCurrentSize(): number {\n    const container = this.parentElement;\n    if (!container) return this._size;\n\n    const isVertical = container.getAttribute('orientation') === 'vertical';\n\n    if (isVertical) {\n      const containerHeight = container.clientHeight;\n      const thisHeight = this.clientHeight;\n      return (thisHeight / containerHeight) * 100;\n    } else {\n      const containerWidth = container.clientWidth;\n      const thisWidth = this.clientWidth;\n      return (thisWidth / containerWidth) * 100;\n    }\n  }\n}\n\n// Register the element\nif (!customElements.get('e2-split-panel')) {\n  customElements.define('e2-split-panel', SplitPanel);\n}\n\nexport default SplitPanel;\n","/**\n * Split Panel Container Element\n * A container that manages multiple resizable split panels with drag handles\n */\n\nimport {\n  EditorElementProperties,\n  SplitPanelOrientation,\n  SplitPanelResizeEndEvent,\n  SplitPanelResizeEvent,\n  SplitPanelResizeStartEvent,\n  Theme,\n} from '../../types';\nimport {\n  applyEffectiveTheme,\n  applyTheme,\n  debounce,\n  dispatchCustomEvent,\n  generateId,\n  getShadowRoot,\n  notifyThemeChange,\n  setupThemeInheritance,\n} from '../../utils';\n\nexport class SplitPanelContainer\n  extends HTMLElement\n  implements EditorElementProperties\n{\n  private _theme: Theme = 'auto';\n  private _orientation: SplitPanelOrientation = 'horizontal';\n  private _resizing: boolean = false;\n  private _activePanel: HTMLElement | null = null;\n  private _startPosition: number = 0;\n  private _startSize: number = 0;\n  private _nextPanelStartSize: number = 0;\n  private _updatingPanelSizes: boolean = false;\n  private _themeCleanup?: () => void;\n\n  private debouncedResize = debounce(this.handleResize.bind(this), 16);\n\n  static get observedAttributes(): string[] {\n    return ['theme', 'disabled', 'orientation'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n    this.bindEvents();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: flex;\n          position: relative;\n          width: 100%;\n          height: 100%;\n          min-height: 200px;\n          background: var(--container-bg, #f5f5f5);\n          font-family: var(--font-family, system-ui, sans-serif);\n          overflow: hidden;\n          box-sizing: border-box;\n        }\n\n        :host(.theme-dark) {\n          background: var(--container-bg-dark, #1e1e1e);\n        }\n\n        :host([disabled]) {\n          opacity: 0.6;\n          pointer-events: none;\n        }\n\n        /* Horizontal layout (side by side) */\n        :host([orientation=\"horizontal\"]) {\n          flex-direction: row;\n        }\n\n        /* Vertical layout (stacked) */\n        :host([orientation=\"vertical\"]) {\n          flex-direction: column;\n        }\n\n        /* Panel styling */\n        ::slotted(e2-split-panel) {\n          flex-shrink: 0;\n          overflow: hidden;\n          position: relative;\n        }\n\n        /* Add spacing for handles and visual separators */\n        ::slotted(e2-split-panel:not(:last-child)) {\n          border-right: var(--handle-size, 4px) solid var(--handle-bg, #ccc);\n        }\n\n        :host([orientation=\"vertical\"]) ::slotted(e2-split-panel:not(:last-child)) {\n          border-right: none;\n          border-bottom: var(--handle-size, 4px) solid var(--handle-bg, #ccc);\n        }\n\n        :host(.theme-dark) ::slotted(e2-split-panel:not(:last-child)) {\n          border-right-color: var(--handle-bg-dark, #555);\n        }\n\n        :host([orientation=\"vertical\"].theme-dark) ::slotted(e2-split-panel:not(:last-child)) {\n          border-bottom-color: var(--handle-bg-dark, #555);\n        }\n\n        /* No user selection during drag */\n        :host(.dragging) {\n          user-select: none;\n        }\n\n        :host(.dragging) ::slotted(*) {\n          user-select: none;\n          pointer-events: none;\n        }\n      </style>\n\n      <slot></slot>\n    `;\n  }\n\n  private bindEvents(): void {\n    // Handle mouse events for resizing\n    this.addEventListener('mousedown', this.handleMouseDown.bind(this));\n    this.addEventListener('mousemove', this.handleMouseMove.bind(this));\n    this.addEventListener('mouseup', this.handleMouseUp.bind(this));\n    this.addEventListener('mouseleave', this.handleMouseLeave.bind(this));\n\n    // Handle window resize\n    window.addEventListener('resize', this.debouncedResize);\n\n    // Don't listen to slotchange to avoid infinite loops\n    // Instead, we'll rely on the initial setup and manual updates\n  }\n\n  connectedCallback(): void {\n    // Generate ID if not provided\n    if (!this.id) {\n      this.id = generateId('split-panel-container');\n    }\n\n    // Set up theme inheritance if no explicit theme is set\n    if (!this.hasAttribute('theme')) {\n      applyEffectiveTheme(this);\n      this._themeCleanup = setupThemeInheritance(this);\n    } else {\n      this.applyTheme(this._theme);\n    }\n\n    // Initial setup\n    setTimeout(() => {\n      this.updateHandles();\n      this.updatePanelSizes();\n    }, 0);\n  }\n\n  disconnectedCallback(): void {\n    window.removeEventListener('resize', this.debouncedResize);\n    // Clean up theme inheritance listener\n    if (this._themeCleanup) {\n      this._themeCleanup();\n      this._themeCleanup = undefined;\n    }\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string | null,\n    newValue: string | null\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'theme':\n        // Clean up existing theme inheritance when explicit theme is set\n        if (this._themeCleanup) {\n          this._themeCleanup();\n          this._themeCleanup = undefined;\n        }\n        this._theme = (newValue as Theme) || 'auto';\n        this.applyTheme(this._theme);\n        break;\n      case 'orientation':\n        this._orientation = (newValue as SplitPanelOrientation) || 'horizontal';\n        this.updateHandles();\n        this.updatePanelSizes();\n        break;\n      case 'disabled':\n        this.toggleAttribute('disabled', newValue !== null);\n        break;\n    }\n  }\n\n  private updateHandles(): void {\n    // Do nothing - we're using CSS borders as visual handles\n    // and mouse event delegation for interaction\n  }\n\n  private updatePanelSizes(): void {\n    // Prevent infinite recursion\n    if (this._updatingPanelSizes) return;\n    this._updatingPanelSizes = true;\n\n    try {\n      const panels = this.getPanels();\n      if (panels.length === 0) return;\n\n      // Calculate total available space\n      const containerRect = this.getBoundingClientRect();\n      const handleSize = parseInt(\n        getComputedStyle(this).getPropertyValue('--handle-size') || '4'\n      );\n      const totalHandles = panels.length - 1;\n      const totalHandleSpace = totalHandles * handleSize;\n\n      const availableSpace =\n        this._orientation === 'horizontal'\n          ? containerRect.width - totalHandleSpace\n          : containerRect.height - totalHandleSpace;\n\n      // Calculate default sizes if not set\n      let totalSetSize = 0;\n      let unsetPanels = 0;\n\n      panels.forEach(panel => {\n        const size = parseFloat(panel.getAttribute('size') || '0');\n        if (size > 0) {\n          totalSetSize += size;\n        } else {\n          unsetPanels++;\n        }\n      });\n\n      const remainingPercentage = Math.max(0, 100 - totalSetSize);\n      const defaultSize =\n        unsetPanels > 0 ? remainingPercentage / unsetPanels : 0;\n\n      // Apply sizes\n      panels.forEach(panel => {\n        let size = parseFloat(panel.getAttribute('size') || '0');\n        if (size <= 0) {\n          size = defaultSize;\n          // Only set attribute if it's actually different to avoid recursive calls\n          const currentSize = panel.getAttribute('size');\n          if (currentSize !== size.toString()) {\n            panel.setAttribute('size', size.toString());\n          }\n        }\n\n        const actualSize = (size / 100) * availableSpace;\n\n        if (this._orientation === 'horizontal') {\n          panel.style.width = `${actualSize}px`;\n          panel.style.height = '100%';\n          panel.style.flexBasis = `${actualSize}px`;\n        } else {\n          panel.style.height = `${actualSize}px`;\n          panel.style.width = '100%';\n          panel.style.flexBasis = `${actualSize}px`;\n        }\n      });\n    } finally {\n      this._updatingPanelSizes = false;\n    }\n  }\n\n  private handleMouseDown(event: MouseEvent): void {\n    const panels = this.getPanels();\n    if (panels.length < 2) return;\n\n    // Find which panel border we're on\n    let panelIndex = -1;\n    let currentPanel: HTMLElement | null = null;\n    let nextPanel: HTMLElement | null = null;\n\n    const handleSize = parseInt(\n      getComputedStyle(this).getPropertyValue('--handle-size') || '4'\n    );\n\n    for (let i = 0; i < panels.length - 1; i++) {\n      const panel = panels[i];\n      const rect = panel.getBoundingClientRect();\n      const containerRect = this.getBoundingClientRect();\n\n      const relativeX = event.clientX - containerRect.left;\n      const relativeY = event.clientY - containerRect.top;\n\n      let onBorder = false;\n\n      if (this._orientation === 'horizontal') {\n        // Check if we're on the right border of this panel (border is part of the panel)\n        const borderStart = rect.right - containerRect.left - handleSize;\n        const borderEnd = rect.right - containerRect.left;\n        onBorder = relativeX >= borderStart && relativeX <= borderEnd;\n      } else {\n        // Check if we're on the bottom border of this panel (border is part of the panel)\n        const borderStart = rect.bottom - containerRect.top - handleSize;\n        const borderEnd = rect.bottom - containerRect.top;\n        onBorder = relativeY >= borderStart && relativeY <= borderEnd;\n      }\n\n      if (onBorder) {\n        panelIndex = i;\n        currentPanel = panels[i];\n        nextPanel = panels[i + 1];\n        break;\n      }\n    }\n\n    if (panelIndex === -1 || !currentPanel || !nextPanel) return;\n\n    event.preventDefault();\n\n    this._resizing = true;\n    this._activePanel = currentPanel;\n    this._startPosition =\n      this._orientation === 'horizontal' ? event.clientX : event.clientY;\n    this._startSize = parseFloat(currentPanel.getAttribute('size') || '50');\n    this._nextPanelStartSize = parseFloat(\n      nextPanel.getAttribute('size') || '50'\n    );\n\n    this.classList.add('dragging');\n\n    // Update cursor\n    this.style.cursor =\n      this._orientation === 'horizontal' ? 'col-resize' : 'row-resize';\n\n    // Dispatch resize start event\n    dispatchCustomEvent<SplitPanelResizeStartEvent['detail']>(\n      this,\n      'split-panel-resize-start',\n      {\n        containerId: this.id,\n        container: this,\n        panelId: currentPanel.id,\n        panel: currentPanel,\n        startSize: this._startSize,\n      }\n    );\n  }\n\n  private handleMouseMove(event: MouseEvent): void {\n    // Handle dragging if currently resizing\n    if (this._resizing && this._activePanel) {\n      event.preventDefault();\n\n      const currentPosition =\n        this._orientation === 'horizontal' ? event.clientX : event.clientY;\n      const delta = currentPosition - this._startPosition;\n\n      const containerRect = this.getBoundingClientRect();\n      const containerSize =\n        this._orientation === 'horizontal'\n          ? containerRect.width\n          : containerRect.height;\n\n      const deltaPercentage = (delta / containerSize) * 100;\n\n      const panels = this.getPanels();\n      const currentIndex = panels.indexOf(this._activePanel);\n      const nextPanel = panels[currentIndex + 1];\n\n      if (!nextPanel) return;\n\n      const newCurrentSize = Math.max(\n        parseFloat(this._activePanel.getAttribute('min-size') || '10'),\n        Math.min(\n          parseFloat(this._activePanel.getAttribute('max-size') || '90'),\n          this._startSize + deltaPercentage\n        )\n      );\n\n      const newNextSize = Math.max(\n        parseFloat(nextPanel.getAttribute('min-size') || '10'),\n        Math.min(\n          parseFloat(nextPanel.getAttribute('max-size') || '90'),\n          this._nextPanelStartSize - deltaPercentage\n        )\n      );\n\n      // Update panel sizes\n      this._activePanel.setAttribute('size', newCurrentSize.toString());\n      nextPanel.setAttribute('size', newNextSize.toString());\n\n      this.updatePanelSizes();\n\n      // Dispatch resize event\n      dispatchCustomEvent<SplitPanelResizeEvent['detail']>(\n        this,\n        'split-panel-resize',\n        {\n          containerId: this.id,\n          container: this,\n          panelId: this._activePanel.id,\n          panel: this._activePanel,\n          size: newCurrentSize,\n          minSize: parseFloat(\n            this._activePanel.getAttribute('min-size') || '10'\n          ),\n          maxSize: parseFloat(\n            this._activePanel.getAttribute('max-size') || '90'\n          ),\n        }\n      );\n    } else {\n      // Handle hover cursor when not dragging\n      this.updateHoverCursor(event);\n    }\n  }\n\n  private updateHoverCursor(event: MouseEvent): void {\n    const panels = this.getPanels();\n    if (panels.length < 2) {\n      this.style.cursor = '';\n      return;\n    }\n\n    const handleSize = parseInt(\n      getComputedStyle(this).getPropertyValue('--handle-size') || '4'\n    );\n\n    let overHandle = false;\n\n    for (let i = 0; i < panels.length - 1; i++) {\n      const panel = panels[i];\n      const rect = panel.getBoundingClientRect();\n      const containerRect = this.getBoundingClientRect();\n\n      const relativeX = event.clientX - containerRect.left;\n      const relativeY = event.clientY - containerRect.top;\n\n      if (this._orientation === 'horizontal') {\n        // Check if we're on the right border of this panel (border is part of the panel)\n        const borderStart = rect.right - containerRect.left - handleSize;\n        const borderEnd = rect.right - containerRect.left;\n        if (relativeX >= borderStart && relativeX <= borderEnd) {\n          overHandle = true;\n          break;\n        }\n      } else {\n        // Check if we're on the bottom border of this panel (border is part of the panel)\n        const borderStart = rect.bottom - containerRect.top - handleSize;\n        const borderEnd = rect.bottom - containerRect.top;\n        if (relativeY >= borderStart && relativeY <= borderEnd) {\n          overHandle = true;\n          break;\n        }\n      }\n    }\n\n    // Update cursor based on whether we're over a handle\n    if (overHandle) {\n      this.style.cursor =\n        this._orientation === 'horizontal' ? 'col-resize' : 'row-resize';\n    } else {\n      this.style.cursor = '';\n    }\n  }\n\n  private handleMouseUp(event: MouseEvent): void {\n    if (!this._resizing) return;\n\n    event.preventDefault();\n\n    const finalSize = this._activePanel\n      ? parseFloat(this._activePanel.getAttribute('size') || '50')\n      : 0;\n\n    // Dispatch resize end event\n    if (this._activePanel) {\n      dispatchCustomEvent<SplitPanelResizeEndEvent['detail']>(\n        this,\n        'split-panel-resize-end',\n        {\n          containerId: this.id,\n          container: this,\n          panelId: this._activePanel.id,\n          panel: this._activePanel,\n          finalSize,\n        }\n      );\n    }\n\n    this._resizing = false;\n    this._activePanel = null;\n    this.classList.remove('dragging');\n\n    // Update cursor based on current hover position\n    this.updateHoverCursor(event);\n  }\n\n  private handleMouseLeave(event: MouseEvent): void {\n    // End resizing if mouse leaves the container\n    if (this._resizing) {\n      this.handleMouseUp(event);\n    }\n\n    // Reset cursor when leaving the container\n    this.style.cursor = '';\n  }\n\n  private handleResize(): void {\n    this.updatePanelSizes();\n  }\n\n  private getPanels(): HTMLElement[] {\n    return Array.from(this.querySelectorAll('e2-split-panel'));\n  }\n\n  // Public API\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this.setAttribute('theme', value);\n    // Notify child elements of theme change\n    notifyThemeChange(this, value);\n  }\n\n  get orientation(): SplitPanelOrientation {\n    return this._orientation;\n  }\n\n  set orientation(value: SplitPanelOrientation) {\n    this.setAttribute('orientation', value);\n  }\n\n  get disabled(): boolean {\n    return this.hasAttribute('disabled');\n  }\n\n  set disabled(value: boolean) {\n    this.toggleAttribute('disabled', value);\n  }\n\n  applyTheme(theme: Theme): void {\n    applyTheme(this, theme);\n  }\n\n  // Method to programmatically resize a panel\n  resizePanel(panelId: string, size: number): void {\n    const panel = this.querySelector(`#${panelId}`) as HTMLElement;\n    if (panel && panel.tagName.toLowerCase() === 'e2-split-panel') {\n      panel.setAttribute('size', size.toString());\n      this.updatePanelSizes();\n    }\n  }\n\n  // Method to get panel sizes\n  getPanelSizes(): { [panelId: string]: number } {\n    const panels = this.getPanels();\n    const sizes: { [panelId: string]: number } = {};\n\n    panels.forEach(panel => {\n      if (panel.id) {\n        sizes[panel.id] = parseFloat(panel.getAttribute('size') || '0');\n      }\n    });\n\n    return sizes;\n  }\n\n  // Method to reset all panels to equal sizes\n  resetPanelSizes(): void {\n    const panels = this.getPanels();\n    const equalSize = 100 / panels.length;\n\n    panels.forEach(panel => {\n      panel.setAttribute('size', equalSize.toString());\n    });\n\n    this.updatePanelSizes();\n  }\n}\n\n// Register the element\nif (!customElements.get('e2-split-panel-container')) {\n  customElements.define('e2-split-panel-container', SplitPanelContainer);\n}\n\nexport default SplitPanelContainer;\n","/**\n * Status Bar Element\n * A horizontal status bar typically placed at the bottom of an application\n * Contains left, center, and right sections for different types of status information\n */\n\nimport {\n  EditorElementProperties,\n  StatusMessageEvent,\n  StatusMessageType,\n  Theme,\n} from '../../types';\nimport {\n  applyEffectiveTheme,\n  applyTheme,\n  dispatchCustomEvent,\n  generateId,\n  getShadowRoot,\n  setupThemeInheritance,\n} from '../../utils';\n\nexport class StatusBar extends HTMLElement implements EditorElementProperties {\n  private _theme: Theme = 'auto';\n  private _temporaryMessageTimeout?: number;\n  private _themeCleanup?: () => void;\n\n  static get observedAttributes(): string[] {\n    return ['theme', 'disabled'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: flex;\n          align-items: center;\n          padding: 4px 8px;\n          background: var(--statusbar-bg, #f8f8f8);\n          border-top: 1px solid var(--statusbar-border, #e0e0e0);\n          font-family: var(--font-family, system-ui, sans-serif);\n          font-size: var(--font-size-small, 12px);\n          min-height: 24px;\n          position: relative;\n          overflow: hidden;\n        }\n\n        :host(.theme-dark) {\n          background: var(--statusbar-bg-dark, #252526);\n          border-top-color: var(--statusbar-border-dark, #3e3e42);\n          color: var(--text-color-dark, #cccccc);\n        }\n\n        :host([disabled]) {\n          opacity: 0.6;\n          pointer-events: none;\n        }\n\n        .status-container {\n          display: flex;\n          align-items: center;\n          width: 100%;\n          gap: 8px;\n        }\n\n        .status-section {\n          display: flex;\n          align-items: center;\n          gap: 8px;\n        }\n\n        .status-section.left {\n          flex: 0 0 auto;\n          justify-content: flex-start;\n        }\n\n        .status-section.center {\n          flex: 1 1 auto;\n          justify-content: center;\n        }\n\n        .status-section.right {\n          flex: 0 0 auto;\n          justify-content: flex-end;\n        }\n\n        .temporary-message {\n          position: absolute;\n          left: 0;\n          right: 0;\n          top: 0;\n          bottom: 0;\n          display: flex;\n          align-items: center;\n          padding: 4px 8px;\n          background: var(--statusbar-message-bg, var(--statusbar-bg, #f8f8f8));\n          z-index: 10;\n          opacity: 0;\n          transform: translateY(100%);\n          transition: all 0.2s ease-in-out;\n        }\n\n        .temporary-message.show {\n          opacity: 1;\n          transform: translateY(0);\n        }\n\n        .temporary-message.info {\n          background: var(--statusbar-info-bg, #e3f2fd);\n          color: var(--statusbar-info-text, #1565c0);\n        }\n\n        .temporary-message.success {\n          background: var(--statusbar-success-bg, #e8f5e8);\n          color: var(--statusbar-success-text, #2e7d32);\n        }\n\n        .temporary-message.warning {\n          background: var(--statusbar-warning-bg, #fff3e0);\n          color: var(--statusbar-warning-text, #f57c00);\n        }\n\n        .temporary-message.error {\n          background: var(--statusbar-error-bg, #ffebee);\n          color: var(--statusbar-error-text, #c62828);\n        }\n\n        :host(.theme-dark) .temporary-message.info {\n          background: var(--statusbar-info-bg-dark, #1e3a8a);\n          color: var(--statusbar-info-text-dark, #93c5fd);\n        }\n\n        :host(.theme-dark) .temporary-message.success {\n          background: var(--statusbar-success-bg-dark, #166534);\n          color: var(--statusbar-success-text-dark, #86efac);\n        }\n\n        :host(.theme-dark) .temporary-message.warning {\n          background: var(--statusbar-warning-bg-dark, #92400e);\n          color: var(--statusbar-warning-text-dark, #fcd34d);\n        }\n\n        :host(.theme-dark) .temporary-message.error {\n          background: var(--statusbar-error-bg-dark, #991b1b);\n          color: var(--statusbar-error-text-dark, #fca5a5);\n        }\n      </style>\n\n      <div class=\"status-container\">\n        <div class=\"status-section left\">\n          <slot name=\"left\"></slot>\n        </div>\n        <div class=\"status-section center\">\n          <slot name=\"center\"></slot>\n        </div>\n        <div class=\"status-section right\">\n          <slot name=\"right\"></slot>\n        </div>\n      </div>\n\n      <div class=\"temporary-message\" id=\"temporary-message\">\n        <span id=\"message-text\"></span>\n      </div>\n    `;\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('status-bar');\n    }\n\n    // Set up theme inheritance if no explicit theme is set\n    if (!this.hasAttribute('theme')) {\n      applyEffectiveTheme(this);\n      this._themeCleanup = setupThemeInheritance(this);\n    } else {\n      this.applyTheme(this._theme);\n    }\n  }\n\n  disconnectedCallback(): void {\n    // Clean up theme inheritance listener\n    if (this._themeCleanup) {\n      this._themeCleanup();\n      this._themeCleanup = undefined;\n    }\n\n    // Clear any temporary message timeout\n    if (this._temporaryMessageTimeout) {\n      window.clearTimeout(this._temporaryMessageTimeout);\n      this._temporaryMessageTimeout = undefined;\n    }\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string,\n    newValue: string\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'theme':\n        // If theme attribute is being set, use explicit theme\n        // If theme attribute is being removed, switch to inheritance\n        if (newValue) {\n          this.theme = newValue as Theme;\n        } else if (this.isConnected) {\n          // Attribute was removed, switch to inheritance\n          applyEffectiveTheme(this);\n          this._themeCleanup = setupThemeInheritance(this);\n        }\n        break;\n    }\n  }\n\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this._theme = value;\n\n    // Clean up any existing theme inheritance\n    if (this._themeCleanup) {\n      this._themeCleanup();\n      this._themeCleanup = undefined;\n    }\n\n    this.applyTheme(value);\n  }\n\n  applyTheme(theme: Theme): void {\n    applyTheme(this, theme);\n  }\n\n  /**\n   * Show a temporary message in the status bar\n   * @param message The message to display\n   * @param type The type of message (info, success, warning, error)\n   * @param duration Duration in milliseconds (default: 3000)\n   */\n  showMessage(\n    message: string,\n    type: StatusMessageType = 'info',\n    duration: number = 3000\n  ): void {\n    const shadowRoot = this.shadowRoot!;\n    const messageEl = shadowRoot.getElementById('temporary-message')!;\n    const textEl = shadowRoot.getElementById('message-text')!;\n\n    // Clear any existing timeout\n    if (this._temporaryMessageTimeout) {\n      clearTimeout(this._temporaryMessageTimeout);\n    }\n\n    // Set message content and type\n    textEl.textContent = message;\n    messageEl.className = `temporary-message ${type}`;\n\n    // Show message with animation\n    requestAnimationFrame(() => {\n      messageEl.classList.add('show');\n    });\n\n    // Dispatch event\n    dispatchCustomEvent<StatusMessageEvent['detail']>(this, 'status-message', {\n      message,\n      type,\n      duration,\n      temporary: true,\n    });\n\n    // Auto-hide after duration\n    if (duration > 0) {\n      this._temporaryMessageTimeout = window.setTimeout(() => {\n        this.hideMessage();\n      }, duration);\n    }\n  }\n\n  /**\n   * Hide the temporary message\n   */\n  hideMessage(): void {\n    const shadowRoot = this.shadowRoot!;\n    const messageEl = shadowRoot.getElementById('temporary-message')!;\n\n    messageEl.classList.remove('show');\n\n    if (this._temporaryMessageTimeout) {\n      clearTimeout(this._temporaryMessageTimeout);\n      this._temporaryMessageTimeout = undefined;\n    }\n  }\n\n  /**\n   * Get all status items in a specific section\n   * @param section The section to query ('left', 'center', 'right')\n   */\n  getItemsInSection(section: 'left' | 'center' | 'right'): HTMLElement[] {\n    const slot = this.querySelector(`[slot=\"${section}\"]`);\n    if (!slot) return [];\n\n    return Array.from(slot.children) as HTMLElement[];\n  }\n\n  /**\n   * Clear all items from a specific section\n   * @param section The section to clear ('left', 'center', 'right')\n   */\n  clearSection(section: 'left' | 'center' | 'right'): void {\n    const items = this.getItemsInSection(section);\n    items.forEach(item => item.remove());\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-status-bar')) {\n  customElements.define('e2-status-bar', StatusBar);\n}\n","/**\n * Status Item Element\n * A flexible status bar item that can display text, progress indicators, tools, and other status information\n * Supports different types: text, progress, tool, message, indicator\n */\n\nimport {\n  EditorElementProperties,\n  StatusItemClickEvent,\n  StatusItemType,\n  StatusItemUpdateEvent,\n  Theme,\n} from '../../types';\nimport {\n  applyEffectiveTheme,\n  applyTheme,\n  dispatchCustomEvent,\n  generateId,\n  getShadowRoot,\n  setupThemeInheritance,\n} from '../../utils';\n\nexport class StatusItem extends HTMLElement implements EditorElementProperties {\n  private _theme: Theme = 'auto';\n  private _type: StatusItemType = 'text';\n  private _value: string | number = '';\n  private _label: string = '';\n  private _clickable: boolean = false;\n  private _themeCleanup?: () => void;\n\n  static get observedAttributes(): string[] {\n    return ['theme', 'type', 'value', 'label', 'clickable', 'disabled'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: inline-flex;\n          align-items: center;\n          gap: 4px;\n          padding: 2px 6px;\n          font-family: var(--font-family, system-ui, sans-serif);\n          font-size: var(--font-size-small, 12px);\n          color: var(--text-color, #333);\n          white-space: nowrap;\n          border-radius: 2px;\n          transition: background-color 0.1s ease;\n        }\n\n        :host(.theme-dark) {\n          color: var(--text-color-dark, #cccccc);\n        }\n\n        :host([clickable]) {\n          cursor: pointer;\n          padding: 2px 8px;\n        }\n\n        :host([clickable]:hover) {\n          background: var(--status-item-hover-bg, rgba(0, 0, 0, 0.05));\n        }\n\n        :host(.theme-dark[clickable]:hover) {\n          background: var(--status-item-hover-bg-dark, rgba(255, 255, 255, 0.1));\n        }\n\n        :host([clickable]:active) {\n          background: var(--status-item-active-bg, rgba(0, 0, 0, 0.1));\n        }\n\n        :host(.theme-dark[clickable]:active) {\n          background: var(--status-item-active-bg-dark, rgba(255, 255, 255, 0.15));\n        }\n\n        :host([disabled]) {\n          opacity: 0.6;\n          pointer-events: none;\n        }\n\n        .content {\n          display: flex;\n          align-items: center;\n          gap: 4px;\n        }\n\n        .icon {\n          font-size: 10px;\n          width: 12px;\n          text-align: center;\n          flex-shrink: 0;\n        }\n\n        .label {\n          flex-shrink: 0;\n        }\n\n        .value {\n          font-weight: 500;\n          flex-shrink: 0;\n        }\n\n        .progress-container {\n          display: flex;\n          align-items: center;\n          gap: 6px;\n        }\n\n        .progress-bar {\n          width: 60px;\n          height: 8px;\n          background: var(--progress-bg, #e0e0e0);\n          border-radius: 4px;\n          overflow: hidden;\n          position: relative;\n        }\n\n        :host(.theme-dark) .progress-bar {\n          background: var(--progress-bg-dark, #3e3e42);\n        }\n\n        .progress-fill {\n          height: 100%;\n          background: var(--progress-fill, #007acc);\n          border-radius: 4px;\n          transition: width 0.2s ease;\n          min-width: 2px;\n        }\n\n        :host(.theme-dark) .progress-fill {\n          background: var(--progress-fill-dark, #0e7afe);\n        }\n\n        .progress-text {\n          font-size: 10px;\n          min-width: 30px;\n          text-align: right;\n        }\n\n        /* Type-specific styles */\n        :host([type=\"tool\"]) {\n          background: var(--tool-item-bg, rgba(0, 120, 204, 0.1));\n          color: var(--tool-item-color, #007acc);\n          border: 1px solid var(--tool-item-border, rgba(0, 120, 204, 0.2));\n        }\n\n        :host(.theme-dark[type=\"tool\"]) {\n          background: var(--tool-item-bg-dark, rgba(14, 122, 254, 0.15));\n          color: var(--tool-item-color-dark, #0e7afe);\n          border-color: var(--tool-item-border-dark, rgba(14, 122, 254, 0.3));\n        }\n\n        :host([type=\"message\"]) {\n          font-style: italic;\n          opacity: 0.8;\n        }\n\n        :host([type=\"indicator\"]) .icon {\n          color: var(--indicator-color, #28a745);\n        }\n\n        :host(.theme-dark[type=\"indicator\"]) .icon {\n          color: var(--indicator-color-dark, #40d865);\n        }\n      </style>\n\n      <div class=\"content\">\n        <span class=\"icon\" id=\"icon\"></span>\n        <span class=\"label\" id=\"label\"></span>\n        <div class=\"progress-container\" id=\"progress-container\" style=\"display: none;\">\n          <div class=\"progress-bar\">\n            <div class=\"progress-fill\" id=\"progress-fill\"></div>\n          </div>\n          <span class=\"progress-text\" id=\"progress-text\"></span>\n        </div>\n        <span class=\"value\" id=\"value\"></span>\n      </div>\n    `;\n\n    // Add click handler\n    this.addEventListener('click', this.handleClick.bind(this));\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('status-item');\n    }\n\n    // Set up theme inheritance if no explicit theme is set\n    if (!this.hasAttribute('theme')) {\n      applyEffectiveTheme(this);\n      this._themeCleanup = setupThemeInheritance(this);\n    } else {\n      this.applyTheme(this._theme);\n    }\n\n    this.updateDisplay();\n  }\n\n  disconnectedCallback(): void {\n    // Clean up theme inheritance listener\n    if (this._themeCleanup) {\n      this._themeCleanup();\n      this._themeCleanup = undefined;\n    }\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string,\n    newValue: string\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'theme':\n        // If theme attribute is being set, use explicit theme\n        // If theme attribute is being removed, switch to inheritance\n        if (newValue) {\n          this.theme = newValue as Theme;\n        } else if (this.isConnected) {\n          // Attribute was removed, switch to inheritance\n          applyEffectiveTheme(this);\n          this._themeCleanup = setupThemeInheritance(this);\n        }\n        break;\n      case 'type':\n        this._type = newValue as StatusItemType;\n        this.updateDisplay();\n        break;\n      case 'value':\n        this._value = newValue;\n        this.updateDisplay();\n        break;\n      case 'label':\n        this._label = newValue;\n        this.updateDisplay();\n        break;\n      case 'clickable':\n        this._clickable = newValue !== null;\n        break;\n    }\n  }\n\n  private handleClick(event: Event): void {\n    if (!this._clickable || this.hasAttribute('disabled')) return;\n\n    dispatchCustomEvent<StatusItemClickEvent['detail']>(\n      this,\n      'status-item-click',\n      {\n        itemId: this.id,\n        item: this,\n        itemType: this._type,\n        value: this._value,\n      }\n    );\n  }\n\n  private updateDisplay(): void {\n    if (!this.shadowRoot) return;\n\n    const iconEl = this.shadowRoot.getElementById('icon')!;\n    const labelEl = this.shadowRoot.getElementById('label')!;\n    const valueEl = this.shadowRoot.getElementById('value')!;\n    const progressContainer =\n      this.shadowRoot.getElementById('progress-container')!;\n    const progressFill = this.shadowRoot.getElementById('progress-fill')!;\n    const progressText = this.shadowRoot.getElementById('progress-text')!;\n\n    // Set label\n    labelEl.textContent = this._label;\n    labelEl.style.display = this._label ? 'inline' : 'none';\n\n    // Handle different types\n    switch (this._type) {\n      case 'progress':\n        this.updateProgressDisplay(\n          progressContainer,\n          progressFill,\n          progressText\n        );\n        valueEl.style.display = 'none';\n        iconEl.style.display = 'none';\n        break;\n\n      case 'tool':\n        iconEl.textContent = '🔧';\n        iconEl.style.display = 'inline';\n        valueEl.textContent = String(this._value);\n        valueEl.style.display = this._value ? 'inline' : 'none';\n        progressContainer.style.display = 'none';\n        break;\n\n      case 'indicator':\n        iconEl.textContent = '●';\n        iconEl.style.display = 'inline';\n        valueEl.textContent = String(this._value);\n        valueEl.style.display = this._value ? 'inline' : 'none';\n        progressContainer.style.display = 'none';\n        break;\n\n      case 'message':\n        iconEl.textContent = 'ℹ';\n        iconEl.style.display = 'inline';\n        valueEl.textContent = String(this._value);\n        valueEl.style.display = this._value ? 'inline' : 'none';\n        progressContainer.style.display = 'none';\n        break;\n\n      case 'text':\n      default:\n        iconEl.style.display = 'none';\n        valueEl.textContent = String(this._value);\n        valueEl.style.display = this._value ? 'inline' : 'none';\n        progressContainer.style.display = 'none';\n        break;\n    }\n  }\n\n  private updateProgressDisplay(\n    container: HTMLElement,\n    fill: HTMLElement,\n    text: HTMLElement\n  ): void {\n    container.style.display = 'flex';\n\n    const numValue =\n      typeof this._value === 'number'\n        ? this._value\n        : parseFloat(String(this._value)) || 0;\n    const percentage = Math.max(0, Math.min(100, numValue * 100));\n\n    fill.style.width = `${percentage}%`;\n    text.textContent = `${Math.round(percentage)}%`;\n  }\n\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this._theme = value;\n\n    // Clean up any existing theme inheritance\n    if (this._themeCleanup) {\n      this._themeCleanup();\n      this._themeCleanup = undefined;\n    }\n\n    this.applyTheme(value);\n  }\n\n  get type(): StatusItemType {\n    return this._type;\n  }\n\n  set type(value: StatusItemType) {\n    this._type = value;\n    this.setAttribute('type', value);\n  }\n\n  get value(): string | number {\n    return this._value;\n  }\n\n  set value(newValue: string | number) {\n    const oldValue = this._value;\n    this._value = newValue;\n    this.setAttribute('value', String(newValue));\n\n    // Dispatch update event\n    dispatchCustomEvent<StatusItemUpdateEvent['detail']>(\n      this,\n      'status-item-update',\n      {\n        itemId: this.id,\n        item: this,\n        oldValue,\n        newValue,\n      }\n    );\n  }\n\n  get label(): string {\n    return this._label;\n  }\n\n  set label(value: string) {\n    this._label = value;\n    this.setAttribute('label', value);\n  }\n\n  get clickable(): boolean {\n    return this._clickable;\n  }\n\n  set clickable(value: boolean) {\n    this._clickable = value;\n    if (value) {\n      this.setAttribute('clickable', '');\n    } else {\n      this.removeAttribute('clickable');\n    }\n  }\n\n  applyTheme(theme: Theme): void {\n    applyTheme(this, theme);\n  }\n\n  /**\n   * Update the progress value (for progress type items)\n   * @param progress Progress value between 0 and 1\n   */\n  setProgress(progress: number): void {\n    if (this._type === 'progress') {\n      this.value = Math.max(0, Math.min(1, progress));\n    }\n  }\n\n  /**\n   * Set an icon for the status item\n   * @param icon Unicode emoji or symbol\n   */\n  setIcon(icon: string): void {\n    if (this.shadowRoot) {\n      const iconEl = this.shadowRoot.getElementById('icon')!;\n      iconEl.textContent = icon;\n      iconEl.style.display = 'inline';\n    }\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-status-item')) {\n  customElements.define('e2-status-item', StatusItem);\n}\n","/**\n * Status Section Element\n * A container for grouping status items within a status bar\n * Provides left, center, or right positioning and overflow handling\n */\n\nimport {\n  EditorElementProperties,\n  StatusSectionPosition,\n  Theme,\n} from '../../types';\nimport {\n  applyEffectiveTheme,\n  applyTheme,\n  generateId,\n  getShadowRoot,\n  setupThemeInheritance,\n} from '../../utils';\n\nexport class StatusSection\n  extends HTMLElement\n  implements EditorElementProperties\n{\n  private _theme: Theme = 'auto';\n  private _position: StatusSectionPosition = 'left';\n  private _themeCleanup?: () => void;\n\n  static get observedAttributes(): string[] {\n    return ['theme', 'position', 'disabled'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: flex;\n          align-items: center;\n          gap: 8px;\n          font-family: var(--font-family, system-ui, sans-serif);\n          font-size: var(--font-size-small, 12px);\n          flex-shrink: 0;\n        }\n\n        :host([position=\"left\"]) {\n          justify-content: flex-start;\n        }\n\n        :host([position=\"center\"]) {\n          justify-content: center;\n          flex: 1 1 auto;\n        }\n\n        :host([position=\"right\"]) {\n          justify-content: flex-end;\n        }\n\n        :host([disabled]) {\n          opacity: 0.6;\n          pointer-events: none;\n        }\n\n        .section-container {\n          display: flex;\n          align-items: center;\n          gap: inherit;\n          min-width: 0; /* Allow shrinking */\n          overflow: hidden;\n        }\n\n        :host([position=\"center\"]) .section-container {\n          width: 100%;\n          justify-content: center;\n        }\n\n        ::slotted(*) {\n          flex-shrink: 0;\n          white-space: nowrap;\n        }\n\n        /* Responsive behavior - hide items on smaller screens */\n        @media (max-width: 768px) {\n          ::slotted([data-priority=\"low\"]) {\n            display: none;\n          }\n        }\n\n        @media (max-width: 480px) {\n          ::slotted([data-priority=\"medium\"]) {\n            display: none;\n          }\n        }\n      </style>\n\n      <div class=\"section-container\">\n        <slot></slot>\n      </div>\n    `;\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('status-section');\n    }\n\n    // Set position attribute if not already set\n    if (!this.hasAttribute('position')) {\n      this.position = this._position;\n    }\n\n    // Set up theme inheritance if no explicit theme is set\n    if (!this.hasAttribute('theme')) {\n      applyEffectiveTheme(this);\n      this._themeCleanup = setupThemeInheritance(this);\n    } else {\n      this.applyTheme(this._theme);\n    }\n  }\n\n  disconnectedCallback(): void {\n    // Clean up theme inheritance listener\n    if (this._themeCleanup) {\n      this._themeCleanup();\n      this._themeCleanup = undefined;\n    }\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string,\n    newValue: string\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'theme':\n        // If theme attribute is being set, use explicit theme\n        // If theme attribute is being removed, switch to inheritance\n        if (newValue) {\n          this.theme = newValue as Theme;\n        } else if (this.isConnected) {\n          // Attribute was removed, switch to inheritance\n          applyEffectiveTheme(this);\n          this._themeCleanup = setupThemeInheritance(this);\n        }\n        break;\n      case 'position':\n        this._position = newValue as StatusSectionPosition;\n        break;\n    }\n  }\n\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this._theme = value;\n\n    // Clean up any existing theme inheritance\n    if (this._themeCleanup) {\n      this._themeCleanup();\n      this._themeCleanup = undefined;\n    }\n\n    this.applyTheme(value);\n  }\n\n  get position(): StatusSectionPosition {\n    return this._position;\n  }\n\n  set position(value: StatusSectionPosition) {\n    this._position = value;\n    this.setAttribute('position', value);\n  }\n\n  applyTheme(theme: Theme): void {\n    applyTheme(this, theme);\n  }\n\n  /**\n   * Add a status item to this section\n   * @param item The status item element to add\n   * @param priority Optional priority for responsive behavior ('high', 'medium', 'low')\n   */\n  addItem(item: HTMLElement, priority?: 'high' | 'medium' | 'low'): void {\n    if (priority) {\n      item.setAttribute('data-priority', priority);\n    }\n    this.appendChild(item);\n  }\n\n  /**\n   * Remove a status item from this section\n   * @param item The status item element to remove\n   */\n  removeItem(item: HTMLElement): void {\n    if (this.contains(item)) {\n      item.remove();\n    }\n  }\n\n  /**\n   * Clear all items from this section\n   */\n  clear(): void {\n    while (this.firstChild) {\n      this.removeChild(this.firstChild);\n    }\n  }\n\n  /**\n   * Get all items in this section\n   */\n  getItems(): HTMLElement[] {\n    return Array.from(this.children) as HTMLElement[];\n  }\n\n  /**\n   * Get items by priority level\n   * @param priority The priority level to filter by\n   */\n  getItemsByPriority(priority: 'high' | 'medium' | 'low'): HTMLElement[] {\n    return this.getItems().filter(\n      item => item.getAttribute('data-priority') === priority\n    );\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-status-section')) {\n  customElements.define('e2-status-section', StatusSection);\n}\n","/**\n * Tab Element\n * Individual tab that can be clicked to show associated content\n */\n\nimport { EditorElementProperties, Theme } from '../../types';\nimport {\n  applyEffectiveTheme,\n  applyTheme,\n  dispatchCustomEvent,\n  generateId,\n  getShadowRoot,\n  notifyThemeChange,\n  setupThemeInheritance,\n} from '../../utils';\n\nexport class Tab extends HTMLElement implements EditorElementProperties {\n  private _theme: Theme = 'auto';\n  private _active: boolean = false;\n  private _closable: boolean = false;\n  private _icon: string = '';\n  private _label: string = '';\n  private _themeCleanup?: () => void;\n\n  static get observedAttributes(): string[] {\n    return [\n      'theme',\n      'disabled',\n      'active',\n      'closable',\n      'icon',\n      'label',\n      'panel',\n    ];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n    this.setupEventListeners();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: flex;\n          align-items: center;\n          padding: 8px 12px;\n          background: var(--tab-bg, #f8f8f8);\n          border: 1px solid var(--tab-border, #ddd);\n          border-bottom: none;\n          cursor: pointer;\n          user-select: none;\n          font-family: var(--font-family, system-ui, sans-serif);\n          font-size: var(--font-size, 14px);\n          color: var(--tab-color, #333);\n          min-width: 0;\n          position: relative;\n          transition: background-color 0.2s ease, color 0.2s ease;\n        }\n\n        :host(:hover) {\n          background: var(--tab-bg-hover, #e8e8e8);\n        }\n\n        :host([active]) {\n          background: var(--tab-bg-active, #ffffff);\n          color: var(--tab-color-active, #000);\n          border-bottom: 1px solid var(--tab-bg-active, #ffffff);\n          z-index: 1;\n        }\n\n        :host(.theme-dark) {\n          background: var(--tab-bg-dark, #2d2d2d);\n          border-color: var(--tab-border-dark, #555);\n          color: var(--tab-color-dark, #ccc);\n        }\n\n        :host(.theme-dark:hover) {\n          background: var(--tab-bg-hover-dark, #3d3d3d);\n        }\n\n        :host(.theme-dark[active]) {\n          background: var(--tab-bg-active-dark, #1e1e1e);\n          color: var(--tab-color-active-dark, #fff);\n          border-bottom-color: var(--tab-bg-active-dark, #1e1e1e);\n        }\n\n        :host([disabled]) {\n          opacity: 0.6;\n          cursor: not-allowed;\n          pointer-events: none;\n        }\n\n        /* Tab position adjustments for container orientation */\n        :host-context(e2-tab-container[tab-position=\"bottom\"]) {\n          border-top: none;\n          border-bottom: 1px solid var(--tab-border, #ddd);\n        }\n\n        :host-context(e2-tab-container[tab-position=\"bottom\"][active]) {\n          border-top: 1px solid var(--tab-bg-active, #ffffff);\n          border-bottom-color: var(--tab-bg-active, #ffffff);\n        }\n\n        :host-context(e2-tab-container.theme-dark[tab-position=\"bottom\"]) {\n          border-bottom-color: var(--tab-border-dark, #555);\n        }\n\n        :host-context(e2-tab-container.theme-dark[tab-position=\"bottom\"][active]) {\n          border-top-color: var(--tab-bg-active-dark, #1e1e1e);\n          border-bottom-color: var(--tab-bg-active-dark, #1e1e1e);\n        }\n\n        :host-context(e2-tab-container[tab-position=\"left\"]),\n        :host-context(e2-tab-container[tab-position=\"right\"]) {\n          border-bottom: 1px solid var(--tab-border, #ddd);\n          border-right: none;\n          width: 100%;\n        }\n\n        :host-context(e2-tab-container[tab-position=\"left\"][active]) {\n          border-right: 1px solid var(--tab-bg-active, #ffffff);\n        }\n\n        :host-context(e2-tab-container[tab-position=\"right\"]) {\n          border-left: none;\n          border-right: 1px solid var(--tab-border, #ddd);\n        }\n\n        :host-context(e2-tab-container[tab-position=\"right\"][active]) {\n          border-left: 1px solid var(--tab-bg-active, #ffffff);\n          border-right-color: var(--tab-bg-active, #ffffff);\n        }\n\n        .tab-content {\n          display: flex;\n          align-items: center;\n          gap: 6px;\n          min-width: 0;\n          flex: 1;\n        }\n\n        .tab-icon {\n          flex-shrink: 0;\n          font-size: 16px;\n          width: 16px;\n          height: 16px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n        }\n\n        .tab-label {\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n          flex: 1;\n          min-width: 0;\n        }\n\n        .close-button {\n          flex-shrink: 0;\n          width: 16px;\n          height: 16px;\n          border: none;\n          background: transparent;\n          cursor: pointer;\n          border-radius: 2px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          margin-left: 4px;\n          font-size: 12px;\n          color: var(--tab-close-color, #666);\n          opacity: 0.7;\n          transition: opacity 0.2s ease, background-color 0.2s ease;\n        }\n\n        .close-button:hover {\n          opacity: 1;\n          background: var(--tab-close-bg-hover, rgba(0, 0, 0, 0.1));\n        }\n\n        :host(.theme-dark) .close-button {\n          color: var(--tab-close-color-dark, #aaa);\n        }\n\n        :host(.theme-dark) .close-button:hover {\n          background: var(--tab-close-bg-hover-dark, rgba(255, 255, 255, 0.1));\n        }\n\n        :host(:not([closable])) .close-button {\n          display: none;\n        }\n      </style>\n\n      <div class=\"tab-content\">\n        <span class=\"tab-icon\"></span>\n        <span class=\"tab-label\"></span>\n        <button class=\"close-button\" type=\"button\">&times;</button>\n      </div>\n    `;\n  }\n\n  private setupEventListeners(): void {\n    this.addEventListener('click', this.handleClick.bind(this));\n\n    const closeButton = this.shadowRoot?.querySelector(\n      '.close-button'\n    ) as HTMLButtonElement;\n    closeButton?.addEventListener('click', this.handleCloseClick.bind(this));\n  }\n\n  private handleClick(event: MouseEvent): void {\n    if (this.disabled) return;\n\n    // Don't trigger tab click if close button was clicked\n    if ((event.target as HTMLElement).classList.contains('close-button')) {\n      return;\n    }\n\n    event.stopPropagation();\n\n    dispatchCustomEvent(this, 'tab-click', {\n      tabId: this.id,\n      tab: this,\n      panelId: this.getAttribute('panel') || `${this.id}-panel`,\n    });\n  }\n\n  private handleCloseClick(event: MouseEvent): void {\n    if (this.disabled) return;\n\n    event.stopPropagation();\n\n    dispatchCustomEvent(this, 'tab-close', {\n      tabId: this.id,\n      tab: this,\n      panelId: this.getAttribute('panel') || `${this.id}-panel`,\n    });\n\n    // The parent container will handle the removal\n  }\n\n  private updateContent(): void {\n    const shadowRoot = this.shadowRoot!;\n    const iconElement = shadowRoot.querySelector('.tab-icon') as HTMLElement;\n    const labelElement = shadowRoot.querySelector('.tab-label') as HTMLElement;\n\n    // Update icon\n    if (this._icon) {\n      iconElement.textContent = this._icon;\n      iconElement.style.display = 'flex';\n    } else {\n      iconElement.style.display = 'none';\n    }\n\n    // Update label\n    labelElement.textContent = this._label || this.textContent || '';\n  }\n\n  // Public API\n  public click(): void {\n    if (!this.disabled) {\n      this.handleClick(new MouseEvent('click'));\n    }\n  }\n\n  public close(): void {\n    if (!this.disabled && this._closable) {\n      this.handleCloseClick(new MouseEvent('click'));\n    }\n  }\n\n  // Properties\n  public get theme(): Theme {\n    return this._theme;\n  }\n\n  public set theme(value: Theme) {\n    this._theme = value;\n    this.setAttribute('theme', value);\n    this.applyTheme(value);\n    // Notify child elements of theme change\n    notifyThemeChange(this, value);\n  }\n\n  public get active(): boolean {\n    return this._active;\n  }\n\n  public set active(value: boolean) {\n    this._active = value;\n    if (value) {\n      this.setAttribute('active', '');\n    } else {\n      this.removeAttribute('active');\n    }\n  }\n\n  public get closable(): boolean {\n    return this._closable;\n  }\n\n  public set closable(value: boolean) {\n    this._closable = value;\n    if (value) {\n      this.setAttribute('closable', '');\n    } else {\n      this.removeAttribute('closable');\n    }\n  }\n\n  public get icon(): string {\n    return this._icon;\n  }\n\n  public set icon(value: string) {\n    this._icon = value;\n    this.setAttribute('icon', value);\n    this.updateContent();\n  }\n\n  public get label(): string {\n    return this._label;\n  }\n\n  public set label(value: string) {\n    this._label = value;\n    this.setAttribute('label', value);\n    this.updateContent();\n  }\n\n  public get panel(): string | null {\n    return this.getAttribute('panel');\n  }\n\n  public set panel(value: string | null) {\n    if (value) {\n      this.setAttribute('panel', value);\n    } else {\n      this.removeAttribute('panel');\n    }\n  }\n\n  public get disabled(): boolean {\n    return this.hasAttribute('disabled');\n  }\n\n  public set disabled(value: boolean) {\n    if (value) {\n      this.setAttribute('disabled', '');\n    } else {\n      this.removeAttribute('disabled');\n    }\n  }\n\n  public applyTheme(theme: Theme): void {\n    applyTheme(this, theme);\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string | null,\n    newValue: string | null\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'theme':\n        // Clean up existing theme inheritance when explicit theme is set\n        if (this._themeCleanup) {\n          this._themeCleanup();\n          this._themeCleanup = undefined;\n        }\n        this._theme = (newValue as Theme) || 'auto';\n        this.applyTheme(this._theme);\n        break;\n      case 'active':\n        this._active = newValue !== null;\n        break;\n      case 'closable':\n        this._closable = newValue !== null;\n        break;\n      case 'icon':\n        this._icon = newValue || '';\n        this.updateContent();\n        break;\n      case 'label':\n        this._label = newValue || '';\n        this.updateContent();\n        break;\n    }\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('tab');\n    }\n\n    // Set up theme inheritance if no explicit theme is set\n    if (!this.hasAttribute('theme')) {\n      applyEffectiveTheme(this);\n      this._themeCleanup = setupThemeInheritance(this);\n    } else {\n      this.applyTheme(this._theme);\n    }\n\n    this.updateContent();\n\n    // Handle pending setup from dynamic creation\n    if ((this as any)._pendingSetup) {\n      const setup = (this as any)._pendingSetup;\n\n      // Set attributes safely now that element is connected\n      if (setup.slot) {\n        this.setAttribute('slot', setup.slot);\n      }\n      if (setup.panel) {\n        this.setAttribute('panel', setup.panel);\n      }\n      if (setup.label) {\n        this.label = setup.label;\n      }\n      if (setup.closable) {\n        this.closable = setup.closable;\n      }\n      if (setup.theme) {\n        this.applyTheme(setup.theme);\n      }\n\n      // Clean up\n      delete (this as any)._pendingSetup;\n    }\n\n    // Update content when connected\n    this.updateContent();\n  }\n\n  disconnectedCallback(): void {\n    // Clean up theme inheritance listener\n    if (this._themeCleanup) {\n      this._themeCleanup();\n      this._themeCleanup = undefined;\n    }\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-tab')) {\n  customElements.define('e2-tab', Tab);\n}\n","/**\n * Tab Container Element\n * A container that manages tabs and their associated panels\n */\n\nimport {\n  EditorElementProperties,\n  TabCloseEvent,\n  TabContainerChangeEvent,\n  TabSelectEvent,\n  Theme,\n} from '../../types';\nimport {\n  applyEffectiveTheme,\n  applyTheme,\n  dispatchCustomEvent,\n  generateId,\n  getShadowRoot,\n  setupThemeInheritance,\n} from '../../utils';\n\nexport class TabContainer\n  extends HTMLElement\n  implements EditorElementProperties\n{\n  private _theme: Theme = 'auto';\n  private _activeTabId: string | null = null;\n  private _tabPosition: 'top' | 'bottom' | 'left' | 'right' = 'top';\n  private _closable: boolean = false;\n  private _themeCleanup?: () => void;\n\n  static get observedAttributes(): string[] {\n    return ['theme', 'disabled', 'active-tab', 'tab-position', 'closable'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n    this.setupEventListeners();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: flex;\n          flex-direction: column;\n          background: var(--tab-container-bg, #ffffff);\n          border: 1px solid var(--tab-container-border, #ccc);\n          border-radius: var(--tab-container-border-radius, 4px);\n          overflow: hidden;\n          font-family: var(--font-family, system-ui, sans-serif);\n          font-size: var(--font-size, 14px);\n        }\n\n        :host(.theme-dark) {\n          background: var(--tab-container-bg-dark, #1e1e1e);\n          border-color: var(--tab-container-border-dark, #555);\n          color: var(--text-color-dark, #fff);\n        }\n\n        :host([disabled]) {\n          opacity: 0.6;\n          pointer-events: none;\n        }\n\n        /* Tab position variations */\n        :host([tab-position=\"top\"]) {\n          flex-direction: column;\n        }\n\n        :host([tab-position=\"bottom\"]) {\n          flex-direction: column-reverse;\n        }\n\n        :host([tab-position=\"left\"]) {\n          flex-direction: row;\n        }\n\n        :host([tab-position=\"right\"]) {\n          flex-direction: row-reverse;\n        }\n\n        .tab-list {\n          display: flex;\n          background: var(--tab-list-bg, #f8f8f8);\n          border-bottom: 1px solid var(--tab-list-border, #ddd);\n          overflow-x: auto;\n          flex-shrink: 0;\n        }\n\n        :host(.theme-dark) .tab-list {\n          background: var(--tab-list-bg-dark, #2d2d2d);\n          border-bottom-color: var(--tab-list-border-dark, #555);\n        }\n\n        :host([tab-position=\"bottom\"]) .tab-list {\n          border-bottom: none;\n          border-top: 1px solid var(--tab-list-border, #ddd);\n        }\n\n        :host(.theme-dark[tab-position=\"bottom\"]) .tab-list {\n          border-top-color: var(--tab-list-border-dark, #555);\n        }\n\n        :host([tab-position=\"left\"]) .tab-list,\n        :host([tab-position=\"right\"]) .tab-list {\n          flex-direction: column;\n          border-bottom: none;\n          border-right: 1px solid var(--tab-list-border, #ddd);\n          overflow-x: visible;\n          overflow-y: auto;\n        }\n\n        :host([tab-position=\"right\"]) .tab-list {\n          border-right: none;\n          border-left: 1px solid var(--tab-list-border, #ddd);\n        }\n\n        :host(.theme-dark[tab-position=\"left\"]) .tab-list {\n          border-right-color: var(--tab-list-border-dark, #555);\n        }\n\n        :host(.theme-dark[tab-position=\"right\"]) .tab-list {\n          border-left-color: var(--tab-list-border-dark, #555);\n        }\n\n        .panel-container {\n          flex: 1;\n          overflow: hidden;\n          position: relative;\n        }\n\n        ::slotted(e2-tab) {\n          flex-shrink: 0;\n        }\n\n        ::slotted(e2-tab-panel) {\n          position: absolute;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          overflow: auto;\n        }\n\n        ::slotted(e2-tab-panel[active]) {\n          display: flex !important;\n        }\n      </style>\n\n      <div class=\"tab-list\">\n        <slot name=\"tabs\"></slot>\n      </div>\n      <div class=\"panel-container\">\n        <slot name=\"panels\"></slot>\n      </div>\n    `;\n  }\n\n  private setupEventListeners(): void {\n    // Listen for tab clicks\n    this.addEventListener(\n      'tab-click',\n      this.handleTabClick.bind(this) as EventListener\n    );\n    this.addEventListener(\n      'tab-close',\n      this.handleTabClose.bind(this) as EventListener\n    );\n\n    // Listen for slotchange to manage initial state\n    const shadowRoot = this.shadowRoot!;\n    const tabSlot = shadowRoot.querySelector(\n      'slot[name=\"tabs\"]'\n    ) as HTMLSlotElement;\n    const panelSlot = shadowRoot.querySelector(\n      'slot[name=\"panels\"]'\n    ) as HTMLSlotElement;\n\n    tabSlot?.addEventListener('slotchange', () => {\n      this.updateTabsAndPanels();\n    });\n\n    panelSlot?.addEventListener('slotchange', () => {\n      this.updateTabsAndPanels();\n    });\n  }\n\n  private handleTabClick(event: Event): void {\n    event.stopPropagation();\n    const tabElement = event.target as HTMLElement;\n    const tabId = tabElement.id;\n    const panelId = tabElement.getAttribute('panel') || `${tabId}-panel`;\n\n    this.selectTab(tabId, panelId);\n  }\n\n  private handleTabClose(event: Event): void {\n    event.stopPropagation();\n\n    // Find the actual tab element (event might come from close button inside tab)\n    let tabElement = event.target as HTMLElement;\n\n    // If the event came from inside a tab, find the parent tab element\n    if (!tabElement.matches('e2-tab')) {\n      tabElement = tabElement.closest('e2-tab') as HTMLElement;\n    }\n\n    if (!tabElement) {\n      return;\n    }\n\n    const tabId = tabElement.id;\n    const panelId = tabElement.getAttribute('panel') || `${tabId}-panel`;\n\n    // Check if this tab is already being removed to prevent recursion\n    if (tabElement.hasAttribute('data-removing')) {\n      return;\n    }\n\n    // Mark as being removed to prevent recursive calls\n    tabElement.setAttribute('data-removing', 'true');\n\n    // Dispatch close event to external listeners (without bubbling to avoid recursion)\n    const closeEvent = dispatchCustomEvent<TabCloseEvent['detail']>(\n      this,\n      'tab-close',\n      {\n        tabId,\n        tab: tabElement,\n        panelId,\n        panel: this.querySelector(\n          `e2-tab-panel[id=\"${panelId}\"]`\n        ) as HTMLElement,\n        containerId: this.id,\n        container: this,\n      },\n      { bubbles: false } // Prevent bubbling to avoid recursion\n    );\n\n    // Defer the removal to break any potential event loops\n    if (closeEvent) {\n      setTimeout(() => {\n        this.removeTab(tabId);\n      }, 0);\n    }\n  }\n\n  private selectTab(tabId: string, panelId: string): void {\n    const tabElement = this.querySelector(\n      `e2-tab[id=\"${tabId}\"]`\n    ) as HTMLElement;\n    const panelElement = this.querySelector(\n      `e2-tab-panel[id=\"${panelId}\"]`\n    ) as HTMLElement;\n\n    if (!tabElement || !panelElement) {\n      return;\n    }\n\n    const previousTabId = this._activeTabId;\n\n    // Deactivate all tabs and panels\n    this.querySelectorAll('e2-tab').forEach(tab => {\n      if ((tab as any).active !== undefined) {\n        (tab as any).active = false;\n      } else {\n        tab.removeAttribute('active');\n      }\n    });\n    this.querySelectorAll('e2-tab-panel').forEach(panel => {\n      if ((panel as any).active !== undefined) {\n        (panel as any).active = false;\n      } else {\n        panel.removeAttribute('active');\n        (panel as HTMLElement).style.display = 'none';\n      }\n    });\n\n    // Activate the selected tab and panel\n    if ((tabElement as any).active !== undefined) {\n      (tabElement as any).active = true;\n    } else {\n      tabElement.setAttribute('active', '');\n    }\n\n    if ((panelElement as any).active !== undefined) {\n      (panelElement as any).active = true;\n    } else {\n      panelElement.setAttribute('active', '');\n      panelElement.style.display = 'flex';\n    }\n\n    this._activeTabId = tabId;\n    this.setAttribute('active-tab', tabId);\n\n    // Dispatch select event\n    dispatchCustomEvent<TabSelectEvent['detail']>(this, 'tab-select', {\n      tabId,\n      tab: tabElement,\n      panelId,\n      panel: panelElement,\n      containerId: this.id,\n      container: this,\n      previousTabId: previousTabId || undefined,\n    });\n\n    // Dispatch container change event\n    dispatchCustomEvent<TabContainerChangeEvent['detail']>(\n      this,\n      'tab-container-change',\n      {\n        containerId: this.id,\n        container: this,\n        activeTabId: tabId,\n        activePanelId: panelId,\n      }\n    );\n  }\n\n  private removeTab(tabId: string): void {\n    const tabElement = this.querySelector(\n      `e2-tab[id=\"${tabId}\"]`\n    ) as HTMLElement;\n    const panelId = tabElement?.getAttribute('panel') || `${tabId}-panel`;\n    const panelElement = this.querySelector(\n      `e2-tab-panel[id=\"${panelId}\"]`\n    ) as HTMLElement;\n\n    // Remove elements\n    tabElement?.remove();\n    panelElement?.remove();\n\n    // If this was the active tab, select another\n    if (this._activeTabId === tabId) {\n      const remainingTabs = this.querySelectorAll('e2-tab');\n      if (remainingTabs.length > 0) {\n        const nextTab = remainingTabs[0] as HTMLElement;\n        const nextPanelId =\n          nextTab.getAttribute('panel') || `${nextTab.id}-panel`;\n        this.selectTab(nextTab.id, nextPanelId);\n      } else {\n        this._activeTabId = null;\n        this.removeAttribute('active-tab');\n      }\n    }\n  }\n\n  private updateTabsAndPanels(): void {\n    // Auto-assign panels to tabs and vice versa\n    const tabs = this.querySelectorAll('e2-tab');\n    const panels = this.querySelectorAll('e2-tab-panel');\n\n    tabs.forEach((tab, index) => {\n      const tabElement = tab as HTMLElement;\n\n      // Only set ID if it's not already set and the element doesn't have attributes being processed\n      if (!tabElement.id && !tabElement.hasAttribute('id')) {\n        try {\n          tabElement.id = generateId('tab');\n        } catch (e) {\n          // If setting ID fails, skip this tab for now\n          console.warn('Failed to set tab ID, skipping:', e);\n          return;\n        }\n      }\n\n      // Set closable attribute if container is closable, but avoid if element is being processed\n      if (this._closable && !tabElement.hasAttribute('closable')) {\n        try {\n          tabElement.setAttribute('closable', '');\n        } catch (e) {\n          // If setting attribute fails, the element might still be initializing\n          console.warn('Failed to set closable attribute, skipping:', e);\n        }\n      }\n\n      // Apply current theme\n      if ((tabElement as any).applyTheme) {\n        try {\n          (tabElement as any).applyTheme(this._theme);\n        } catch (e) {\n          console.warn('Failed to apply theme to tab:', e);\n        }\n      }\n\n      // Link to panel\n      if (!tabElement.getAttribute('panel')) {\n        const correspondingPanel = panels[index] as HTMLElement;\n        if (correspondingPanel) {\n          if (\n            !correspondingPanel.id &&\n            !correspondingPanel.hasAttribute('id')\n          ) {\n            try {\n              correspondingPanel.id = `${tabElement.id}-panel`;\n            } catch (e) {\n              console.warn('Failed to set panel ID:', e);\n              return;\n            }\n          }\n          try {\n            tabElement.setAttribute('panel', correspondingPanel.id);\n          } catch (e) {\n            console.warn('Failed to link tab to panel:', e);\n          }\n        }\n      }\n    });\n\n    // Determine which tab should be active initially\n    let activeTabElement: HTMLElement | null = null;\n    let activePanelId: string | null = null;\n\n    // Priority 1: Check if container has active-tab attribute\n    if (this.hasAttribute('active-tab')) {\n      const activeTabId = this.getAttribute('active-tab');\n      activeTabElement = this.querySelector(\n        `e2-tab[id=\"${activeTabId}\"]`\n      ) as HTMLElement;\n    }\n\n    // Priority 2: Check if any tab has active attribute\n    if (!activeTabElement) {\n      activeTabElement = this.querySelector('e2-tab[active]') as HTMLElement;\n    }\n\n    // Priority 3: Use first tab as fallback\n    if (!activeTabElement && tabs.length > 0) {\n      activeTabElement = tabs[0] as HTMLElement;\n    }\n\n    // Set the active panel ID based on the determined active tab\n    if (activeTabElement) {\n      activePanelId =\n        activeTabElement.getAttribute('panel') ||\n        `${activeTabElement.id}-panel`;\n    }\n\n    panels.forEach(panel => {\n      const panelElement = panel as HTMLElement;\n\n      // Only set ID if it's not already set and the element is ready\n      if (!panelElement.id && !panelElement.hasAttribute('id')) {\n        try {\n          panelElement.id = generateId('tab-panel');\n        } catch (e) {\n          console.warn('Failed to set panel ID:', e);\n          return;\n        }\n      }\n\n      // Apply current theme\n      if ((panelElement as any).applyTheme) {\n        try {\n          (panelElement as any).applyTheme(this._theme);\n        } catch (e) {\n          console.warn('Failed to apply theme to panel:', e);\n        }\n      }\n\n      // Hide all panels except the one that should be active\n      if (panelElement.id === activePanelId) {\n        // This will be the initially active panel - ensure it's visible\n        if ((panelElement as any).active !== undefined) {\n          try {\n            (panelElement as any).active = true;\n          } catch (e) {\n            console.warn('Failed to set panel active property:', e);\n          }\n        } else {\n          try {\n            panelElement.setAttribute('active', '');\n            panelElement.style.display = 'flex';\n          } catch (e) {\n            console.warn('Failed to set panel active state:', e);\n          }\n        }\n      } else {\n        if ((panelElement as any).active !== undefined) {\n          try {\n            (panelElement as any).active = false;\n          } catch (e) {\n            console.warn('Failed to set panel inactive property:', e);\n          }\n        } else {\n          try {\n            panelElement.style.display = 'none';\n          } catch (e) {\n            console.warn('Failed to hide panel:', e);\n          }\n        }\n      }\n    });\n\n    // Select the determined active tab if none is currently selected\n    if (!this._activeTabId && activeTabElement) {\n      const panelId =\n        activeTabElement.getAttribute('panel') ||\n        `${activeTabElement.id}-panel`;\n      setTimeout(() => {\n        if (activeTabElement) {\n          this.selectTab(activeTabElement.id, panelId);\n        }\n      }, 100);\n    }\n  }\n\n  // Public API\n  public selectTabById(tabId: string): void {\n    const tabElement = this.querySelector(\n      `e2-tab[id=\"${tabId}\"]`\n    ) as HTMLElement;\n    if (tabElement) {\n      const panelId = tabElement.getAttribute('panel') || `${tabId}-panel`;\n      this.selectTab(tabId, panelId);\n    }\n  }\n\n  public addTab(\n    label: string,\n    content: string = '',\n    tabId?: string,\n    panelId?: string\n  ): { tabId: string; panelId: string } {\n    const finalTabId = tabId || generateId('tab');\n    const finalPanelId = panelId || `${finalTabId}-panel`;\n\n    // Create tab element using customElements workaround\n    const TabConstructor = window.customElements.get('e2-tab') as any;\n    const tab = new TabConstructor();\n    tab.id = finalTabId;\n\n    // Create panel element using customElements workaround\n    const TabPanelConstructor = window.customElements.get(\n      'e2-tab-panel'\n    ) as any;\n    const panel = new TabPanelConstructor();\n    panel.id = finalPanelId;\n\n    // Set up initial data that will be applied in connectedCallback\n    (tab as any)._pendingSetup = {\n      slot: 'tabs',\n      panel: finalPanelId,\n      label: label,\n      closable: this._closable,\n      theme: this._theme,\n    };\n\n    (panel as any)._pendingSetup = {\n      slot: 'panels',\n      content: content,\n      theme: this._theme,\n    };\n\n    // Add to DOM - this will trigger connectedCallback\n    this.appendChild(tab);\n    this.appendChild(panel);\n\n    return { tabId: finalTabId, panelId: finalPanelId };\n  }\n\n  public removeTabById(tabId: string): void {\n    this.removeTab(tabId);\n  }\n\n  public get activeTabId(): string | null {\n    return this._activeTabId;\n  }\n\n  public get tabs(): NodeListOf<HTMLElement> {\n    return this.querySelectorAll('e2-tab');\n  }\n\n  public get panels(): NodeListOf<HTMLElement> {\n    return this.querySelectorAll('e2-tab-panel');\n  }\n\n  // Attribute handling\n  public get theme(): Theme {\n    return this._theme;\n  }\n\n  public set theme(value: Theme) {\n    this._theme = value;\n    this.setAttribute('theme', value);\n\n    // Clean up any existing theme inheritance\n    if (this._themeCleanup) {\n      this._themeCleanup();\n      this._themeCleanup = undefined;\n    }\n\n    this.applyTheme(value);\n  }\n\n  public get tabPosition(): 'top' | 'bottom' | 'left' | 'right' {\n    return this._tabPosition;\n  }\n\n  public set tabPosition(value: 'top' | 'bottom' | 'left' | 'right') {\n    this._tabPosition = value;\n    this.setAttribute('tab-position', value);\n  }\n\n  public get closable(): boolean {\n    return this._closable;\n  }\n\n  public set closable(value: boolean) {\n    this._closable = value;\n    if (value) {\n      this.setAttribute('closable', '');\n    } else {\n      this.removeAttribute('closable');\n    }\n\n    // Update existing tabs\n    this.querySelectorAll('e2-tab').forEach(tab => {\n      if (value) {\n        tab.setAttribute('closable', '');\n      } else {\n        tab.removeAttribute('closable');\n      }\n    });\n  }\n\n  public get disabled(): boolean {\n    return this.hasAttribute('disabled');\n  }\n\n  public set disabled(value: boolean) {\n    if (value) {\n      this.setAttribute('disabled', '');\n    } else {\n      this.removeAttribute('disabled');\n    }\n  }\n\n  public applyTheme(theme: Theme): void {\n    applyTheme(this, theme);\n\n    // Also apply theme to all child tabs and panels\n    this.querySelectorAll('e2-tab').forEach((tab: any) => {\n      if (tab.applyTheme) {\n        tab.applyTheme(theme);\n      }\n    });\n\n    this.querySelectorAll('e2-tab-panel').forEach((panel: any) => {\n      if (panel.applyTheme) {\n        panel.applyTheme(theme);\n      }\n    });\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string | null,\n    newValue: string | null\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'theme':\n        // If theme attribute is being set, use explicit theme\n        // If theme attribute is being removed, switch to inheritance\n        if (newValue) {\n          this._theme = newValue as Theme;\n          // Clean up any existing theme inheritance\n          if (this._themeCleanup) {\n            this._themeCleanup();\n            this._themeCleanup = undefined;\n          }\n          this.applyTheme(this._theme);\n        } else if (this.isConnected) {\n          // Attribute was removed, switch to inheritance\n          this._theme = 'auto';\n          applyEffectiveTheme(this);\n          this._themeCleanup = setupThemeInheritance(this);\n        }\n        break;\n      case 'active-tab':\n        if (newValue && newValue !== this._activeTabId) {\n          this.selectTabById(newValue);\n        }\n        break;\n      case 'tab-position':\n        this._tabPosition = (newValue as any) || 'top';\n        break;\n      case 'closable':\n        this._closable = newValue !== null;\n        break;\n    }\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('tab-container');\n    }\n\n    // Set up theme inheritance if no explicit theme is set\n    if (!this.hasAttribute('theme')) {\n      applyEffectiveTheme(this);\n      this._themeCleanup = setupThemeInheritance(this);\n    } else {\n      this.applyTheme(this._theme);\n    }\n\n    this.updateTabsAndPanels();\n\n    // Defer initialization until the next frame to avoid conflicts with custom element initialization\n    // Use requestAnimationFrame instead of setTimeout for better timing\n    // requestAnimationFrame(() => {\n    //   // Wait one more frame to ensure all child custom elements are fully initialized\n    //   requestAnimationFrame(() => {\n    //     this.updateTabsAndPanels();\n\n    //     // If still no active tab after initialization, try once more\n    //     if (!this._activeTabId) {\n    //       requestAnimationFrame(() => {\n    //         this.updateTabsAndPanels();\n    //       });\n    //     }\n    //   });\n    // });\n  }\n\n  disconnectedCallback(): void {\n    // Clean up theme inheritance listener\n    if (this._themeCleanup) {\n      this._themeCleanup();\n      this._themeCleanup = undefined;\n    }\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-tab-container')) {\n  customElements.define('e2-tab-container', TabContainer);\n}\n","/**\n * Tab Panel Element\n * Container for tab content that shows/hides based on tab selection\n */\n\nimport { EditorElementProperties, Theme } from '../../types';\nimport {\n  applyEffectiveTheme,\n  applyTheme,\n  generateId,\n  getShadowRoot,\n  notifyThemeChange,\n  setupThemeInheritance,\n} from '../../utils';\n\nexport class TabPanel extends HTMLElement implements EditorElementProperties {\n  private _theme: Theme = 'auto';\n  private _active: boolean = false;\n  private _themeCleanup?: () => void;\n\n  static get observedAttributes(): string[] {\n    return ['theme', 'disabled', 'active'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: none;\n          flex-direction: column;\n          width: 100%;\n          height: 100%;\n          overflow: auto;\n          background: var(--tab-panel-bg, #ffffff);\n          padding: var(--tab-panel-padding, 16px);\n          font-family: var(--font-family, system-ui, sans-serif);\n          font-size: var(--font-size, 14px);\n          color: var(--tab-panel-color, #333);\n          box-sizing: border-box;\n        }\n\n        :host([active]) {\n          display: flex;\n        }\n\n        :host(.theme-dark) {\n          background: var(--tab-panel-bg-dark, #1e1e1e);\n          color: var(--tab-panel-color-dark, #fff);\n        }\n\n        :host([disabled]) {\n          opacity: 0.6;\n          pointer-events: none;\n        }\n\n        /* Scrollbar styling for dark theme */\n        :host(.theme-dark) {\n          scrollbar-width: thin;\n          scrollbar-color: var(--scrollbar-thumb-dark, #555) var(--scrollbar-track-dark, #2d2d2d);\n        }\n\n        :host(.theme-dark)::-webkit-scrollbar {\n          width: 8px;\n          height: 8px;\n        }\n\n        :host(.theme-dark)::-webkit-scrollbar-track {\n          background: var(--scrollbar-track-dark, #2d2d2d);\n        }\n\n        :host(.theme-dark)::-webkit-scrollbar-thumb {\n          background: var(--scrollbar-thumb-dark, #555);\n          border-radius: 4px;\n        }\n\n        :host(.theme-dark)::-webkit-scrollbar-thumb:hover {\n          background: var(--scrollbar-thumb-hover-dark, #666);\n        }\n\n        /* Light theme scrollbar */\n        :host(.theme-light) {\n          scrollbar-width: thin;\n          scrollbar-color: var(--scrollbar-thumb-light, #ccc) var(--scrollbar-track-light, #f0f0f0);\n        }\n\n        :host(.theme-light)::-webkit-scrollbar {\n          width: 8px;\n          height: 8px;\n        }\n\n        :host(.theme-light)::-webkit-scrollbar-track {\n          background: var(--scrollbar-track-light, #f0f0f0);\n        }\n\n        :host(.theme-light)::-webkit-scrollbar-thumb {\n          background: var(--scrollbar-thumb-light, #ccc);\n          border-radius: 4px;\n        }\n\n        :host(.theme-light)::-webkit-scrollbar-thumb:hover {\n          background: var(--scrollbar-thumb-hover-light, #bbb);\n        }\n\n        /* Content styling */\n        ::slotted(*) {\n          max-width: 100%;\n        }\n\n        ::slotted(h1),\n        ::slotted(h2),\n        ::slotted(h3),\n        ::slotted(h4),\n        ::slotted(h5),\n        ::slotted(h6) {\n          margin-top: 0;\n          color: inherit;\n        }\n\n        ::slotted(p) {\n          line-height: 1.5;\n          margin-bottom: 1em;\n        }\n\n        ::slotted(pre) {\n          background: var(--code-bg, #f5f5f5);\n          padding: 12px;\n          border-radius: 4px;\n          overflow-x: auto;\n          font-family: var(--font-family-mono, 'Consolas', 'Monaco', monospace);\n        }\n\n        :host(.theme-dark) ::slotted(pre) {\n          background: var(--code-bg-dark, #0d1117);\n        }\n\n        ::slotted(code) {\n          background: var(--code-bg, #f5f5f5);\n          padding: 2px 4px;\n          border-radius: 2px;\n          font-family: var(--font-family-mono, 'Consolas', 'Monaco', monospace);\n          font-size: 0.9em;\n        }\n\n        :host(.theme-dark) ::slotted(code) {\n          background: var(--code-bg-dark, #0d1117);\n        }\n\n        /* Loading state */\n        :host([loading]) {\n          display: flex;\n          align-items: center;\n          justify-content: center;\n        }\n\n        :host([loading])::before {\n          content: 'Loading...';\n          color: var(--tab-panel-loading-color, #666);\n        }\n\n        :host(.theme-dark[loading])::before {\n          color: var(--tab-panel-loading-color-dark, #aaa);\n        }\n\n        /* Empty state */\n        :host(:empty:not([loading])) {\n          display: flex;\n          align-items: center;\n          justify-content: center;\n        }\n\n        :host(:empty:not([loading]))::before {\n          content: attr(data-empty-message);\n          color: var(--tab-panel-empty-color, #999);\n          font-style: italic;\n        }\n\n        :host(.theme-dark:empty:not([loading]))::before {\n          color: var(--tab-panel-empty-color-dark, #666);\n        }\n      </style>\n\n      <slot></slot>\n    `;\n  }\n\n  // Public API\n  public show(): void {\n    this.active = true;\n  }\n\n  public hide(): void {\n    this.active = false;\n  }\n\n  public scrollToTop(): void {\n    this.scrollTop = 0;\n  }\n\n  public scrollToBottom(): void {\n    this.scrollTop = this.scrollHeight;\n  }\n\n  public scrollToElement(element: Element): void {\n    if (this.contains(element)) {\n      element.scrollIntoView({ behavior: 'smooth', block: 'nearest' });\n    }\n  }\n\n  public clearContent(): void {\n    this.innerHTML = '';\n  }\n\n  public setContent(content: string): void {\n    // Clear existing content first to avoid conflicts\n    this.innerHTML = '';\n    this.innerHTML = content;\n  }\n\n  public appendContent(content: string): void {\n    this.insertAdjacentHTML('beforeend', content);\n  }\n\n  public prependContent(content: string): void {\n    this.insertAdjacentHTML('afterbegin', content);\n  }\n\n  // Properties\n  public get theme(): Theme {\n    return this._theme;\n  }\n\n  public set theme(value: Theme) {\n    this._theme = value;\n    this.setAttribute('theme', value);\n    this.applyTheme(value);\n    // Notify child elements of theme change\n    notifyThemeChange(this, value);\n  }\n\n  public get active(): boolean {\n    return this._active;\n  }\n\n  public set active(value: boolean) {\n    this._active = value;\n    if (value) {\n      this.setAttribute('active', '');\n      this.style.display = 'flex';\n    } else {\n      this.removeAttribute('active');\n      this.style.display = 'none';\n    }\n  }\n\n  public get disabled(): boolean {\n    return this.hasAttribute('disabled');\n  }\n\n  public set disabled(value: boolean) {\n    if (value) {\n      this.setAttribute('disabled', '');\n    } else {\n      this.removeAttribute('disabled');\n    }\n  }\n\n  public get loading(): boolean {\n    return this.hasAttribute('loading');\n  }\n\n  public set loading(value: boolean) {\n    if (value) {\n      this.setAttribute('loading', '');\n    } else {\n      this.removeAttribute('loading');\n    }\n  }\n\n  public get emptyMessage(): string {\n    return this.getAttribute('data-empty-message') || 'No content available';\n  }\n\n  public set emptyMessage(value: string) {\n    this.setAttribute('data-empty-message', value);\n  }\n\n  public applyTheme(theme: Theme): void {\n    applyTheme(this, theme);\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string | null,\n    newValue: string | null\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'theme':\n        // Clean up existing theme inheritance when explicit theme is set\n        if (this._themeCleanup) {\n          this._themeCleanup();\n          this._themeCleanup = undefined;\n        }\n        this._theme = (newValue as Theme) || 'auto';\n        this.applyTheme(this._theme);\n        break;\n      case 'active':\n        this._active = newValue !== null;\n        if (this._active) {\n          this.style.display = 'flex';\n        } else {\n          this.style.display = 'none';\n        }\n        break;\n    }\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('tab-panel');\n    }\n\n    // Set up theme inheritance if no explicit theme is set\n    if (!this.hasAttribute('theme')) {\n      applyEffectiveTheme(this);\n      this._themeCleanup = setupThemeInheritance(this);\n    } else {\n      this.applyTheme(this._theme);\n    }\n\n    // Handle pending setup from dynamic creation\n    if ((this as any)._pendingSetup) {\n      const setup = (this as any)._pendingSetup;\n\n      // Set attributes safely now that element is connected\n      if (setup.slot) {\n        this.setAttribute('slot', setup.slot);\n      }\n      if (setup.content) {\n        // Only set innerHTML if the element doesn't already have content\n        // This prevents conflicts when the element is declared with existing content\n        if (this.children.length === 0 && this.textContent?.trim() === '') {\n          this.innerHTML = setup.content;\n        }\n      }\n      if (setup.theme) {\n        this.applyTheme(setup.theme);\n      }\n\n      // Clean up\n      delete (this as any)._pendingSetup;\n    }\n\n    // Set initial visibility based on active state\n    if (this._active) {\n      this.style.display = 'flex';\n    } else {\n      this.style.display = 'none';\n    }\n\n    // Set default empty message if not provided\n    if (!this.hasAttribute('data-empty-message')) {\n      this.emptyMessage = 'No content available';\n    }\n  }\n\n  disconnectedCallback(): void {\n    // Clean up theme inheritance listener\n    if (this._themeCleanup) {\n      this._themeCleanup();\n      this._themeCleanup = undefined;\n    }\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-tab-panel')) {\n  customElements.define('e2-tab-panel', TabPanel);\n}\n","/**\n * Toolbar Element\n * A horizontal container for toolbar buttons and other controls\n */\n\nimport { EditorElementProperties, Theme } from '../../types';\nimport {\n  applyEffectiveTheme,\n  applyTheme,\n  generateId,\n  getShadowRoot,\n  setupThemeInheritance,\n} from '../../utils';\n\nexport class Toolbar extends HTMLElement implements EditorElementProperties {\n  private _theme: Theme = 'auto';\n  private _themeCleanup?: () => void;\n\n  static get observedAttributes(): string[] {\n    return ['theme', 'disabled'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: flex;\n          align-items: center;\n          padding: 4px;\n          background: var(--toolbar-bg, #f0f0f0);\n          border-bottom: 1px solid var(--toolbar-border, #ccc);\n          gap: 2px;\n          font-family: var(--font-family, system-ui, sans-serif);\n          font-size: var(--font-size, 14px);\n        }\n\n        :host(.theme-dark) {\n          background: var(--toolbar-bg-dark, #2d2d2d);\n          border-bottom-color: var(--toolbar-border-dark, #555);\n          color: var(--text-color-dark, #fff);\n        }\n\n        :host([disabled]) {\n          opacity: 0.6;\n          pointer-events: none;\n        }\n\n        ::slotted(*) {\n          flex-shrink: 0;\n        }\n      </style>\n      <slot></slot>\n    `;\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('toolbar');\n    }\n\n    // Set up theme inheritance if no explicit theme is set\n    if (!this.hasAttribute('theme')) {\n      applyEffectiveTheme(this);\n      this._themeCleanup = setupThemeInheritance(this);\n    } else {\n      this.applyTheme(this._theme);\n    }\n  }\n\n  disconnectedCallback(): void {\n    // Clean up theme inheritance listener\n    if (this._themeCleanup) {\n      this._themeCleanup();\n      this._themeCleanup = undefined;\n    }\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string,\n    newValue: string\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'theme':\n        // If theme attribute is being set, use explicit theme\n        // If theme attribute is being removed, switch to inheritance\n        if (newValue) {\n          this.theme = newValue as Theme;\n        } else if (this.isConnected) {\n          // Attribute was removed, switch to inheritance\n          applyEffectiveTheme(this);\n          this._themeCleanup = setupThemeInheritance(this);\n        }\n        break;\n    }\n  }\n\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this._theme = value;\n\n    // Clean up any existing theme inheritance\n    if (this._themeCleanup) {\n      this._themeCleanup();\n      this._themeCleanup = undefined;\n    }\n\n    this.applyTheme(value);\n  }\n\n  applyTheme(theme: Theme): void {\n    applyTheme(this, theme);\n  }\n\n  /**\n   * Close all toolbar menus except the specified one\n   * @param exceptMenu The menu to keep open (optional)\n   */\n  closeAllMenus(exceptMenu?: HTMLElement): void {\n    const toolbarMenus = this.querySelectorAll('e2-toolbar-menu');\n    toolbarMenus.forEach(menu => {\n      if (menu !== exceptMenu && typeof (menu as any).close === 'function') {\n        (menu as any).close();\n      }\n    });\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-toolbar')) {\n  customElements.define('e2-toolbar', Toolbar);\n}\n","/**\n * Toolbar Button Element\n * A button designed to be used within a toolbar\n */\n\nimport { EditorElementProperties, Theme } from '../../types';\nimport {\n  applyEffectiveTheme,\n  applyTheme,\n  generateId,\n  getShadowRoot,\n  setupThemeInheritance,\n} from '../../utils';\n\nexport class ToolbarButton\n  extends HTMLElement\n  implements EditorElementProperties\n{\n  private _theme: Theme = 'auto';\n  private _themeCleanup?: () => void;\n\n  static get observedAttributes(): string[] {\n    return ['label', 'icon', 'theme', 'disabled', 'active'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: inline-block;\n        }\n\n        button {\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          gap: 4px;\n          padding: 6px 12px;\n          border: 1px solid transparent;\n          background: transparent;\n          color: var(--text-color, #333);\n          font-family: inherit;\n          font-size: inherit;\n          cursor: pointer;\n          border-radius: 3px;\n          min-height: 24px;\n          transition: all 0.15s ease;\n          text-overflow: ellipsis;\n          overflow: hidden;\n        }\n\n        button:hover {\n          background: var(--button-hover-bg, rgba(0, 0, 0, 0.1));\n        }\n\n        button:active,\n        button.active {\n          background: var(--button-active-bg, rgba(0, 0, 0, 0.2));\n        }\n\n        button:disabled {\n          opacity: 0.6;\n          cursor: not-allowed;\n        }\n\n        :host(.theme-dark) button {\n          color: var(--text-color-dark, #fff);\n        }\n\n        :host(.theme-dark) button:hover {\n          background: var(--button-hover-bg-dark, rgba(255, 255, 255, 0.1));\n        }\n\n        :host(.theme-dark) button:active,\n        :host(.theme-dark) button.active {\n          background: var(--button-active-bg-dark, rgba(255, 255, 255, 0.2));\n        }\n\n        .icon {\n          width: 16px;\n          height: 16px;\n          flex-shrink: 0;\n        }\n\n        .label {\n          white-space: nowrap;\n        }\n      </style>\n      <button>\n        <span class=\"icon\" style=\"display: none;\"></span>\n        <span class=\"label\"></span>\n      </button>\n    `;\n\n    const button = shadowRoot.querySelector('button')!;\n    button.addEventListener('click', this.handleClick.bind(this));\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('toolbar-button');\n    }\n    this.updateContent();\n\n    // Set up theme inheritance if no explicit theme is set\n    if (!this.hasAttribute('theme')) {\n      applyEffectiveTheme(this);\n      this._themeCleanup = setupThemeInheritance(this);\n    } else {\n      this.applyTheme(this._theme);\n    }\n  }\n\n  disconnectedCallback(): void {\n    // Clean up theme inheritance listener\n    if (this._themeCleanup) {\n      this._themeCleanup();\n      this._themeCleanup = undefined;\n    }\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string,\n    newValue: string\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'label':\n      case 'icon':\n        this.updateContent();\n        break;\n      case 'theme':\n        // If theme attribute is being set, use explicit theme\n        // If theme attribute is being removed, switch to inheritance\n        if (newValue) {\n          this.theme = newValue as Theme;\n        } else if (this.isConnected) {\n          // Attribute was removed, switch to inheritance\n          applyEffectiveTheme(this);\n          this._themeCleanup = setupThemeInheritance(this);\n        }\n        break;\n      case 'disabled':\n        this.updateDisabled();\n        break;\n      case 'active':\n        this.updateActive();\n        break;\n    }\n  }\n\n  private updateContent(): void {\n    const shadowRoot = this.shadowRoot!;\n    const iconSpan = shadowRoot.querySelector('.icon') as HTMLSpanElement;\n    const labelSpan = shadowRoot.querySelector('.label') as HTMLSpanElement;\n\n    const icon = this.getAttribute('icon');\n    const label = this.getAttribute('label') || '';\n\n    if (icon) {\n      iconSpan.textContent = icon;\n      iconSpan.style.display = 'inline-block';\n    } else {\n      iconSpan.style.display = 'none';\n    }\n\n    labelSpan.textContent = label;\n  }\n\n  private updateDisabled(): void {\n    const button = this.shadowRoot!.querySelector('button')!;\n    button.disabled = this.hasAttribute('disabled');\n  }\n\n  private updateActive(): void {\n    const button = this.shadowRoot!.querySelector('button')!;\n    button.classList.toggle('active', this.hasAttribute('active'));\n  }\n\n  private handleClick(event: Event): void {\n    if (this.hasAttribute('disabled')) return;\n\n    const customEvent = new CustomEvent('toolbar-button-click', {\n      detail: {\n        buttonId: this.id,\n        button: this,\n      },\n      bubbles: true,\n      cancelable: true,\n    });\n\n    this.dispatchEvent(customEvent);\n  }\n\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this._theme = value;\n\n    // Clean up any existing theme inheritance\n    if (this._themeCleanup) {\n      this._themeCleanup();\n      this._themeCleanup = undefined;\n    }\n\n    this.applyTheme(value);\n  }\n\n  applyTheme(theme: Theme): void {\n    applyTheme(this, theme);\n  }\n\n  get label(): string {\n    return this.getAttribute('label') || '';\n  }\n\n  set label(value: string) {\n    this.setAttribute('label', value);\n  }\n\n  get icon(): string {\n    return this.getAttribute('icon') || '';\n  }\n\n  set icon(value: string) {\n    this.setAttribute('icon', value);\n  }\n\n  get active(): boolean {\n    return this.hasAttribute('active');\n  }\n\n  set active(value: boolean) {\n    if (value) {\n      this.setAttribute('active', '');\n    } else {\n      this.removeAttribute('active');\n    }\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-toolbar-button')) {\n  customElements.define('e2-toolbar-button', ToolbarButton);\n}\n","/**\n * Toolbar Menu Element\n * A dropdown menu button designed to be used within a toolbar\n */\n\nimport { EditorElementProperties, Theme } from '../../types';\nimport {\n  applyEffectiveTheme,\n  applyTheme,\n  generateId,\n  getShadowRoot,\n  setupThemeInheritance,\n} from '../../utils';\n\nexport class ToolbarMenu\n  extends HTMLElement\n  implements EditorElementProperties\n{\n  private _theme: Theme = 'auto';\n  private _isOpen: boolean = false;\n  private _justOpened: boolean = false;\n  private _themeCleanup?: () => void;\n\n  static get observedAttributes(): string[] {\n    return ['label', 'icon', 'theme', 'disabled'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n    this.bindEvents();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: inline-block;\n          position: relative;\n        }\n\n        .button {\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          gap: 4px;\n          padding: 6px 12px;\n          border: 1px solid transparent;\n          background: transparent;\n          color: var(--text-color, #333);\n          font-family: inherit;\n          font-size: inherit;\n          cursor: pointer;\n          border-radius: 3px;\n          min-height: 24px;\n          transition: all 0.15s ease;\n          text-overflow: ellipsis;\n          overflow: hidden;\n        }\n\n        .button:hover {\n          background: var(--button-hover-bg, rgba(0, 0, 0, 0.1));\n        }\n\n        .button:active,\n        .button.open {\n          background: var(--button-active-bg, rgba(0, 0, 0, 0.2));\n        }\n\n        .button:disabled {\n          opacity: 0.6;\n          cursor: not-allowed;\n        }\n\n        :host(.theme-dark) .button {\n          color: var(--text-color-dark, #fff);\n        }\n\n        :host(.theme-dark) .button:hover {\n          background: var(--button-hover-bg-dark, rgba(255, 255, 255, 0.1));\n        }\n\n        :host(.theme-dark) .button:active,\n        :host(.theme-dark) .button.open {\n          background: var(--button-active-bg-dark, rgba(255, 255, 255, 0.2));\n        }\n\n        .icon {\n          width: 16px;\n          height: 16px;\n          flex-shrink: 0;\n        }\n\n        .label {\n          white-space: nowrap;\n        }\n\n        .dropdown-arrow {\n          width: 0;\n          height: 0;\n          border-left: 4px solid transparent;\n          border-right: 4px solid transparent;\n          border-top: 4px solid currentColor;\n          margin-left: 4px;\n          flex-shrink: 0;\n        }\n\n        .dropdown {\n          position: absolute;\n          top: 100%;\n          left: 0;\n          z-index: 9999;\n          display: none;\n          min-width: 180px;\n          background: var(--context-menu-bg, #ffffff);\n          border: 1px solid var(--context-menu-border, #d0d0d0);\n          border-radius: 4px;\n          box-shadow: var(--context-menu-shadow, 0 2px 8px rgba(0, 0, 0, 0.15));\n          padding: 4px 0;\n          font-family: inherit;\n          font-size: 14px;\n          margin-top: 2px;\n        }\n\n        .dropdown.open {\n          display: block;\n        }\n\n        :host(.theme-light) .dropdown {\n          background: var(--context-menu-bg-light, #ffffff);\n          border-color: var(--context-menu-border-light, #d0d0d0);\n          box-shadow: var(--context-menu-shadow-light, 0 2px 8px rgba(0, 0, 0, 0.15));\n        }\n\n        :host(.theme-dark) .dropdown {\n          background: var(--context-menu-bg-dark, #2a2a2a);\n          border-color: var(--context-menu-border-dark, #444444);\n          box-shadow: var(--context-menu-shadow-dark, 0 2px 8px rgba(0, 0, 0, 0.4));\n        }\n\n        @media (prefers-color-scheme: dark) {\n          :host(.theme-auto) .dropdown {\n            background: var(--context-menu-bg-dark, #2a2a2a);\n            border-color: var(--context-menu-border-dark, #444444);\n            box-shadow: var(--context-menu-shadow-dark, 0 2px 8px rgba(0, 0, 0, 0.4));\n          }\n        }\n\n        ::slotted(*) {\n          display: block;\n        }\n      </style>\n      <button class=\"button\">\n        <span class=\"icon\" style=\"display: none;\"></span>\n        <span class=\"label\"></span>\n        <div class=\"dropdown-arrow\"></div>\n      </button>\n      <div class=\"dropdown\">\n        <slot></slot>\n      </div>\n    `;\n\n    const button = shadowRoot.querySelector('.button')!;\n    button.addEventListener('click', this.handleButtonClick.bind(this));\n  }\n\n  private bindEvents(): void {\n    // Close menu when clicking outside\n    document.addEventListener('click', this.handleDocumentClick.bind(this));\n\n    // Close menu on escape key\n    document.addEventListener('keydown', this.handleKeyDown.bind(this));\n\n    // Handle window resize\n    window.addEventListener('resize', this.handleWindowResize.bind(this));\n\n    // Listen for item clicks to close menu\n    this.addEventListener('click', this.handleItemClick.bind(this));\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('toolbar-menu');\n    }\n    this.updateContent();\n\n    // Set up theme inheritance if no explicit theme is set\n    if (!this.hasAttribute('theme')) {\n      applyEffectiveTheme(this);\n      this._themeCleanup = setupThemeInheritance(this);\n    } else {\n      this.applyTheme(this._theme);\n    }\n  }\n\n  disconnectedCallback(): void {\n    // Clean up theme inheritance listener\n    if (this._themeCleanup) {\n      this._themeCleanup();\n      this._themeCleanup = undefined;\n    }\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string,\n    newValue: string\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'label':\n      case 'icon':\n        this.updateContent();\n        break;\n      case 'theme':\n        // If theme attribute is being set, use explicit theme\n        // If theme attribute is being removed, switch to inheritance\n        if (newValue) {\n          this.theme = newValue as Theme;\n        } else if (this.isConnected) {\n          // Attribute was removed, switch to inheritance\n          applyEffectiveTheme(this);\n          this._themeCleanup = setupThemeInheritance(this);\n        }\n        break;\n      case 'disabled':\n        this.updateDisabled();\n        break;\n    }\n  }\n\n  private updateContent(): void {\n    const shadowRoot = this.shadowRoot!;\n    const iconSpan = shadowRoot.querySelector('.icon') as HTMLSpanElement;\n    const labelSpan = shadowRoot.querySelector('.label') as HTMLSpanElement;\n\n    const icon = this.getAttribute('icon');\n    const label = this.getAttribute('label') || '';\n\n    if (icon) {\n      iconSpan.textContent = icon;\n      iconSpan.style.display = 'inline-block';\n    } else {\n      iconSpan.style.display = 'none';\n    }\n\n    labelSpan.textContent = label;\n  }\n\n  private updateDisabled(): void {\n    const button = this.shadowRoot!.querySelector(\n      '.button'\n    )! as HTMLButtonElement;\n    button.disabled = this.hasAttribute('disabled');\n\n    if (this.hasAttribute('disabled') && this._isOpen) {\n      this.close();\n    }\n  }\n\n  private handleButtonClick(event: Event): void {\n    if (this.hasAttribute('disabled')) return;\n\n    event.stopPropagation();\n\n    if (this._isOpen) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  private handleDocumentClick(event: MouseEvent): void {\n    if (!this._isOpen) return;\n\n    // Ignore the click that just opened the menu\n    if (this._justOpened) {\n      this._justOpened = false;\n      return;\n    }\n\n    const target = event.target as Node;\n    if (!this.contains(target) && !this.shadowRoot?.contains(target)) {\n      this.close();\n    }\n  }\n\n  private handleKeyDown(event: KeyboardEvent): void {\n    if (!this._isOpen) return;\n\n    switch (event.key) {\n      case 'Escape':\n        event.preventDefault();\n        this.close();\n        break;\n      case 'ArrowDown':\n        event.preventDefault();\n        this.focusNextItem();\n        break;\n      case 'ArrowUp':\n        event.preventDefault();\n        this.focusPreviousItem();\n        break;\n      case 'Enter':\n      case ' ':\n        event.preventDefault();\n        this.activateFocusedItem();\n        break;\n    }\n  }\n\n  private handleWindowResize(): void {\n    if (this._isOpen) {\n      this.close();\n    }\n  }\n\n  private handleItemClick(event: Event): void {\n    // Close menu when any item is clicked\n    const target = event.target as HTMLElement;\n    if (\n      target.tagName === 'E2-CONTEXT-MENU-ITEM' ||\n      target.closest('e2-context-menu-item')\n    ) {\n      // Small delay to allow the item click event to be processed first\n      setTimeout(() => this.close(), 0);\n    }\n  }\n\n  private focusNextItem(): void {\n    const items = this.querySelectorAll('e2-context-menu-item:not([disabled])');\n    const currentIndex = Array.from(items).findIndex(\n      item => item === document.activeElement || item.shadowRoot?.activeElement\n    );\n\n    const nextIndex = currentIndex < items.length - 1 ? currentIndex + 1 : 0;\n    (items[nextIndex] as HTMLElement).focus();\n  }\n\n  private focusPreviousItem(): void {\n    const items = this.querySelectorAll('e2-context-menu-item:not([disabled])');\n    const currentIndex = Array.from(items).findIndex(\n      item => item === document.activeElement || item.shadowRoot?.activeElement\n    );\n\n    const prevIndex = currentIndex > 0 ? currentIndex - 1 : items.length - 1;\n    (items[prevIndex] as HTMLElement).focus();\n  }\n\n  private activateFocusedItem(): void {\n    const focused = document.activeElement;\n    if (focused && focused.tagName === 'E2-CONTEXT-MENU-ITEM') {\n      (focused as any).click();\n    }\n  }\n\n  private adjustPosition(): void {\n    const dropdown = this.shadowRoot!.querySelector('.dropdown') as HTMLElement;\n    const rect = this.getBoundingClientRect();\n    const dropdownRect = dropdown.getBoundingClientRect();\n\n    // Check if dropdown would go off the right edge of the viewport\n    if (rect.left + dropdownRect.width > window.innerWidth) {\n      dropdown.style.left = 'auto';\n      dropdown.style.right = '0';\n    } else {\n      dropdown.style.left = '0';\n      dropdown.style.right = 'auto';\n    }\n\n    // Check if dropdown would go off the bottom edge of the viewport\n    if (rect.bottom + dropdownRect.height > window.innerHeight) {\n      dropdown.style.top = 'auto';\n      dropdown.style.bottom = '100%';\n      dropdown.style.marginTop = '0';\n      dropdown.style.marginBottom = '2px';\n    } else {\n      dropdown.style.top = '100%';\n      dropdown.style.bottom = 'auto';\n      dropdown.style.marginTop = '2px';\n      dropdown.style.marginBottom = '0';\n    }\n  }\n\n  // Public API\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this._theme = value;\n\n    // Clean up any existing theme inheritance\n    if (this._themeCleanup) {\n      this._themeCleanup();\n      this._themeCleanup = undefined;\n    }\n\n    this.applyTheme(value);\n  }\n\n  applyTheme(theme: Theme): void {\n    applyTheme(this, theme);\n\n    // Apply theme to all child context menu items and separators\n    const childItems = this.querySelectorAll(\n      'e2-context-menu-item, e2-context-menu-separator'\n    );\n    childItems.forEach(child => {\n      if (typeof (child as any).applyTheme === 'function') {\n        (child as any).applyTheme(theme);\n      }\n    });\n  }\n\n  get label(): string {\n    return this.getAttribute('label') || '';\n  }\n\n  set label(value: string) {\n    this.setAttribute('label', value);\n  }\n\n  get icon(): string {\n    return this.getAttribute('icon') || '';\n  }\n\n  set icon(value: string) {\n    this.setAttribute('icon', value);\n  }\n\n  get isOpen(): boolean {\n    return this._isOpen;\n  }\n\n  open(): void {\n    if (this.hasAttribute('disabled') || this._isOpen) return;\n\n    // Close other toolbar menus in the same toolbar\n    const parentToolbar = this.closest('e2-toolbar');\n    if (\n      parentToolbar &&\n      typeof (parentToolbar as any).closeAllMenus === 'function'\n    ) {\n      (parentToolbar as any).closeAllMenus(this);\n    }\n\n    this._isOpen = true;\n    const button = this.shadowRoot!.querySelector('.button')!;\n    const dropdown = this.shadowRoot!.querySelector('.dropdown')!;\n\n    button.classList.add('open');\n    dropdown.classList.add('open');\n\n    // Adjust position to stay within viewport\n    this.adjustPosition();\n\n    // Set the flag to prevent immediate closing\n    this._justOpened = true;\n\n    // Ensure all child items have the correct theme\n    this.applyTheme(this._theme);\n\n    // Dispatch show event\n    const showEvent = new CustomEvent('toolbar-menu-show', {\n      detail: {\n        menuId: this.id,\n        menu: this,\n      },\n      bubbles: true,\n      cancelable: true,\n    });\n\n    this.dispatchEvent(showEvent);\n  }\n\n  close(): void {\n    if (!this._isOpen) return;\n\n    this._isOpen = false;\n    const button = this.shadowRoot!.querySelector('.button')!;\n    const dropdown = this.shadowRoot!.querySelector('.dropdown')!;\n\n    button.classList.remove('open');\n    dropdown.classList.remove('open');\n\n    // Dispatch hide event\n    const hideEvent = new CustomEvent('toolbar-menu-hide', {\n      detail: {\n        menuId: this.id,\n        menu: this,\n      },\n      bubbles: true,\n      cancelable: true,\n    });\n\n    this.dispatchEvent(hideEvent);\n  }\n\n  toggle(): void {\n    if (this._isOpen) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-toolbar-menu')) {\n  customElements.define('e2-toolbar-menu', ToolbarMenu);\n}\n","/**\n * Toolbar Separator Element\n * A visual separator for toolbar items\n */\n\nimport { Theme } from '../../types';\nimport {\n  applyEffectiveTheme,\n  applyTheme,\n  getShadowRoot,\n  notifyThemeChange,\n  setupThemeInheritance,\n} from '../../utils';\n\nexport class ToolbarSeparator extends HTMLElement {\n  private _theme: Theme = 'auto';\n  private _themeCleanup?: () => void;\n\n  static get observedAttributes(): string[] {\n    return ['theme'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: inline-block;\n          width: 1px;\n          height: 24px;\n          background: var(--separator-color, #ccc);\n          margin: 0 4px;\n          flex-shrink: 0;\n        }\n\n        :host(.theme-dark) {\n          background: var(--separator-color-dark, #555);\n        }\n      </style>\n    `;\n  }\n\n  connectedCallback(): void {\n    // Set up theme inheritance if no explicit theme is set\n    if (!this.hasAttribute('theme')) {\n      applyEffectiveTheme(this);\n      this._themeCleanup = setupThemeInheritance(this);\n    } else {\n      this.applyTheme(this._theme);\n    }\n  }\n\n  disconnectedCallback(): void {\n    // Clean up theme inheritance listener\n    if (this._themeCleanup) {\n      this._themeCleanup();\n      this._themeCleanup = undefined;\n    }\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string,\n    newValue: string\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'theme':\n        // Clean up existing theme inheritance when explicit theme is set\n        if (this._themeCleanup) {\n          this._themeCleanup();\n          this._themeCleanup = undefined;\n        }\n        this.theme = newValue as Theme;\n        break;\n    }\n  }\n\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this._theme = value;\n    this.applyTheme(value);\n    // Notify child elements of theme change\n    notifyThemeChange(this, value);\n  }\n\n  applyTheme(theme: Theme): void {\n    applyTheme(this, theme);\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-toolbar-separator')) {\n  customElements.define('e2-toolbar-separator', ToolbarSeparator);\n}\n","/**\n * E2 - A collection of custom HTML elements for building editors\n *\n * This library provides a set of reusable UI components designed specifically\n * for creating level editors, sprite editors, and similar desktop-like web applications.\n */\n\n// Import and register all custom elements\nimport './elements/app/app';\nimport './elements/contextmenu/context-menu';\nimport './elements/contextmenu/context-menu-item';\nimport './elements/contextmenu/context-menu-separator';\nimport './elements/dialog/alert';\nimport './elements/dialog/confirm';\nimport './elements/dialog/dialog';\nimport './elements/dialog/prompt';\nimport './elements/listview/list-view';\nimport './elements/notification/notification';\nimport './elements/notification/notification-container';\nimport './elements/panel/collapsible-panel';\nimport './elements/panel/split-panel';\nimport './elements/panel/split-panel-container';\nimport './elements/statusbar/status-bar';\nimport './elements/statusbar/status-item';\nimport './elements/statusbar/status-section';\nimport './elements/tabs/tab';\nimport './elements/tabs/tab-container';\nimport './elements/tabs/tab-panel';\nimport './elements/toolbar/toolbar';\nimport './elements/toolbar/toolbar-button';\nimport './elements/toolbar/toolbar-menu';\nimport './elements/toolbar/toolbar-separator';\n\n// Export types and interfaces for TypeScript users\nexport * from './types';\n\n// Export utility functions if any\nexport * from './utils';\n\n// Version information\nexport const VERSION = '1.0.0';\n\n// Auto-registration message for development\nif (typeof window !== 'undefined' && process.env.NODE_ENV === 'development') {\n  console.log(\n    `E2 v${VERSION} loaded - Custom elements registered automatically`\n  );\n}\n"],"names":["root","factory","exports","module","define","amd","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","generateId","prefix","Math","random","toString","substring","dispatchCustomEvent","element","eventName","detail","options","event","CustomEvent","bubbles","cancelable","dispatchEvent","addGlobalCSS","css","id","document","getElementById","style","createElement","textContent","head","appendChild","createTemplate","html","template","innerHTML","trim","getShadowRoot","mode","shadowRoot","attachShadow","debounce","func","wait","timeout","args","clearTimeout","window","setTimeout","isElementVisible","rect","getBoundingClientRect","top","left","bottom","innerHeight","documentElement","clientHeight","right","innerWidth","clientWidth","findParentApp","current","parentElement","tagName","toLowerCase","getEffectiveTheme","explicitTheme","getAttribute","includes","parentApp","parentTheme","applyTheme","theme","classList","remove","add","applyEffectiveTheme","setupThemeInheritance","onThemeChange","handleAppThemeChange","hasAttribute","newTheme","addEventListener","removeEventListener","notifyThemeChange","appElement","initializeThemeInheritance","currentTheme","handleThemeChange","themeCleanupRef","undefined","isConnected","createToast","type","message","notification","container","title","dismissible","persistent","querySelector","body","existingContainer","defaultContainer","position","show","then","parentNode","removeChild","Toast","info","success","warning","error","E2App","HTMLElement","observedAttributes","constructor","super","_theme","_stylesInitialized","setupElement","styleElement","connectedCallback","setupAutoTheme","disconnectedCallback","mediaQueryList","matchMedia","attributeChangedCallback","name","oldValue","newValue","oldTheme","setCSSVariable","property","setProperty","getCSSVariable","getComputedStyle","getPropertyValue","customElements","ContextMenu","_visible","_justShown","boundContextMenuHandler","handleContextMenu","bind","bindEvents","handleDocumentClick","handleKeyDown","handleWindowResize","_themeCleanup","setupTargetListeners","removeTargetListeners","hide","targetSelector","querySelectorAll","forEach","target","disabled","mouseEvent","preventDefault","stopPropagation","trigger","currentTarget","clientX","clientY","contains","focusNextItem","focusPreviousItem","activateFocusedItem","items","currentIndex","Array","from","findIndex","item","activeElement","length","focus","focused","click","setAttribute","removeAttribute","visible","x","y","adjustPosition","requestAnimationFrame","firstItem","menuId","menu","viewportWidth","viewportHeight","parseInt","width","height","child","ContextMenuItem","button","handleClick","tabIndex","handleFocus","updateContent","updateDisabledState","iconElement","labelElement","shortcutElement","icon","display","label","shortcut","contextMenu","closest","itemId","Event","ContextMenuSeparator","_value","AlertDialogElement","_nativeDialog","_resolvePromise","_rejectPromise","handleClose","handleCancel","close","titleElement","messageElement","buttonElement","getDefaultTitle","className","getIconForType","dialogId","dialog","buttonText","open","Promise","resolve","reject","Error","showModal","ConfirmDialogElement","confirmButton","cancelButton","confirm","cancel","confirmed","confirmText","cancelText","danger","DialogElement","closeButton","updateTitle","updateClosable","updateSize","closable","returnValue","modal","PromptDialogElement","input","handleInput","handleKeydown","inputElement","multiline","currentType","textarea","replaceChild","setupInputElement","placeholder","defaultValue","pattern","minLength","maxLength","HTMLInputElement","validateInput","shiftKey","errorMessage","isValid","required","RegExp","test","toggle","select","ListView","_items","_columns","_viewMode","_multiSelect","_selectedItems","Set","_lastSelectedIndex","setupEventHandlers","handleItemClick","handleItemDoubleClick","itemElement","dataset","find","i","ctrlKey","altKey","handleItemSelection","listViewId","listView","itemIndex","previousSelection","start","min","end","max","clear","has","delete","updateItemElements","dispatchSelectionChange","selectedItems","filter","addedItems","removedItems","selectedIds","render","renderHeader","renderContent","headerRow","column","cell","columnId","flex","itemsContainer","emptyState","createItemElement","data","renderer","String","viewMode","multiSelect","columns","selectItem","deselectItem","selectAll","deselectAll","toggleItemSelection","setSelectedItems","itemIds","scrollToItem","scrollIntoView","behavior","block","getItem","addItem","push","removeItem","index","splice","updateItem","updates","assign","refresh","NotificationElement","_timeoutId","setupEventListeners","handleCloseClick","handleNotificationClick","dismiss","notificationId","startTimeout","progressBar","transitionDuration","NotificationContainerElement","_observer","setupMutationObserver","MutationObserver","mutations","mutation","manageNotifications","updateNotificationPositions","observe","childList","subtree","notifications","maxNotifications","excess","containerId","count","zIndex","disconnect","stackDirection","spacing","addNotification","removeNotification","notificationElement","getNotificationCount","CollapsiblePanel","_collapsed","_orientation","handleToggle","collapsed","panelId","panel","orientation","expand","collapse","SplitPanel","_size","_minSize","_maxSize","_resizable","handleResize","parseFloat","toggleAttribute","size","minSize","maxSize","resizable","getCurrentSize","containerHeight","containerWidth","SplitPanelContainer","_resizing","_activePanel","_startPosition","_startSize","_nextPanelStartSize","_updatingPanelSizes","debouncedResize","handleMouseDown","handleMouseMove","handleMouseUp","handleMouseLeave","updateHandles","updatePanelSizes","panels","getPanels","containerRect","handleSize","totalHandleSpace","availableSpace","totalSetSize","unsetPanels","remainingPercentage","defaultSize","actualSize","flexBasis","panelIndex","currentPanel","nextPanel","relativeX","relativeY","onBorder","borderStart","borderEnd","cursor","startSize","delta","deltaPercentage","indexOf","newCurrentSize","newNextSize","updateHoverCursor","overHandle","finalSize","resizePanel","getPanelSizes","sizes","resetPanelSizes","equalSize","StatusBar","_temporaryMessageTimeout","showMessage","duration","messageEl","textEl","temporary","hideMessage","getItemsInSection","section","slot","children","clearSection","StatusItem","_type","_label","_clickable","updateDisplay","itemType","iconEl","labelEl","valueEl","progressContainer","progressFill","progressText","updateProgressDisplay","fill","text","numValue","percentage","round","clickable","setProgress","progress","setIcon","StatusSection","_position","priority","firstChild","getItems","getItemsByPriority","Tab","_active","_closable","_icon","tabId","tab","MouseEvent","active","_pendingSetup","setup","TabContainer","_activeTabId","_tabPosition","handleTabClick","handleTabClose","tabSlot","panelSlot","updateTabsAndPanels","tabElement","selectTab","matches","removeTab","panelElement","previousTabId","activeTabId","activePanelId","remainingTabs","nextTab","nextPanelId","tabs","e","console","warn","correspondingPanel","activeTabElement","selectTabById","addTab","content","finalTabId","finalPanelId","removeTabById","tabPosition","TabPanel","scrollToTop","scrollTop","scrollToBottom","scrollHeight","scrollToElement","clearContent","setContent","appendContent","insertAdjacentHTML","prependContent","loading","emptyMessage","Toolbar","closeAllMenus","exceptMenu","ToolbarButton","updateDisabled","updateActive","iconSpan","labelSpan","customEvent","buttonId","ToolbarMenu","_isOpen","_justOpened","handleButtonClick","dropdown","dropdownRect","marginTop","marginBottom","isOpen","parentToolbar","showEvent","hideEvent","ToolbarSeparator","VERSION"],"sourceRoot":""}