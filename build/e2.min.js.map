{"version":3,"file":"e2.min.js","mappings":"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","sources":["webpack://E2/webpack/universalModuleDefinition","webpack://E2/webpack/bootstrap","webpack://E2/webpack/runtime/define property getters","webpack://E2/webpack/runtime/hasOwnProperty shorthand","webpack://E2/webpack/runtime/make namespace object","webpack://E2/./src/utils.ts","webpack://E2/./src/elements/panel/collapsible-panel.ts","webpack://E2/./src/elements/toolbar/toolbar.ts","webpack://E2/./src/elements/toolbar/toolbar-button.ts","webpack://E2/./src/elements/toolbar/toolbar-separator.ts","webpack://E2/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"E2\"] = factory();\n\telse\n\t\troot[\"E2\"] = factory();\n})(this, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Utility functions for editor elements\n */\n\n/**\n * Generate a unique ID for elements\n */\nexport function generateId(prefix = 'element'): string {\n  return `${prefix}-${Math.random().toString(36).substr(2, 9)}`;\n}\n\n/**\n * Dispatch a custom event from an element\n */\nexport function dispatchCustomEvent<T = any>(\n  element: HTMLElement,\n  eventName: string,\n  detail?: T,\n  options: CustomEventInit = {}\n): boolean {\n  const event = new CustomEvent(eventName, {\n    detail,\n    bubbles: true,\n    cancelable: true,\n    ...options,\n  });\n\n  return element.dispatchEvent(event);\n}\n\n/**\n * Add CSS to the document head if it doesn't already exist\n */\nexport function addGlobalCSS(css: string, id?: string): void {\n  if (id && document.getElementById(id)) {\n    return; // CSS already added\n  }\n\n  const style = document.createElement('style');\n  if (id) {\n    style.id = id;\n  }\n  style.textContent = css;\n  document.head.appendChild(style);\n}\n\n/**\n * Create a template element with the given HTML\n */\nexport function createTemplate(html: string): HTMLTemplateElement {\n  const template = document.createElement('template');\n  template.innerHTML = html.trim();\n  return template;\n}\n\n/**\n * Get or create a shadow root for an element\n */\nexport function getShadowRoot(\n  element: HTMLElement,\n  options: ShadowRootInit = { mode: 'open' }\n): ShadowRoot {\n  return element.shadowRoot || element.attachShadow(options);\n}\n\n/**\n * Debounce function to limit how often a function can be called\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: number;\n\n  return function executedFunction(...args: Parameters<T>) {\n    const later = () => {\n      clearTimeout(timeout);\n      func(...args);\n    };\n\n    clearTimeout(timeout);\n    timeout = window.setTimeout(later, wait);\n  };\n}\n\n/**\n * Check if an element is visible in the viewport\n */\nexport function isElementVisible(element: HTMLElement): boolean {\n  const rect = element.getBoundingClientRect();\n  return (\n    rect.top >= 0 &&\n    rect.left >= 0 &&\n    rect.bottom <=\n      (window.innerHeight || document.documentElement.clientHeight) &&\n    rect.right <= (window.innerWidth || document.documentElement.clientWidth)\n  );\n}\n\n/**\n * Apply theme class to an element\n */\nexport function applyTheme(\n  element: HTMLElement,\n  theme: 'light' | 'dark' | 'auto'\n): void {\n  element.classList.remove('theme-light', 'theme-dark', 'theme-auto');\n  element.classList.add(`theme-${theme}`);\n}\n","/**\n * Collapsible Panel Element\n * A panel that can be collapsed to a thin bar with an expand button\n * or expanded to show its full content\n */\n\nimport { EditorElementProperties, Theme } from '../../types';\nimport {\n  applyTheme,\n  dispatchCustomEvent,\n  generateId,\n  getShadowRoot,\n} from '../../utils';\n\nexport type PanelOrientation = 'horizontal' | 'vertical';\n\nexport class CollapsiblePanel\n  extends HTMLElement\n  implements EditorElementProperties\n{\n  private _theme: Theme = 'auto';\n  private _collapsed: boolean = false;\n  private _orientation: PanelOrientation = 'vertical';\n\n  static get observedAttributes(): string[] {\n    return ['theme', 'disabled', 'collapsed', 'orientation'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: block;\n          position: relative;\n          background: var(--panel-bg, #ffffff);\n          border: 1px solid var(--panel-border, #ccc);\n          font-family: var(--font-family, system-ui, sans-serif);\n          font-size: var(--font-size, 14px);\n          transition: all 0.3s ease;\n        }\n\n        :host(.theme-dark) {\n          background: var(--panel-bg-dark, #2d2d2d);\n          border-color: var(--panel-border-dark, #555);\n          color: var(--text-color-dark, #fff);\n        }\n\n        :host([disabled]) {\n          opacity: 0.6;\n          pointer-events: none;\n        }\n\n        /* Vertical orientation (default) */\n        :host([orientation=\"vertical\"]) {\n          min-height: 200px;\n        }\n\n        :host([orientation=\"vertical\"][collapsed]) {\n          min-height: 32px;\n          height: 32px;\n          overflow: hidden;\n        }\n\n        /* Horizontal orientation */\n        :host([orientation=\"horizontal\"]) {\n          min-width: 200px;\n          display: inline-block;\n          vertical-align: top;\n        }\n\n        :host([orientation=\"horizontal\"][collapsed]) {\n          min-width: 32px;\n          width: 32px;\n          overflow: hidden;\n        }\n\n        .panel-header {\n          display: flex;\n          align-items: center;\n          padding: 8px;\n          background: var(--panel-header-bg, #f8f8f8);\n          border-bottom: 1px solid var(--panel-border, #ccc);\n          min-height: 16px;\n          cursor: pointer;\n          user-select: none;\n        }\n\n        :host(.theme-dark) .panel-header {\n          background: var(--panel-header-bg-dark, #3a3a3a);\n          border-bottom-color: var(--panel-border-dark, #555);\n        }\n\n        .panel-header:hover {\n          background: var(--panel-header-hover-bg, #e8e8e8);\n        }\n\n        :host(.theme-dark) .panel-header:hover {\n          background: var(--panel-header-hover-bg-dark, #404040);\n        }\n\n        .toggle-button {\n          width: 16px;\n          height: 16px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          font-size: 12px;\n          margin-right: 8px;\n          flex-shrink: 0;\n        }\n\n        /* Vertical orientation icons */\n        :host([orientation=\"vertical\"]) .toggle-button .burger-icon {\n          display: none;\n        }\n\n        :host([orientation=\"vertical\"]) .toggle-button .close-icon {\n          display: block;\n        }\n\n        :host([orientation=\"vertical\"][collapsed]) .toggle-button .burger-icon {\n          display: block;\n        }\n\n        :host([orientation=\"vertical\"][collapsed]) .toggle-button .close-icon {\n          display: none;\n        }\n\n        /* Horizontal orientation icons */\n        :host([orientation=\"horizontal\"]) .toggle-button .burger-icon {\n          display: none;\n        }\n\n        :host([orientation=\"horizontal\"]) .toggle-button .close-icon {\n          display: block;\n        }\n\n        :host([orientation=\"horizontal\"][collapsed]) .toggle-button .burger-icon {\n          display: block;\n        }\n\n        :host([orientation=\"horizontal\"][collapsed]) .toggle-button .close-icon {\n          display: none;\n        }\n\n        /* Rotate icons for horizontal orientation */\n        :host([orientation=\"horizontal\"]) .toggle-button {\n          transform: rotate(90deg);\n        }\n\n        .panel-title {\n          flex-grow: 1;\n          font-weight: 500;\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n        }\n\n        /* Hide title when collapsed */\n        :host([collapsed]) .panel-title {\n          display: none;\n        }\n\n        .panel-content {\n          padding: 12px;\n          overflow: auto;\n        }\n\n        :host([collapsed]) .panel-content {\n          display: none;\n        }\n\n        /* Content slot styling */\n        ::slotted(*) {\n          display: block;\n        }\n      </style>\n\n      <div class=\"panel-header\">\n        <div class=\"toggle-button\">\n          <span class=\"burger-icon\">☰</span>\n          <span class=\"close-icon\">✕</span>\n        </div>\n        <div class=\"panel-title\">\n          <slot name=\"title\">Panel</slot>\n        </div>\n      </div>\n\n      <div class=\"panel-content\">\n        <slot></slot>\n      </div>\n    `;\n\n    // Add click handler for the header\n    const header = shadowRoot.querySelector('.panel-header') as HTMLElement;\n    header.addEventListener('click', this.handleToggle.bind(this));\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('collapsible-panel');\n    }\n    this.applyTheme(this._theme);\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string,\n    newValue: string\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'theme':\n        this.theme = newValue as Theme;\n        break;\n      case 'collapsed':\n        this._collapsed = newValue !== null;\n        break;\n      case 'orientation':\n        this._orientation = (newValue as PanelOrientation) || 'vertical';\n        break;\n    }\n  }\n\n  private handleToggle(): void {\n    this.collapsed = !this.collapsed;\n\n    // Dispatch toggle event\n    dispatchCustomEvent(this, 'collapsible-panel-toggle', {\n      panelId: this.id,\n      panel: this,\n      collapsed: this.collapsed,\n      orientation: this.orientation,\n    });\n  }\n\n  // Public API\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this._theme = value;\n    this.applyTheme(value);\n  }\n\n  get collapsed(): boolean {\n    return this._collapsed;\n  }\n\n  set collapsed(value: boolean) {\n    this._collapsed = value;\n    if (value) {\n      this.setAttribute('collapsed', '');\n    } else {\n      this.removeAttribute('collapsed');\n    }\n  }\n\n  get orientation(): PanelOrientation {\n    return this._orientation;\n  }\n\n  set orientation(value: PanelOrientation) {\n    this._orientation = value;\n    this.setAttribute('orientation', value);\n  }\n\n  toggle(): void {\n    this.collapsed = !this.collapsed;\n  }\n\n  expand(): void {\n    this.collapsed = false;\n  }\n\n  collapse(): void {\n    this.collapsed = true;\n  }\n\n  applyTheme(theme: Theme): void {\n    applyTheme(this, theme);\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-collapsible-panel')) {\n  customElements.define('e2-collapsible-panel', CollapsiblePanel);\n}\n","/**\n * Toolbar Element\n * A horizontal container for toolbar buttons and other controls\n */\n\nimport { EditorElementProperties, Theme } from '../../types';\nimport { applyTheme, generateId, getShadowRoot } from '../../utils';\n\nexport class Toolbar extends HTMLElement implements EditorElementProperties {\n  private _theme: Theme = 'auto';\n\n  static get observedAttributes(): string[] {\n    return ['theme', 'disabled'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: flex;\n          align-items: center;\n          padding: 4px;\n          background: var(--toolbar-bg, #f0f0f0);\n          border-bottom: 1px solid var(--toolbar-border, #ccc);\n          gap: 2px;\n          font-family: var(--font-family, system-ui, sans-serif);\n          font-size: var(--font-size, 14px);\n        }\n\n        :host(.theme-dark) {\n          background: var(--toolbar-bg-dark, #2d2d2d);\n          border-bottom-color: var(--toolbar-border-dark, #555);\n          color: var(--text-color-dark, #fff);\n        }\n\n        :host([disabled]) {\n          opacity: 0.6;\n          pointer-events: none;\n        }\n\n        ::slotted(*) {\n          flex-shrink: 0;\n        }\n      </style>\n      <slot></slot>\n    `;\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('toolbar');\n    }\n    this.applyTheme(this._theme);\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string,\n    newValue: string\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'theme':\n        this.theme = newValue as Theme;\n        break;\n    }\n  }\n\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this._theme = value;\n    this.applyTheme(value);\n  }\n\n  applyTheme(theme: Theme): void {\n    applyTheme(this, theme);\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-toolbar')) {\n  customElements.define('e2-toolbar', Toolbar);\n}\n","/**\n * Toolbar Button Element\n * A button designed to be used within a toolbar\n */\n\nimport { EditorElementProperties, Theme } from '../../types';\nimport { applyTheme, generateId, getShadowRoot } from '../../utils';\n\nexport class ToolbarButton\n  extends HTMLElement\n  implements EditorElementProperties\n{\n  private _theme: Theme = 'auto';\n\n  static get observedAttributes(): string[] {\n    return ['label', 'icon', 'theme', 'disabled', 'active'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: inline-block;\n        }\n\n        button {\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          gap: 4px;\n          padding: 6px 12px;\n          border: 1px solid transparent;\n          background: transparent;\n          color: var(--text-color, #333);\n          font-family: inherit;\n          font-size: inherit;\n          cursor: pointer;\n          border-radius: 3px;\n          min-height: 24px;\n          transition: all 0.15s ease;\n          text-overflow: ellipsis;\n          overflow: hidden;\n        }\n\n        button:hover {\n          background: var(--button-hover-bg, rgba(0, 0, 0, 0.1));\n        }\n\n        button:active,\n        button.active {\n          background: var(--button-active-bg, rgba(0, 0, 0, 0.2));\n        }\n\n        button:disabled {\n          opacity: 0.6;\n          cursor: not-allowed;\n        }\n\n        :host(.theme-dark) button {\n          color: var(--text-color-dark, #fff);\n        }\n\n        :host(.theme-dark) button:hover {\n          background: var(--button-hover-bg-dark, rgba(255, 255, 255, 0.1));\n        }\n\n        :host(.theme-dark) button:active,\n        :host(.theme-dark) button.active {\n          background: var(--button-active-bg-dark, rgba(255, 255, 255, 0.2));\n        }\n\n        .icon {\n          width: 16px;\n          height: 16px;\n          flex-shrink: 0;\n        }\n\n        .label {\n          white-space: nowrap;\n        }\n      </style>\n      <button>\n        <span class=\"icon\" style=\"display: none;\"></span>\n        <span class=\"label\"></span>\n      </button>\n    `;\n\n    const button = shadowRoot.querySelector('button')!;\n    button.addEventListener('click', this.handleClick.bind(this));\n  }\n\n  connectedCallback(): void {\n    if (!this.id) {\n      this.id = generateId('toolbar-button');\n    }\n    this.updateContent();\n    this.applyTheme(this._theme);\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string,\n    newValue: string\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'label':\n      case 'icon':\n        this.updateContent();\n        break;\n      case 'theme':\n        this.theme = newValue as Theme;\n        break;\n      case 'disabled':\n        this.updateDisabled();\n        break;\n      case 'active':\n        this.updateActive();\n        break;\n    }\n  }\n\n  private updateContent(): void {\n    const shadowRoot = this.shadowRoot!;\n    const iconSpan = shadowRoot.querySelector('.icon') as HTMLSpanElement;\n    const labelSpan = shadowRoot.querySelector('.label') as HTMLSpanElement;\n\n    const icon = this.getAttribute('icon');\n    const label = this.getAttribute('label') || '';\n\n    if (icon) {\n      iconSpan.textContent = icon;\n      iconSpan.style.display = 'inline-block';\n    } else {\n      iconSpan.style.display = 'none';\n    }\n\n    labelSpan.textContent = label;\n  }\n\n  private updateDisabled(): void {\n    const button = this.shadowRoot!.querySelector('button')!;\n    button.disabled = this.hasAttribute('disabled');\n  }\n\n  private updateActive(): void {\n    const button = this.shadowRoot!.querySelector('button')!;\n    button.classList.toggle('active', this.hasAttribute('active'));\n  }\n\n  private handleClick(event: Event): void {\n    if (this.hasAttribute('disabled')) return;\n\n    const customEvent = new CustomEvent('toolbar-button-click', {\n      detail: {\n        buttonId: this.id,\n        button: this,\n      },\n      bubbles: true,\n      cancelable: true,\n    });\n\n    this.dispatchEvent(customEvent);\n  }\n\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this._theme = value;\n    this.applyTheme(value);\n  }\n\n  applyTheme(theme: Theme): void {\n    applyTheme(this, theme);\n  }\n\n  get label(): string {\n    return this.getAttribute('label') || '';\n  }\n\n  set label(value: string) {\n    this.setAttribute('label', value);\n  }\n\n  get icon(): string {\n    return this.getAttribute('icon') || '';\n  }\n\n  set icon(value: string) {\n    this.setAttribute('icon', value);\n  }\n\n  get active(): boolean {\n    return this.hasAttribute('active');\n  }\n\n  set active(value: boolean) {\n    if (value) {\n      this.setAttribute('active', '');\n    } else {\n      this.removeAttribute('active');\n    }\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-toolbar-button')) {\n  customElements.define('e2-toolbar-button', ToolbarButton);\n}\n","/**\n * Toolbar Separator Element\n * A visual separator for toolbar items\n */\n\nimport { Theme } from '../../types';\nimport { applyTheme, getShadowRoot } from '../../utils';\n\nexport class ToolbarSeparator extends HTMLElement {\n  private _theme: Theme = 'auto';\n\n  static get observedAttributes(): string[] {\n    return ['theme'];\n  }\n\n  constructor() {\n    super();\n    this.setupElement();\n  }\n\n  private setupElement(): void {\n    const shadowRoot = getShadowRoot(this);\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: inline-block;\n          width: 1px;\n          height: 24px;\n          background: var(--separator-color, #ccc);\n          margin: 0 4px;\n          flex-shrink: 0;\n        }\n\n        :host(.theme-dark) {\n          background: var(--separator-color-dark, #555);\n        }\n      </style>\n    `;\n  }\n\n  connectedCallback(): void {\n    this.applyTheme(this._theme);\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string,\n    newValue: string\n  ): void {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'theme':\n        this.theme = newValue as Theme;\n        break;\n    }\n  }\n\n  get theme(): Theme {\n    return this._theme;\n  }\n\n  set theme(value: Theme) {\n    this._theme = value;\n    this.applyTheme(value);\n  }\n\n  applyTheme(theme: Theme): void {\n    applyTheme(this, theme);\n  }\n}\n\n// Register the custom element\nif (!customElements.get('e2-toolbar-separator')) {\n  customElements.define('e2-toolbar-separator', ToolbarSeparator);\n}\n","/**\n * E2 - A collection of custom HTML elements for building editors\n *\n * This library provides a set of reusable UI components designed specifically\n * for creating level editors, sprite editors, and similar desktop-like web applications.\n */\n\n// Import and register all custom elements\nimport './elements/panel/collapsible-panel';\nimport './elements/toolbar/toolbar';\nimport './elements/toolbar/toolbar-button';\nimport './elements/toolbar/toolbar-separator';\n\n// Export types and interfaces for TypeScript users\nexport * from './types';\n\n// Export utility functions if any\nexport * from './utils';\n\n// Version information\nexport const VERSION = '1.0.0';\n\n// Auto-registration message for development\nif (typeof window !== 'undefined' && process.env.NODE_ENV === 'development') {\n  console.log(\n    `E2 v${VERSION} loaded - Custom elements registered automatically`\n  );\n}\n"],"names":["root","factory","exports","module","define","amd","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","generateId","prefix","Math","random","toString","substr","dispatchCustomEvent","element","eventName","detail","options","event","CustomEvent","bubbles","cancelable","dispatchEvent","addGlobalCSS","css","id","document","getElementById","style","createElement","textContent","head","appendChild","createTemplate","html","template","innerHTML","trim","getShadowRoot","mode","shadowRoot","attachShadow","debounce","func","wait","timeout","args","clearTimeout","window","setTimeout","isElementVisible","rect","getBoundingClientRect","top","left","bottom","innerHeight","documentElement","clientHeight","right","innerWidth","clientWidth","applyTheme","theme","classList","remove","add","CollapsiblePanel","HTMLElement","observedAttributes","constructor","super","_theme","_collapsed","_orientation","setupElement","querySelector","addEventListener","handleToggle","bind","connectedCallback","attributeChangedCallback","name","oldValue","newValue","collapsed","panelId","panel","orientation","setAttribute","removeAttribute","toggle","expand","collapse","customElements","Toolbar","ToolbarButton","handleClick","updateContent","updateDisabled","updateActive","iconSpan","labelSpan","icon","getAttribute","label","display","disabled","hasAttribute","customEvent","buttonId","button","active","ToolbarSeparator","VERSION"],"sourceRoot":""}