!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.E2=e():t.E2=e()}(this,()=>(()=>{"use strict";var t={d:(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},e={};function n(t="element"){return`${t}-${Math.random().toString(36).substr(2,9)}`}function o(t,e,n,o={}){const i=new CustomEvent(e,{detail:n,bubbles:!0,cancelable:!0,...o});return t.dispatchEvent(i)}function i(t,e){if(e&&document.getElementById(e))return;const n=document.createElement("style");e&&(n.id=e),n.textContent=t,document.head.appendChild(n)}function a(t){const e=document.createElement("template");return e.innerHTML=t.trim(),e}function s(t,e={mode:"open"}){return t.shadowRoot||t.attachShadow(e)}function l(t,e){let n;return function(...o){clearTimeout(n),n=window.setTimeout(()=>{clearTimeout(n),t(...o)},e)}}function r(t){const e=t.getBoundingClientRect();return e.top>=0&&e.left>=0&&e.bottom<=(window.innerHeight||document.documentElement.clientHeight)&&e.right<=(window.innerWidth||document.documentElement.clientWidth)}function c(t,e){t.classList.remove("theme-light","theme-dark","theme-auto"),t.classList.add(`theme-${e}`)}t.r(e),t.d(e,{VERSION:()=>u,addGlobalCSS:()=>i,applyTheme:()=>c,createTemplate:()=>a,debounce:()=>l,dispatchCustomEvent:()=>o,generateId:()=>n,getShadowRoot:()=>s,isElementVisible:()=>r});class h extends HTMLElement{static get observedAttributes(){return["theme","disabled","collapsed","orientation"]}constructor(){super(),this._theme="auto",this._collapsed=!1,this._orientation="vertical",this.setupElement()}setupElement(){const t=s(this);t.innerHTML='\n      <style>\n        :host {\n          display: block;\n          position: relative;\n          background: var(--panel-bg, #ffffff);\n          border: 1px solid var(--panel-border, #ccc);\n          font-family: var(--font-family, system-ui, sans-serif);\n          font-size: var(--font-size, 14px);\n          transition: all 0.3s ease;\n        }\n\n        :host(.theme-dark) {\n          background: var(--panel-bg-dark, #2d2d2d);\n          border-color: var(--panel-border-dark, #555);\n          color: var(--text-color-dark, #fff);\n        }\n\n        :host([disabled]) {\n          opacity: 0.6;\n          pointer-events: none;\n        }\n\n        /* Vertical orientation (default) */\n        :host([orientation="vertical"]) {\n          min-height: 200px;\n        }\n\n        :host([orientation="vertical"][collapsed]) {\n          min-height: 32px;\n          height: 32px;\n          overflow: hidden;\n        }\n\n        /* Horizontal orientation */\n        :host([orientation="horizontal"]) {\n          min-width: 200px;\n          display: inline-block;\n          vertical-align: top;\n        }\n\n        :host([orientation="horizontal"][collapsed]) {\n          min-width: 32px;\n          width: 32px;\n          overflow: hidden;\n        }\n\n        .panel-header {\n          display: flex;\n          align-items: center;\n          padding: 8px;\n          background: var(--panel-header-bg, #f8f8f8);\n          border-bottom: 1px solid var(--panel-border, #ccc);\n          min-height: 16px;\n          cursor: pointer;\n          user-select: none;\n        }\n\n        :host(.theme-dark) .panel-header {\n          background: var(--panel-header-bg-dark, #3a3a3a);\n          border-bottom-color: var(--panel-border-dark, #555);\n        }\n\n        .panel-header:hover {\n          background: var(--panel-header-hover-bg, #e8e8e8);\n        }\n\n        :host(.theme-dark) .panel-header:hover {\n          background: var(--panel-header-hover-bg-dark, #404040);\n        }\n\n        .toggle-button {\n          width: 16px;\n          height: 16px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          font-size: 12px;\n          margin-right: 8px;\n          flex-shrink: 0;\n        }\n\n        /* Vertical orientation icons */\n        :host([orientation="vertical"]) .toggle-button .burger-icon {\n          display: none;\n        }\n\n        :host([orientation="vertical"]) .toggle-button .close-icon {\n          display: block;\n        }\n\n        :host([orientation="vertical"][collapsed]) .toggle-button .burger-icon {\n          display: block;\n        }\n\n        :host([orientation="vertical"][collapsed]) .toggle-button .close-icon {\n          display: none;\n        }\n\n        /* Horizontal orientation icons */\n        :host([orientation="horizontal"]) .toggle-button .burger-icon {\n          display: none;\n        }\n\n        :host([orientation="horizontal"]) .toggle-button .close-icon {\n          display: block;\n        }\n\n        :host([orientation="horizontal"][collapsed]) .toggle-button .burger-icon {\n          display: block;\n        }\n\n        :host([orientation="horizontal"][collapsed]) .toggle-button .close-icon {\n          display: none;\n        }\n\n        /* Rotate icons for horizontal orientation */\n        :host([orientation="horizontal"]) .toggle-button {\n          transform: rotate(90deg);\n        }\n\n        .panel-title {\n          flex-grow: 1;\n          font-weight: 500;\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n        }\n\n        /* Hide title when collapsed */\n        :host([collapsed]) .panel-title {\n          display: none;\n        }\n\n        .panel-content {\n          padding: 12px;\n          overflow: auto;\n        }\n\n        :host([collapsed]) .panel-content {\n          display: none;\n        }\n\n        /* Content slot styling */\n        ::slotted(*) {\n          display: block;\n        }\n      </style>\n\n      <div class="panel-header">\n        <div class="toggle-button">\n          <span class="burger-icon">☰</span>\n          <span class="close-icon">✕</span>\n        </div>\n        <div class="panel-title">\n          <slot name="title">Panel</slot>\n        </div>\n      </div>\n\n      <div class="panel-content">\n        <slot></slot>\n      </div>\n    ',t.querySelector(".panel-header").addEventListener("click",this.handleToggle.bind(this))}connectedCallback(){this.id||(this.id=n("collapsible-panel")),this.applyTheme(this._theme)}attributeChangedCallback(t,e,n){if(e!==n)switch(t){case"theme":this.theme=n;break;case"collapsed":this._collapsed=null!==n;break;case"orientation":this._orientation=n||"vertical"}}handleToggle(){this.collapsed=!this.collapsed,o(this,"collapsible-panel-toggle",{panelId:this.id,panel:this,collapsed:this.collapsed,orientation:this.orientation})}get theme(){return this._theme}set theme(t){this._theme=t,this.applyTheme(t)}get collapsed(){return this._collapsed}set collapsed(t){this._collapsed=t,t?this.setAttribute("collapsed",""):this.removeAttribute("collapsed")}get orientation(){return this._orientation}set orientation(t){this._orientation=t,this.setAttribute("orientation",t)}toggle(){this.collapsed=!this.collapsed}expand(){this.collapsed=!1}collapse(){this.collapsed=!0}applyTheme(t){c(this,t)}}customElements.get("e2-collapsible-panel")||customElements.define("e2-collapsible-panel",h);class d extends HTMLElement{static get observedAttributes(){return["theme","disabled"]}constructor(){super(),this._theme="auto",this.setupElement()}setupElement(){s(this).innerHTML="\n      <style>\n        :host {\n          display: flex;\n          align-items: center;\n          padding: 4px;\n          background: var(--toolbar-bg, #f0f0f0);\n          border-bottom: 1px solid var(--toolbar-border, #ccc);\n          gap: 2px;\n          font-family: var(--font-family, system-ui, sans-serif);\n          font-size: var(--font-size, 14px);\n        }\n\n        :host(.theme-dark) {\n          background: var(--toolbar-bg-dark, #2d2d2d);\n          border-bottom-color: var(--toolbar-border-dark, #555);\n          color: var(--text-color-dark, #fff);\n        }\n\n        :host([disabled]) {\n          opacity: 0.6;\n          pointer-events: none;\n        }\n\n        ::slotted(*) {\n          flex-shrink: 0;\n        }\n      </style>\n      <slot></slot>\n    "}connectedCallback(){this.id||(this.id=n("toolbar")),this.applyTheme(this._theme)}attributeChangedCallback(t,e,n){e!==n&&"theme"===t&&(this.theme=n)}get theme(){return this._theme}set theme(t){this._theme=t,this.applyTheme(t)}applyTheme(t){c(this,t)}}customElements.get("e2-toolbar")||customElements.define("e2-toolbar",d);class p extends HTMLElement{static get observedAttributes(){return["label","icon","theme","disabled","active"]}constructor(){super(),this._theme="auto",this.setupElement()}setupElement(){const t=s(this);t.innerHTML='\n      <style>\n        :host {\n          display: inline-block;\n        }\n\n        button {\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          gap: 4px;\n          padding: 6px 12px;\n          border: 1px solid transparent;\n          background: transparent;\n          color: var(--text-color, #333);\n          font-family: inherit;\n          font-size: inherit;\n          cursor: pointer;\n          border-radius: 3px;\n          min-height: 24px;\n          transition: all 0.15s ease;\n          text-overflow: ellipsis;\n          overflow: hidden;\n        }\n\n        button:hover {\n          background: var(--button-hover-bg, rgba(0, 0, 0, 0.1));\n        }\n\n        button:active,\n        button.active {\n          background: var(--button-active-bg, rgba(0, 0, 0, 0.2));\n        }\n\n        button:disabled {\n          opacity: 0.6;\n          cursor: not-allowed;\n        }\n\n        :host(.theme-dark) button {\n          color: var(--text-color-dark, #fff);\n        }\n\n        :host(.theme-dark) button:hover {\n          background: var(--button-hover-bg-dark, rgba(255, 255, 255, 0.1));\n        }\n\n        :host(.theme-dark) button:active,\n        :host(.theme-dark) button.active {\n          background: var(--button-active-bg-dark, rgba(255, 255, 255, 0.2));\n        }\n\n        .icon {\n          width: 16px;\n          height: 16px;\n          flex-shrink: 0;\n        }\n\n        .label {\n          white-space: nowrap;\n        }\n      </style>\n      <button>\n        <span class="icon" style="display: none;"></span>\n        <span class="label"></span>\n      </button>\n    ',t.querySelector("button").addEventListener("click",this.handleClick.bind(this))}connectedCallback(){this.id||(this.id=n("toolbar-button")),this.updateContent(),this.applyTheme(this._theme)}attributeChangedCallback(t,e,n){if(e!==n)switch(t){case"label":case"icon":this.updateContent();break;case"theme":this.theme=n;break;case"disabled":this.updateDisabled();break;case"active":this.updateActive()}}updateContent(){const t=this.shadowRoot,e=t.querySelector(".icon"),n=t.querySelector(".label"),o=this.getAttribute("icon"),i=this.getAttribute("label")||"";o?(e.textContent=o,e.style.display="inline-block"):e.style.display="none",n.textContent=i}updateDisabled(){this.shadowRoot.querySelector("button").disabled=this.hasAttribute("disabled")}updateActive(){this.shadowRoot.querySelector("button").classList.toggle("active",this.hasAttribute("active"))}handleClick(t){if(this.hasAttribute("disabled"))return;const e=new CustomEvent("toolbar-button-click",{detail:{buttonId:this.id,button:this},bubbles:!0,cancelable:!0});this.dispatchEvent(e)}get theme(){return this._theme}set theme(t){this._theme=t,this.applyTheme(t)}applyTheme(t){c(this,t)}get label(){return this.getAttribute("label")||""}set label(t){this.setAttribute("label",t)}get icon(){return this.getAttribute("icon")||""}set icon(t){this.setAttribute("icon",t)}get active(){return this.hasAttribute("active")}set active(t){t?this.setAttribute("active",""):this.removeAttribute("active")}}customElements.get("e2-toolbar-button")||customElements.define("e2-toolbar-button",p);class b extends HTMLElement{static get observedAttributes(){return["theme"]}constructor(){super(),this._theme="auto",this.setupElement()}setupElement(){s(this).innerHTML="\n      <style>\n        :host {\n          display: inline-block;\n          width: 1px;\n          height: 24px;\n          background: var(--separator-color, #ccc);\n          margin: 0 4px;\n          flex-shrink: 0;\n        }\n\n        :host(.theme-dark) {\n          background: var(--separator-color-dark, #555);\n        }\n      </style>\n    "}connectedCallback(){this.applyTheme(this._theme)}attributeChangedCallback(t,e,n){e!==n&&"theme"===t&&(this.theme=n)}get theme(){return this._theme}set theme(t){this._theme=t,this.applyTheme(t)}applyTheme(t){c(this,t)}}customElements.get("e2-toolbar-separator")||customElements.define("e2-toolbar-separator",b);const u="1.0.0";return e})());
//# sourceMappingURL=e2.min.js.map